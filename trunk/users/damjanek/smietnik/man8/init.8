.\"{{{}}}
.\" Translation (c) 1998 Paweł Wilk <siewca@dione.ids.pl>
.\" Translation update: Robert Luberda <robert@debian.org>, Mar 2005, sysvinit 2.86
.\" $Id: init.8,v 1.5 2005/03/20 19:20:59 robert Exp $
.\" {PTM/PW/0.2/09-05-1999/"steruj procesem inicjującym"}
.\"{{{  Title
.TH INIT 8 "19 lipca 2004" "" "Podręcznik administratora systemu Linux"
.\"}}}
.\"{{{  Name
.SH NAZWA
init, telinit \- sterowanie procesu inicjującego
.\"}}}
.\"{{{  Synopsis
.SH SKŁADNIA
.B /sbin/init
.RB [ " \-a " ]
.RB [ " \-s " ]
.RB [ " \-b " ]
.RB [ " \-z xxx " ]
.RB [ " 0123456Ss " ]
.br
.B /sbin/telinit
.RB [ " \-t sekundy " ]
.RB [ " 0123456sSQqabcUu " ]
.\"}}}
.\"}}}
.\"{{{  Description
.SH OPIS
.\"{{{  init
.SS Init
.B Init
jest przodkiem wszystkich procesów. Jego głównym zadaniem jest stworzenie procesów
w oparciu o skrypt zapisany w pliku \fB/etc/inittab\fP (patrz też
\fIinittab\fP(5)). Ten plik zawiera zwykle pozycje, które każą procesowi \fBinit\fP
pomnażać \fBgetty\fP na każdej linii, na które użytkownicy mogą się zalogować. Kontroluje
też samodzielne procesy, których istnienie jest konieczne w danym systemie.
.PP
.\"{{{ Runlevels
.SH POZIOMY PRACY
\fIRunlevel\fP (poziom pracy) jest to konfiguracja oprogramowania systemu,
która pozwala
zaistnieć tylko wytypowanym grupom procesów. Procesy tworzone przez
\fBinit\fP dla każdego z tych poziomów są zdefiniowane w pliku
\fB/etc/inittab\fP. \fBInit\fP może być w jednym z ośmiu poziomów pracy:
\fB0\(en6\fP i \fBS\fP lub \fBs\fP. Poziom pracy jest
zmieniany przez uruchomienie \fBtelinit\fP przez uprzywilejowanego użytkownika.
\fBtelinit\fP wysyła odpowiednie sygnały do \fBinit\fP, mówiące, w jaki tryb ma
przejść.
.PP
Tryby pracy \fB0\fP, \fB1\fP, oraz \fB6\fP są zarezerwowane. Tryb 0 jest używany, by
zatrzymać system, tryb 6, by przeładować system (reboot), a tryb
1, by wprowadzić system w tryb pracy jednego użytkownika (single\-user mode). Tryb \fBS\fP
nie jest pomyślany dokładnie tak, by go używać bezpośrednio, lecz raczej dla skryptów
wykonywanych przy wchodzeniu w tryb 1. Aby uzyskać więcej informacji na ten temat,
zobacz strony podręcznika dla \fBshutdown\fP(8) i \fBinittab\fP(5).
.PP
Tryby pracy 7\-9 też są poprawne, choć niezbyt udokumentowane. To z powodu
"tradycyjnych" wariantów Uniksa nie używających ich.
Jeśli jesteś ciekaw, to wiedz, że poziomy \fIS\fP i \fIs\fP są w rzeczywistości takie same.
Wewnętrznie są to tylko zastępcze nazwy dla takich samych trybów pracy.
.\"}}}
.PP
.SH BOOTOWANIE
Po tym jak \fBinit\fP jest wywołany w ostatnim kroku sekwencji bootującej jądra,
szuka pliku \fB/etc/inittab\fP w celu znalezienia w nim pola typu
\fBinitdefault\fP (patrz też \fIinittab\fP(5)). Pole \fBinitdefault\fP
określa początkowy poziom pracy systemu. Jeśli nie ma tam takiego
pola (lub wcale nie istnieje \fB/etc/inittab\fP), poziom pracy musi być
podany z konsoli systemowej.
.PP
Poziom \fBS\fP lub \fBs\fP wprowadza system w tryb jednego użytkownika
i nie wymaga pliku \fB/etc/initttab\fP. W trybie jednego użytkownika,
wywoływany jest \fB/sbin/sulogin\fP na urządzeniu \fB/dev/console\fP.
.PP
Podczas wchodzenia w tryb jednego użytkownika, proces \fBinit\fP
inicjuje ustawienia \fBstty\fR konsoli na bezpieczne wartości. Ustawiany
jest tryb clocal. Prędkość sprzętu i handshaking nie są zmieniane.
.PP
Podczas wchodzenia w tryb wielu użytkowników po raz pierwszy, \fBinit\fP wykonuje
pozycje \fBboot\fP i \fBbootwait\fP, by pozwolić systemom plików zamontować się
zanim użytkownicy będą mogli się zalogować. Potem wykonywane są wszystkie pozycje
przypisane danemu poziomowi pracy.
.PP
Kiedy nowy proces startuje, \fBinit\fP sprawdza najpierw, czy istnieje plik
\fI/etc/initscript\fP. Jeśli tak, używa tego skryptu by
ten proces zacząć.
.PP
Za każdym razem, gdy proces potomny się zakończy, \fBinit\fP zapamiętuje ten fakt i powód
śmierci procesu jest zapisany w \fB/var/run/utmp\fP i \fB/var/log/wtmp\fP,
pod warunkiem, że te pliki istnieją.
.SH ZMIENIANIE TRYBÓW PRACY
Po tym jak "namnożone" zostaną wszystkie wyszczególnione procesy, \fBinit\fP czeka
na śmierć każdego swojego procesu potomnego, sygnał braku energii lub
zasygnalizowanie przez \fBtelinit\fP zmiany poziomu działania systemu.
Gdy wystąpi jeden spośród tych trzech warunków, ponownie sprawdzany jest
plik \fB/etc/inittab\fP, ponieważ nowe pola mogą być do niego dodane
w każdej chwili. Jednakowoż, \fBinit\fP wciąż oczekuje na wystąpienie jednego
z tych trzech warunków. By przygotować się na natychmiastową odpowiedź,
\fBtelinit Q\fP albo użyta komenda \fBq\fP może obudzić proces \fBinit\fP,
by jeszcze raz przeczytał plik \fB/etc/inittab\fP.
.PP
Jeśli \fBinit\fP nie jest w trybie jednego użytkownika i odbiera sygnał zaniku
energii (SIGPWR), czyta plik \fB/etc/powerstatus\fR. Następnie uruchamia polecenie
zależne od zawartości tego pliku:
.IP F(AIL)
Zawodzi zasilanie, UPS dostarcza mocy. Wykonuje wpisy \fBpowerwait\fP
i \fBpowerfail\fP.
.IP O(K)
Zasilanie powróciło, uruchamia wpisy \fBpowerokwait\fP.
.IP L(OW)
Zasilanie zawodzi, a UPS\-owi wyczerpuje się bateria. Wykonuje
wpisy \fBpowerfailnow\fP.
.PP
Jeżeli plik /etc/powerstatus nie istnieje lub zawiera cokolwiek innego niż jedną z
liter \fBF\fP, \fBO\fP lub \fBL\fP, init zachowa się tak, jakby przeczytał \fBF\fR.
.PP
Używanie \fBSIGPWR\fP i \fB/etc/powerstatus\fP nie jest zalecane. Jeżeli
ktoś chce  współdziałać z \fBinit\fP\-em, powinien użyć kanału kontroli
\fB/dev/initctl\fP \- proszę przeczytać kod źródłowy pakietu \fBsysvinit\fP
po więcej dokumentacji dotyczącej tego kanału.
.PP
Gdy \fBinit\fP jest proszony o zmianę poziomu działania, wysyła sygnał
ostrzegawczy \s-1\fBSIGTERM\fP\s0 do wszystkich procesów, które nie są zdefiniowane
w nowym poziomie pracy. Potem czeka 5 sekund zanim "na siłę"
zakończy te procesy poprzez sygnał \s-1\fBSIGKILL\fP\s0.
Zauważ, że \fBinit\fP zakłada, że wszystkie te procesy (i ich potomki)
pozostają w tej samej grupie procesów, którą \fBinit\fP
oryginalnie im utworzył. Jeżeli jakikolwiek proces zmienił swą przynależność do
grupy procesów to nie odbierze tych sygnałów. Tego typu procesy muszą
być kończone osobno (np. demony wszelakie \- przyp. tłum.).
.\"}}}
.\"{{{  telinit
.SH TELINIT
\fB/sbin/telinit\fP jest symbolicznym dowiązaniem do \fB/sbin/init\fP. Pobiera on
jednoznakowy argument i sygnały \fBinit\fP, by podjął stosowne działanie.
Poniższe argumenty można stosować jako rozkazy dla
\fBtelinit\fP:
.IP "\fB0\fP,\fB1\fP,\fB2\fP,\fB3\fP,\fB4\fP,\fB5\fP lub \fB6\fP"
mówią procesowi \fBinit\fP by przełączył w odpowiedni poziom działania.
.IP \fBa\fP,\fBb\fP,\fBc\fP
każą procesowi \fBinit\fP by przetwarzał tylko te pola pliku \fB/etc/inittab\fP,
które odnoszą się do poziomu pracy \fBa\fP,\fBb\fP lub \fBc\fP.
.IP "\fBQ\fP lub \fBq\fP"
każą procesowi \fBinit\fP jeszcze raz przeczytać plik \fB/etc/inittab\fP.
.IP "\fBS\fP lub \fBs\fP"
mówią żeby \fBinit\fP przełączył w tryb jednego użytkownika.
.IP "\fBU\fP lub \fBu\fP"
każą procesowi \fBinit\fP przeładować się (zachowując obecny stan). Nie występuje
ponowne odczytywanie pliku \fB/etc/inittab\fP. Poziom pracy powinien być ustawiony
na \fBSs12345\fP, w przeciwnym wypadku żądanie może być "delikatnie" zignorowane.
.PP
\fBtelinit\fP może także powiedzieć procesowi \fBinit\fP, jak długo powinien on czekać
między wysyłaniem sygnałów SIGTERM i SIGKILL. Domyślną wartością jest
5 sekund, ale może być ona zmieniona za pomocą opcji \fB\-t sekundy\fP.
.PP
\fBtelinit\fP może być wywoływany tylko przez użytkowników uprzywilejowanych.
.PP
Wywołany \fBinit\fP sprawdza czy jest procesem inicjującym \fBinit\fP czy też
jest wywołany jako \fBtelinit\fP poprzez wgląd w swój \fIidentyfikator procesu\fP;
prawdziwy identyfikator procesu \fBinit\fP ma zawsze wartość \fB1\fP.
Teraz już wiadomo, że zamiast wywoływać \fBtelinit\fP możesz też po prostu
użyć \fBinit\fP, a nie skrótu.
.\"}}}
.\"}}}
.SH ŚRODOWISKO
\fBInit\fP ustawia następujące zmienne środowiskowe dla wszystkich swoich dzieci:
.IP \fBPATH\fP
\fI/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin\fP
.IP \fBINIT_VERSION\fP
Jak mówi nazwa \- wersja programu. Użyteczne dla określenia, jeśli skrypt uruchamia się bezpośrednio z \fBinit\fP.
.IP \fBRUNLEVEL\fP
Obecny poziom pracy systemu.
.IP \fBPREVLEVEL\fP
Poprzedni poziom pracy systemu (użyteczne po zmianie poziomów).
.IP \fBCONSOLE\fP
Konsola systemu. Tak naprawdę ta wartość jest przyjmowana od jądra; jednak
jeśli nie jest ustawiona \fBinit\fP ustawi ją domyślnie na \fB/dev/console\fP.
.SH FLAGI STARTOWE
Jest możliwe by przekazać pewne flagi do procesu \fBinit\fP z monitora
startowego (np. LILO). \fBInit\fP dopuszcza stosowanie następujących flag:
.TP 0.5i
.B S, single
Bootowanie w trybie jednego użytkownika. W tym trybie \fI/etc/inittab\fP jest
sprawdzany (wczytywany) i skrypty startowe rc są zwykle uruchamiane zanim
wystartuje powłoka dla trybu jednego użytkownika.
.PP
.TP 0.5i
.B 1\-5
Poziom działania w jakim system ma wystartować.
.PP
.TP 0.5i
.B \-b, emergency
Wejście bezpośrednio w tryb jednego użytkownika bez uruchamiania
żadnych innych skryptów startowych.
.PP
.TP 0.5i
.B \-a, auto
Program ładujący LILO dodaje słowo "auto" do linii poleceń, jeżeli
uruchomił jądro z domyślną linią poleceń (użytkownik jej nie zmieniał).
Jeżeli \fBinit\fP znajdzie to słowo, ustawi zmienną środowiskową
"AUTOBOOT" na "yes". Proszę zauważyć, że nie można tego użyć jako
środka bezpieczeństwa \- oczywiści użytkownik mógł ręcznie w linii
poleceń wpisać "auto" użyć opcji \-a.
.PP
.TP 0.5i
.B \-z xxx
Argument opcji \-z jest ignorowany. Może być użyta do wydłużenia linii poleceń,
tak żeby zajmowała więcej miejsca na stosie. \fBInit\fP może wtedy manipulować linią
poleceń, tak żeby \fBps\fP(1) pokazywało bieżący tryb uruchomienia.
.PP
.SH INTERFEJS
Init nasłuchuje wiadomości na łączu \fIfifo\fP w /dev, \fI/dev/initctl\fP.
\fBTelinit\fP używa tego do komunikacji z procesem init. Ten interfejs nie jest
zbyt dobrze udokumentowany czy skończony. Zainteresowani powinni przestudiować
plik \fIinitreq.h\fP w podkatalogu \fIsrc/\fP archiwum tarowego z kodem źródłowym
\fBinit\fP.
.SH SYGNAŁY
Init reaguje na następujące sygnały:
.TP 0.5i
.B SIGHUP
Ma ten sam efekt co \fBtelinit q\fP.
.PP
.TP 0.5i
.B SIGUSR1
Po odebraniu tego sygnału, init zamyka i ponownie otwiera swoją kontrolkę fifo,
\fB/dev/initctl\fP. Użyteczne w przypadku skryptów startowych, gdy przemontowywany jest
katalog /dev.
.TP 0.5i
.B SIGINT
Zwykle ten sygnał jest wysyłany z jądra by powiedzieć, że wciśnięta została
kombinacja klawiszy CTRL\-ALT\-DEL. Powoduje to rozpoczęcie akcji \fIctrlaltdel\fP.
.TP 0.5i
.B SIGWINCH
Jądro wysyła ten sygnał jeśli wciśnięty został klawisz \fIKeyboardSignal\fP.
Aktywuje to akcję \fIkbrequest\fP.
\"{{{  Conforming to
.SH ZGODNE Z
\fBInit\fP jest kompatybilny z init obecnym System V. Działa
razem ze skryptami w katalogach
\fI/etc/init.d\fP i \fI/etc/rc{poziom_działania}.d\fP.
Jeśli twój system używa tej konwencji, to powinien być obecny plik \fIREADME\fP
w katalogu \fI/etc/init.d\fP wyjaśniający, jak te skrypty działają.
.\"}}}
.\"{{{  Files
.SH PLIKI
.nf
/etc/inittab
/etc/initscript
/dev/console
/var/run/utmp
/var/log/wtmp
/dev/initctl
.fi
.\"}}}
.\"{{{  Warnings
.SH UWAGI
\fBInit\fP zakłada, że procesy i ich procesy potomne
pozostają w tej samej grupie procesów, która była dla nich
oryginalnie stworzona. Jeżeli jakikolwiek proces zmienił swą przynależność do
grupy procesów, \fBinit\fP nie może ich zabić i może skończyć się na tym,
że zostaną dwa procesy czytające z jednej linii terminala.

.\"}}}
.\"{{{  Diagnostics
.SH DIAGNOSTYKA
Jeśli \fBinit\fP zorientuje się, że wciąż powtarza namnażanie zadanego
procesu częściej niż 10 razy w ciągu 2 minut, wtedy założy, że gdzieś
w wywołaniu komendy jest błąd, wyśle wiadomość o błędzie na konsolę
systemu, i przerwie pomnażanie danego pola do upłynięcia 5 minut lub
do odebrania sygnału. Zapobiega to "zjadaniu" zasobów systemu gdy ktoś
popełni błąd typograficzny (bardziej po naszemu: "literówkę" \- przyp. tłum.) w pliku
\fB/etc/inittab\fP lub gdy program normalnie uruchamiany dla danego
wpisu jest usunięty.
.\"}}}
.\"{{{  Author
.SH AUTOR
Miquel van Smoorenburg (miquels@cistron.nl), pierwszą wersję strony
podręcznika napisał Michael Haardt (u31b3hs@pool.informatik.rwth\-aachen.de).
.\"}}}
.\"{{{  See also
.SH "PATRZ TAKŻE"
.BR getty (1),
.BR login (1),
.BR sh (1),
.BR runlevel (8),
.BR shutdown(8),
.BR kill (1),
.BR inittab (5),
.BR initscript (5),
.BR utmp (5)
.\"}}}
