%& -translate-file=il2-pl
\def\fontprefix{pl}
\input texinfo
@c %**start of header
@setfilename textutils.info
@settitle Marzędzia tekstowe GNU
@documentencoding ISO-8859-2
@documentlanguage pl
@c %**end of header

@c WK: zrezygnowałem z
@c   @include version.texi
@c bo gryzło się z innymi *utils w jednym katalogu
@set UPDATED 31 czerwca 1999
@set UPDATED-MONTH czerwiec 1999
@set EDITION 2.0
@set VERSION 2.0

@c Define new indices.
@defcodeindex op

@c Put everything in one index (arbitrarily chosen to be the concept index).
@syncodeindex fn cp
@syncodeindex ky cp
@syncodeindex op cp
@syncodeindex pg cp
@syncodeindex vr cp

@ifinfo
@format
START-INFO-DIR-ENTRY
* Narzędzia tekstowe: (textutils).         Narzędzia tekstowe GNU.
* cat: (textutils)Wywołanie cat.           Łączenie i wypisywanie plików.
* cksum: (textutils)Wywołanie cksum.       Wypisywanie sumy kontrolnej CRC.
* comm: (textutils)Wywołanie comm.         Porównywanie posortowanych plików liniami.
* csplit: (textutils)Wywołanie csplit.     Podział pliku wg kontekstu.
* cut: (textutils)Wywołanie cut.           Wypisywanie wybranych części linii.
* expand: (textutils)Wywołanie expand.     Zamiana tabulacji na spacje.
* fmt: (textutils)Wywołanie fmt.           Reformatowanie akapitów tekstu.
* fold: (textutils)Wywołanie fold.         Zawijanie długich linii wejściowych.
* head: (textutils)Wywołanie head.         Wypisywanie początku plików.
* join: (textutils)Wywołanie join.         Łączenie linii wg wspólnego pola.
* md5sum: (textutils)Wywołanie md5sum.     Wypisywanie lub sprawdzanie skrótu.
* nl: (textutils)Wywołanie nl.             Numerowanie linii i wypisywanie plików.
* od: (textutils)Wywołanie od.             Wypisywanie plików w formacie ósemkowym i innych
* paste: (textutils)Wywołanie paste.       Zlepianie linii plików.
* pr: (textutils)Wywołanie pr.             Stronicowanie i kolumnowanie plików.
* ptx: (textutils)Wywołanie ptx.           Tworzenie indeksów permutacyjnych.
* sort: (textutils)Wywołanie sort.         Sortowanie plików tekstowych.
* split: (textutils)Wywołanie split.       Podział pliku na części o stałej wielkości.
* sum: (textutils)Wywołanie sum.           Wypisywanie tradycujnej sumy kontrolnej.
* tac: (textutils)Wywołanie tac.           Odwracanie plików.
* tail: (textutils)Wywołanie tail.         Wypisywanie końcówki plików.
* tsort: (textutils)Wywołanie tsort.       Sortowanie topologiczne.
* tr: (textutils)Wywołanie tr.             Zamiana, ściskanie, usuwanie znaków.
* unexpand: (textutils)Wywołanie unexpand. Zamiana spacji na tabulacje.
* uniq: (textutils)Wywołanie uniq.         Pozostawianie unikalnych linii w pliku.
* wc: (textutils)Wywołanie wc.             Zliczanie bajtów, słów i linii.
END-INFO-DIR-ENTRY
@end format
@end ifinfo

@ifinfo
Niniejszy podręcznik opisuje zestaw narzędzi GNU do przetwarzania tekstów.

Copyright (C) 1994, 95, 96 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end ifinfo

@titlepage
@title Narzędzia tekstowe GNU
@subtitle Zestaw narzędzi tekstowych
@subtitle w wersji @value{VERSION}, @value{UPDATED}
@author David MacKenzie et al.

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1994, 95, 96 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end titlepage


@c If your makeinfo doesn't grok this @ifnottex directive, then either
@c get a newer version of makeinfo or do s/ifnottex/ifinfo/ here and on
@c the matching @end directive below.
@ifnottex
@node Top
@top Narzędzia tekstowe GNU

@cindex narzędzia tekstowe
@cindex narzędzia do przetwarzania tekstów

Niniejszy podręcznik opisuje zestaw narzędzi tekstowych GNU
w wersji @value{VERSION}.

@menu
* Wstęp::                              Przestrogi, przegląd i autorzy.
* Wspólne opcje::                      Wspólne opcje.
* Wypisywanie całości plików::         cat tac nl od
* Formatowanie zawartości plików::     fmt pr fold
* Wypisywanie części plików::          head tail split csplit
* Podsumowywanie plików::              wc sum cksum md5sum
* Działania na posortowanych plikach:: sort uniq comm ptx tsort
* Działania na polach wewnątrz linii:: cut paste join
* Działania na znakach::               tr expand unexpand
* Skrzynka z programami::              Filozofia narzędzi programowych.
* Skorowidz::                          Skorowidz ogólny.

@detailmenu
 --- Szczegółowe zestawienie węzłów ---

Wypisywanie całości plików

* Wywołanie cat::         łączenie i wypisywanie plików
* Wywołanie tac::         łączenie i wypisywanie odwróconych plików
* Wywołanie nl::          numerowanie linii i wypisywanie plików
* Wywołanie od::          wypisywanie plików w formacie ósemkowym i innych

Formatowanie zawartości plików

* Wywołanie fmt::         reformatowanie akapitów tekstu
* Wywołanie pr::          stronicowanie i kolumnowanie plików do wydruku
* Wywołanie fold::        zawijanie linii wejściowych do zadanej szerokości 

Wypisywanie części plików

* Wywołanie head::        wypisywanie początku plików
* Wywołanie tail::        wypisywanie końcówki plików
* Wywołanie split::       podział pliku na części stałej wielkości
* Wywołanie csplit::      podział pliku na części zależne od kontekstu

Podsumowywanie plików

* Wywołanie wc::          wypisywanie liczby bajtów, słów i linii
* Wywołanie sum::         wypisywanie sumy kontrolnej i liczby bloków
* Wywołanie cksum::       wypisywanie sumy CRC liczby bloków
* Wywołanie md5sum::      wypisywanie lub sprawdzanie skrótu danych

Sortowanie i działania na plikach posortowanych

* Wywołanie sort::        sortowanie plików tekstowych
* Wywołanie uniq::        pozostawianie unikalnych linii w pliku
* Wywołanie comm::        porównywanie dwu posortowanych plików liniami
* Wywołanie ptx::         tworzenie indeksu permutacyjnego pliku
* Wywołanie tsort::       sortowanie topologiczne

@code{ptx}: tworzenie indeksu permutacyjnego zawartości pliku

* Ogólne opcje ptx::           Opcje wpływające na ogólne działanie.
* Wybór zestawu znaków ptx::   Kwestie stosowanego zestawu znaków.
* Przetwarzanie wejścia ptx::  Wybór pól, kontekstów, słów kluczowych.
* Formatowanie wyników ptx::   Typy formatów wyjściowych, rozmiary pól.
* Zgodność w ptx::             Rozszerzenia GNU w @code{ptx}

Działania na polach wewnątrz linii

* Wywołanie cut::         wypisywanie wybranych części linii
* Wywołanie paste::       zlepianie linii plików
* Wywołanie join::        łączenie linii według wspólnego pola

Działania na znakach

* Wywołanie tr::          zamiana, ściskanie, usuwanie znaków
* Wywołanie expand::      zamiana tabulacji na spacje
* Wywołanie unexpand::    zamiana spacji na tabulacje

@code{tr}: zamiana, ściskanie, usuwanie znaków

* Zestawy znaków::             Określanie zestawów znaków.
* Konwersja::                  Wymiana jednych znaków na inne.
* Ściskanie::                  Ściskanie powtórzeń i usuwanie.
* Ostrzeżenia w tr::           Komunikaty ostrzegawcze w tr.

Skrzynka z programami

* Wprowadzenie do narzędzi::   Wprowadzenie do narzędzi
* Przekierowanie I/O::         Przekierowanie wejścia/wyjścia
* Polecenie who::              Polecenie @code{who}
* Polecenie cut::              Polecenie @code{cut}
* Polecenie sort::             Polecenie @code{sort}
* Polecenie uniq::             Polecenie @code{uniq}
* Łączenie narzędzi::          Łączenie narzędzi

@end detailmenu
@end menu

@end ifnottex


@node Wstęp
@chapter Wstęp

@cindex Wstęp

Ten podręcznik nie jest wyczerpujący: nie usiłowano wyjaśnić podstawowych
pojęć w sposób odpowiedni dla nowicjuszy.  Zatem, jeśli jesteś zainteresowany,
włącz się, proszę, w udoskonalanie go.  Skorzysta na tym cała wspólnota GNU.

@cindex POSIX.2
Narzędzia tekstowe GNU są w większości zgodne ze standardem @sc{posix.2}.

@c This paragraph appears in all of fileutils.texi, textutils.texi, and
@c sh-utils.texi too -- so be sure to keep them consistent.
@cindex błędy, zgłaszanie
Błędy proszę zgłaszać, w jęz.angielskim, do @email{bug-textutils@@gnu.org}.
Pamiętaj, by zamieścić numer wersji, architekturę maszyny, pliki wejściowe
i inne informacje potrzebne do powielenia błędu: wprowadzane znaki, czego
się spodziewałeś, co otrzymałeś i dlaczego jest to źle.  Pliki diff są mile
widziane, ale proszę dołączyć również opis problemu, gdyż czasem ciężko
jest wyciągnąć wnioski.  @xref{Bugs, , , gcc, GNU CC}.

Podręcznik ten powstał pierwotnie na bazie uniksowych stron man napisanych
przez Davida MacKenzie i aktualizowanych przez Jima Meyeringa.  Autorytatywną
dokumentacją jest obecnie dokumentacja w formacie info; strony man nie są
już rozwijane i aktualizowane.
Pierwotną strona dokumentacji man do @code{fmt} napisał Ross Paterson.
Fran@,{c}ois Pinard wykonał wstępną konwersję do formatu Texinfo.  Karl
Berry wykonał indeksy, trochę reorganizacji i edycji wyników.
Richard Stallman wniósł swój zwykły nieoceniony wgląd w całość procesu.

@unnumberedsec Od tłumacza
Niniejszy przekład powstał
w ramach @uref{http://ptm.linux.pl/, Projektu Tłumaczenia Manuali}
z wykorzystaniem istniejących tłumaczeń stron podręcznika systemowego man,
które wykonali:

@itemize @w
@item Gwidon S. Naskrent (@email{naskrent@@hoth.amu.edu.pl})
@item Wojtek Kotwica (@email{wkotwica@@post.pl})
@end itemize

Zgłoszenia błędów, komentarze i sugestie
proszę przesyłać na listę dyskusyjną Projektu: @email{ptm@@amg.net.pl}
lub ewentualnie do redaktora całości.
Fragmenty nie występujące w oryginale, zaczerpnięte z wcześniejszych stron man
lub powstałe na podstawie kodu źródłowego, umieszczono w nawiasach kwadratowych.

W.Kotwica (@email{wkotwica@@post.pl})

@unnumberedsubsec Rozpowszechnianie
To jest nieoficjalne tłumaczenie warunków rozpowszechniania na język polski.
Nie zostało ono opublikowane przez Free Software Foundation
i pod względem prawnym nie stanowi warunków rozpowszechniania -- ustanawia
je wyłącznie oryginalny tekst angielski.  Jednak tłumacz ma nadzieję, że
pomoże ono lepiej zrozumieć warunki rozpowszechniania osobom mówiącym
po polsku.

This is an unofficial translation of the distribution terms into
Polish language. It was not published by the Free Software Foundation, and
does not legally state the distribution terms--only the original English text
does that. However, the translator hopes that it will help Polish language
speakers understand distribution terms better.

Zezwala się na tworzenie i rozpowszechnianie wiernych kopii
tego podręcznika, pod warunkiem, że na wszystkich kopiach zostanie zachowana
informacja o prawach autorskich i niniejsze zezwolenie.

Zezwala się na kopiowanie i rozpowszechnianie zmienionych wersji
tego podręcznika na warunkach jak dla wiernych kopii, pod warunkiem, że
cała praca pochodna będzie rozpowszechniana na warunkach zezwolenia
identycznego jak niniejsze.

Zezwala się na kopiowanie i rozpowszechnianie tłumaczeń tego
podręcznika na inny język, pod wyżej podanymi warunkami dla zmienionych
wersji, z wyjątkiem tego, że niniejsze zezwolenie może być ustanowione
w tłumaczeniu zaakceptowanym przez Fundację.


@node Wspólne opcje
@chapter Wspólne opcje

@cindex wspólne opcje

Pewne opcje dostępne są we wszystkich tych programach (w rzeczywistości
powinien je akceptować każdy program GNU).  Zamiast tworzenia identycznych
opisów dla każdego z programów, omówiono je tutaj.

Kilka z programów jako argumenty pobiera dowolne łańcuchy znakowe.
W tych przypadkach @samp{--help} i @samp{--version} są uznawane za opcje
wyłącznie wtedy, gdy są jedynym argumentem w wierszu poleceń.

@table @samp
@item --help
@opindex --help
@cindex help, online
@cindex pomoc, online
Wypisuje komunikat o sposobie używania podający wszystkie dostępne opcje,
a następnie pomyślnie kończy działanie.

@item --version
@opindex --version
@cindex numer wersji, znajdowanie
@cindex wersja, znajdowanie numeru
Wypisuje numer wersji, a następnie pomyślnie kończy działanie.
@end table


@node Wypisywanie całości plików
@chapter Wypisywanie całości plików

@cindex wypisywanie całości plików
@cindex całość plików, wypisywanie

Te polecenia czytają i zapisują całe pliki, czasem przekształcając je
w jakiś sposób.

@menu
* Wywołanie cat::         łączenie i wypisywanie plików
* Wywołanie tac::         łączenie i wypisywanie odwróconych plików
* Wywołanie nl::          numerowanie linii i wypisywanie plików
* Wywołanie od::          wypisywanie plików w formacie ósemkowym i innych
@end menu

@node Wywołanie cat
@section @code{cat}: łączenie i wypisywanie plików

@pindex cat
@cindex konkatenacja i zapisanie plików
@cindex łączenie i zapisanie plików
@cindex kopiowanie plików

@code{cat} kopiuje na standardowe wyjście zawartość każdego z podanych
@var{plików} (@samp{-} oznacza standardowe wejście), lub standardowego
wejścia, jeśli nie podano żadnego pliku.  Składnia:

@example
cat [@var{opcja}] [@var{plik}]@dots{}
@end example

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -A
@itemx --show-all
@opindex -A
@opindex --show-all
Równoważna @samp{-vET}.

@item -B
@itemx --binary
@opindex -B
@opindex --binary
@cindex binarne i tekstowe wejście/wyjście, w cat
@cindex wejście/wyjście binarne i tekstowe, w cat
Tylko w systemach MS-DOS i MS-Windows -- czyta i zapisuje pliki w trybie
binarnym. Domyślnie @code{cat} w tych systemach posługuje się trybem binarnym
tylko przy przekierowaniu standardowego wyjścia do pliku lub potoku;
ta opcja przesłania takie ustawienie. Używane jest binarne wejście/wyjście
plików, zatem pliki zachowują swój format (tekstowy Uniksowy
w przeciwieństwie do DOS-owego tekstowego i binarnego), gdyż @code{cat}
często wykorzystywany jest jako program do kopiowania plików. Pewne opcje
(zobacz niżej) powodują, że @code{cat} czyta i zapisuje pliki w trybie
tekstowym, gdyż nie jest istotna pierwotna zawartość pliku (np. gdy
@code{cat} numeruje linie lub ma zaznaczyć ich końce). Dlatego opcje te
działają zgodnie z oczekiwaniem użytkowników DOS/Windows; na przykład,
tekstowe pliki DOS-owe mają linie zakończone parą znaków CR-LF, co nie
będzie przetwarzane przez @samp{-b} jako pusta linia, chyba że plik jest
czytany w trybie tekstowym.

@item -b
@itemx --number-nonblank
@opindex -b
@opindex --number-nonblank
Numeruje wszystkie niepuste linie wyjścia, poczynając od 1.
W MS-DOS i MS-Windows opcja ta powoduje, że @code{cat} czyta i zapisuje pliki
w trybie tekstowym.

@item -e
@opindex -e
Równoważna @samp{-vE}.

@item -E
@itemx --show-ends
@opindex -E
@opindex --show-ends
Wyświetla @samp{$} po końcu każdej linii.
W MS-DOS i MS-Windows opcja ta powoduje, że @code{cat} czyta i zapisuje pliki
w trybie tekstowym.

@item -n
@itemx --number
@opindex -n
@opindex --number
Numeruje wszystkie linie wyjścia, poczynając od 1.
W MS-DOS i MS-Windows opcja ta powoduje, że @code{cat} czyta i zapisuje pliki
w trybie tekstowym.

@item -s
@itemx --squeeze-blank
@opindex -s
@opindex --squeeze-blank
@cindex ściskanie pustych linii
Zastępuje powielone sąsiadujące linie puste pojedynczą linią pustą.
W MS-DOS i MS-Windows opcja ta powoduje, że @code{cat} czyta i zapisuje pliki
w trybie tekstowym.

@item -t
@opindex -t
Równoważna @samp{-vT}.

@item -T
@itemx --show-tabs
@opindex -T
@opindex --show-tabs
Wyświetla znaki tabulacji (TAB) jako @samp{^I}.

@item -u
@opindex -u
Ignorowana; dla zgodności z Uniksem.

@item -v
@itemx --show-nonprinting
@opindex -v
@opindex --show-nonprinting
Wyświetla znaki kontrolne, z wyjątkiem nowej strony (LFD) i tabulacji (TAB),
używając notacji z @samp{^} i poprzedzając znaki z ustawionym ósmym bitem
przez @samp{M-}.  W MS-DOS i MS-Windows opcja ta powoduje, że @code{cat}
czyta pliki i standardowe wejście w DOS-owym trybie binarnym, zatem widoczne
są także znaki CR na końcu każdej z linii.

@end table


@node Wywołanie tac
@section @code{tac}: łączenie i wypisywanie odwróconych plików

@pindex tac
@cindex odwracanie plików

@code{tac} kopiuje na standardowe wyjście każdy podany @var{plik} (@samp{-}
oznacza standardowe wejście), lub standardowego wejścia, jeśli nie podano
żadnego pliku, odwracając w każdym z nich porządek rekordów (domyślnie -
linii).  Składnia:

@example
tac [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

@dfn{Rekordy} oddzielone są wystąpieniami pewnego łańcucha, lub znakiem nowej
linii jeśli nie podano żadnego.  Domyślnie w pliku łańcuch separujący
występuje za rekordem, który rozgranicza.

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -b
@itemx --before
@opindex -b
@opindex --before
Separator występuje przed rekordem (jest dołączony do początku rekordu).

@item -r
@itemx --regex
@opindex -r
@opindex --regex
Separator jest wyrażeniem regularnym. Użytkownicy @code{tac} w systemach
MS-DOS/MS-Windows powinni zwrócić uwagę na fakt, że z powodu czytania przez
@code{tac} plików w trybie binarnym, każda linia pliku tekstowego może kończyć się
parą CR/LF zamiast uniksowego LF.

@item -s @var{łańcuch}
@itemx --separator=@var{łańcuch}
@opindex -s
@opindex --separator
Używa @var{łańcucha}, zamiast znaku nowej linii, jako separatora rekordów.

@end table


@node Wywołanie nl
@section @code{nl}: numerowanie linii i wypisywanie plików

@pindex nl
@cindex numerowanie linii
@cindex linie, numerowanie

@code{nl} kopiuje na standardowe wyjście każdy podany @var{plik} (@samp{-}
oznacza standardowe wejście), lub standardowego wejścia, jeśli nie podano
żadnego pliku, dodając do wszystkich lub niektórych linii ich numery.
Składnia:

@example
nl [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

@cindex logiczne strony, numerowanie
@cindex strony logiczne, numerowanie
@cindex numerowanie stron logicznych
@code{nl} dzieli swoje wejście na strony logiczne; domyślnie,
numer linii jest zmieniany na 1 na początku każdej strony logicznej.
@code{nl} traktuje wszystkie pliki wejściowe jako pojedynczy dokument;
nie zmienia on numerów linii ani stron logicznych między plikami.

@cindex nagłówki, numerowanie
@cindex treść, numerowanie
@cindex stopki, numerowanie
@cindex numerowanie nagłówków
@cindex numerowanie treści
@cindex numerowanie stopek
Strona logiczna składa się trzech sekcji: nagłówka, treści i stopki.
Każda z tych części może być pusta.  Każdą można ponumerować w stylu
innym od pozostałych.

Początki sekcji stron logicznych są zaznaczone w pliku wejściowym
przez linię zawierającą niczego poza jednym z łańcuchów ograniczających
pokazanych poniżej:

@table @samp
@item \:\:\:
początek nagłówka;
@item \:\:
początek treści;
@item \:
początek stopki.
@end table

Znaki @samp{\} i @samp{:}, z których składają się te łańcuchy można zmienić
opcjami (patrz niżej), ale wzoru i długości każdego z nich zmienić nie można.

Łańcuchy ograniczające sekcję są zastępowane w wyjściu pustą linią.
Wszelki tekst występujący przed pierwszym łańcuchem ograniczającym
sekcję w pliku wejściowym jest uważany za część sekcji treści, tak więc
plik, który nie zawiera żadnych łańcuchów ograniczających sekcje jest
uważany za składający się z pojedynczej sekcji treści.

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -b @var{styl}
@itemx --body-numbering=@var{styl}
@opindex -b
@opindex --body-numbering
Wybiera styl numerowania linii w sekcji treści każdej strony logicznej.
Kiedy linia nie jest numerowana, bieżący jej numer nie jest zwiększany,
ale znak oddzielający numery jest nadal przed nią wstawiany.  Style to:

@table @samp
@item a
numeruje wszystkie linie,
@item t
numeruje tylko linie niepuste (domyślnie w treści),
@item n
nie numeruje żadnych linii (domyślnie w nagłówku i stopce),
@item p@var{regexp}
numeruje tylko linie zawierające coś pasującego do @var{regexp}.
@end table

@item -d @var{cd}
@itemx --section-delimiter=@var{cd}
@opindex -d
@opindex --section-delimiter
@cindex ograniczniki sekcji stron
@cindex sekcje stron, ograniczniki
Ustawia dwa znaki ogranicznika, które oznaczają początki sekcji strony
logicznej -- domyślnie @samp{\:}.  Jeśli podano tylko jeden (@var{c}),
drugim pozostaje @samp{:}.
(Należy pamiętać o ochronie @samp{\} oraz innych znaków specjalnych
przed interpretacją przez powłokę.  Korzysta się wówczas z cytowania lub
dodatkowych odwrotnych ukośników.  Aby wprowadzić @samp{\}, należy użyć
@samp{\\}).

@item -f @var{styl}
@itemx --footer-numbering=@var{styl}
@opindex -f
@opindex --footer-numbering
Analogicznie jak @samp{--body-numbering}.

@item -h @var{styl}
@itemx --header-numbering=@var{styl}
@opindex -h
@opindex --header-numbering
Analogicznie jak @samp{--body-numbering}.

@item -i @var{liczba}
@itemx --page-increment=@var{liczba}
@opindex -i
@opindex --page-increment
Zwiększa numery linii o @var{liczba} (domyślnie 1).

@item -l @var{liczba}
@itemx --join-blank-lines=@var{liczba}
@opindex -l
@opindex --join-blank-lines
@cindex puste linie, numerowanie
@cindex numerowanie pustych linii
Przy numerowaniu uważa @var{liczba} (domyślnie 1) kolejnych linii pustych
za jedną linię logiczną, i numeruje tylko ostatnią z nich. Tam gdzie
występuje mniej niż @var{liczba} kolejnych linii pustych, nie numeruje ich.
Pusta linia to taka, która nie zawiera żadnych znaków, nawet spacji czy
tabulacji.

@item -n @var{format}
@itemx --number-format=@var{format}
@opindex -n
@opindex --number-format
Wybiera format numerowania linii (domyślnym jest @code{rn}):

@table @samp
@item ln
@opindex ln @r{format for @code{nl}}
wyrównane do lewej, bez początkowych zer;
@item rn
@opindex rn @r{format for @code{nl}}
wyrównane do prawej, bez początkowych zer (domyślnie);
@item rz
@opindex rz @r{format for @code{nl}}
wyrównane do prawej, początkowe zera.
@end table

@item -p
@itemx --no-renumber
@opindex -p
@opindex --no-renumber
Nie zaczyna numerów linii od nowa na początku strony logicznej.

@item -s @var{łańcuch}
@itemx --number-separator=@var{łańcuch}
@opindex -s
@opindex --number-separator
Oddziela w wyjściu numer linii od tekstu linii używając
@var{łańcucha} (domyślnie znak tabulacji).

@item -v @var{numer}
@itemx --starting-line-number=@var{numer}
@opindex -v
@opindex --starting-line-number
Ustawia początkowy numer linii na każdej stronie logicznej na @var{numer}
(domyślnie 1).

@item -w @var{liczba}
@itemx --number-width=@var{liczba}
@opindex -w
@opindex --number-width
Używa @var{liczba} znaków dla numerów linii (domyślnie 6).

@end table


@node Wywołanie od
@section @code{od}: wypisywanie plików w formacie ósemkowym i innych

@pindex od
@cindex ósemkowy zrzut zawartości pliku
@cindex szesnastkowy zrzut zawartości pliku
@cindex ASCII zrzut zawartości pliku
@cindex plik, jednoznaczny zrzut zawartości
@cindex plik, jednoznaczne pokazywanie zawartości

@code{od} wypisuje jednoznaczną reprezentację każdego podanego @var{pliku}
(@samp{-} oznacza standardowe wejście), lub standardowego wejścia, jeśli
nie podano żadnego pliku.  Składnia:

@example
od [@var{opcja}]@dots{} [@var{plik}]@dots{}
od -C [@var{plik}] [[+]@var{offset} [[+]@var{etykieta}]]
@end example

Każda linia wynikowa składa się z pozycji (offsetu) w pliku wejściowym oraz
grup danych z pliku.  Domyślnie, @code{od} wypisuje offsety pliku ósemkowo,
zaś każda grupa danych jest dwoma bajtami wejścia wypisanymi jako jedna
liczba ósemkowa.

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -A @var{podstawa}
@itemx --address-radix=@var{podstawa}
@opindex -A
@opindex --address-radix
@cindex podstawa systemu liczbowego dla offsetów pliku
@cindex plik, podstawa systemu do wypisywania offsetu
Wybiera system liczbowy, w którym wypisywane będą offsety w pliku.
@var{podstawa} może być jedną z poniższych:

@table @samp
@item d
dziesiętna;
@item o
ósemkowa;
@item x
szesnastkowa;
@item n
żadna (nie wypisuje offsetów).
@end table

Wartość domyślna to podstawa ósemkowa.

@item -j @var{bajty}
@itemx --skip-bytes=@var{bajty}
@opindex -j
@opindex --skip-bytes
Pomija @var{bajty} bajtów wejścia zanim rozpocznie formatowanie i pisanie.
Jeśli @var{bajty} zaczyna się od @samp{0x} lub @samp{0X}, interpretowane jest
szesnastkowo; w przeciwnym razie, jeśli zaczyna się od @samp{0}, ósemkowo;
w przeciwnym razie, dziesiętnie.  Dopisanie po liczbie litery @samp{b} mnoży
podaną liczbę przez 512, @samp{k} przez 1024, a @samp{m} przez 1048576.

@item -N @var{bajty}
@itemx --read-bytes=@var{bajty}
@opindex -N
@opindex --read-bytes
Wypisuje co najwyżej @var{bajty} bajtów każdego pliku wejściowego.
Wszystkie przedrostki i przyrostki do @var{bajty} interpretowane są jak przy
opcji @samp{-j}.

@item -s [@var{n}]
@itemx --strings[=@var{n}]
@opindex -s
@opindex --strings
@cindex stałe łańcuchowe, wypisywanie
@cindex łańcuchy stałe, wypisywanie
Zamiast normalnego wyniku, wypisuje tylko @dfn{stałe łańcuchowe} z wejścia.
Powinny być one ciągiem co najmniej @var{n} (domyślnie 3) kolejnych znaków
graficznych @sc{ascii}, zakończonych bajtem null (zerowym).

@item -t @var{typ}
@itemx --format=@var{typ}
@opindex -t
@opindex --format
Wybiera format, w jakim będzie następować wypisywanie danych z pliku.
@var{typ} to łańcuch złożony z co najmniej jednego z poniższych znaków
wskazujących typ.
Jeśli w pojedynczym łańcuchu @var{typu} poda się więcej niż jeden znak
lub użyje się tej opcji więcej niż raz, to @code{od} zapisze po jednej
kopii każdej linii wyjściowej używając każdego z podanych typów danych,
w podanej kolejności.

Dodanie kończącego @samp{z} do dowolnego określnika typu powoduje dołączenie
znakowej reprezentacji @sc{ascii} znaków drukowalnych do linii wynikowej
tworzonej przez ten typ.

@table @samp
@item a
znaki nazwane,
@item c
znaki @sc{ascii} lub sekwencje specjalne (z odwrotnym ukośnikiem),
@item d
liczba dziesiętna ze znakiem,
@item f
liczba zmiennoprzecinkowa,
@item o
ósemkowo,
@item u
liczba dziesiętna bez znaku,
@item x
szesnastkowo.
@end table

Typ @code{a} daje w wyniku np. @samp{sp} dla spacji, @samp{nl} dla znaku
nowej linii, a @samp{nul} dla bajtu zerowego (null).  Typ @code{c} daje
odpowiednio @samp{ }, @samp{\n} i @samp{\0}.

@cindex rozmiar typu wypisywanych offsetów
Za wyjątkiem typów @samp{a} i @samp{c}, można określić ilość bajtów, które
będą użyte przy interpretacji każdej liczby w podanym typie danych, dopisując
po znaku określnika typu dziesiętną liczbę całkowitą.  Zamiast tego,
można też podać rozmiar jednego z wbudowanych typów danych kompilatora
C dopisując po znaku określnika typu jeden z następujących znaków.
Dla liczb całkowitych (@samp{d}, @samp{o}, @samp{u}, @samp{x}):

@table @samp
@item C
char,
@item S
short,
@item I
int,
@item L
long.
@end table

Dla liczb zmiennoprzecinkowych (@code{f}):

@table @asis
@item F
float,
@item D
double,
@item L
long double.
@end table

@item -v
@itemx --output-duplicates
@opindex -v
@opindex --output-duplicates
Wypisuje kolejne linie, które są identyczne.  Domyślnie, gdy dwie lub więcej
kolejnych linii jest takich samych, @code{od} wypisuje tylko pierwszą z nich,
a w linii następnej stawia gwiazdkę, zaznaczając, że identyczne linie zostały
opuszczone.

@item -w[@var{n}]
@itemx --width[=@var{n}]
@opindex -w
@opindex --width
Liczba bajtów wejścia do sformatowania w jednej linii wynikowej.
Musi być to wielokrotność najmniejszej wspólnej wielokrotności rozmiarów
skojarzonych z podanymi typami wyjścia.  Jeśli @var{n} pominięto, wartością
domyślną jest 32.  Jeśli w ogóle nie podano tej opcji, wartością domyślną
jest 16.

@end table

Następne kilka opcji odwzorowuje stare, przed-@sc{posix}-owe opcje
określające format na odpowiednie @sc{posix}-owe specyfikacje formatu.
GNU @code{od} akceptuje każdą kombinację opcji w starym i nowym stylu.
Opcje określające format sumują się.

@table @samp

@item -a
@opindex -a
Wypisuje jako znaki nazwane.  Równoważne @samp{-ta}.

@item -b
@opindex -b
Wypisuje jako bajty ósemkowe.  Równoważne @samp{-toC}.

@item -c
@opindex -c
Wypisuje jako znaki @sc{ascii} albo sekwencje specjalne z odwrotnym
ukośnikiem.  Równoważne @samp{-tc}.

@item -d
@opindex -d
Wypisuje jako liczby całkowite typu short bez znaku.  Równoważne @samp{-tu2}.

@item -f
@opindex -f
Wypisuje jako liczby dziesiętne zmiennoprzecinkowe.  Równoważne @samp{-tfF}.

@item -h
@opindex -h
Wypisuje jako liczby szesnastkowe typu short.  Równoważne @samp{-tx2}.

@item -i
@opindex -i
Wypisuje jako liczby całkowite typu short.  Równoważne @samp{-td2}.

@item -l
@opindex -l
Wypisuje jako liczby całkowite typu long.  Równoważne @samp{-td4}.

@item -o
@opindex -o
Wypisuje jako liczby ósemkowe typu short.  Równoważne @samp{-to2}.

@item -x
@opindex -x
Wypisuje jako liczby szesnastkowe typu short.  Równoważne @samp{-tx2}.

@item -C
@itemx --traditional
@opindex --traditional
Rozpoznaje przed-@sc{posix}-owe argumenty nie będące opcjami, akceptowane
przez tradycyjne wersje @code{od}.  Poniższej składni:

@example
od --traditional [@var{plik}] [[+]@var{offset}[.][b] [[+]@var{etykieta}[.][b]]]
@end example

@noindent
można użyć do określenia co najwyżej jednego pliku i opcjonalnych
argumentów określających offset i adres pseudo-startowy @var{etykieta}.
Domyślnie @var{offset} interpretowany jest jako liczba ósemkowa określająca
ile bajtów wejścia należy przeskoczyć przed formatowaniem i wypisywaniem.
Opcjonalna końcowa kropka dziesiętna wymusza interpretację @var{offset}
jako liczby dziesiętnej.  Jeśli nie podano kropki, a offset zaczyna się
od @samp{0x} lub @samp{0X}, interpretowany jest on jako liczba szesnastkowa.
Jeśli jest tam końcowe @samp{b}, liczba pomijanych bajtów będzie równa
@var{offset} pomnożony przez 512.  Argument @var{etykieta} interpretowany
jest tak samo jak @var{offset}, ale określa on początkowy pseudo-adres.
Pseudo-adresy wypisywane są w nawiasach po każdym normalnym adresie.

@end table


@node Formatowanie zawartości plików
@chapter Formatowanie zawartości plików

@cindex formatowanie zawartości pliku

Te polecenia zmieniają formatowanie zawartości plików.

@menu
* Wywołanie fmt::         reformatowanie akapitów tekstu
* Wywołanie pr::          stronicowanie i kolumnowanie plików do wydruku
* Wywołanie fold::        zawijanie linii wejściowych do zadanej szerokości 
@end menu


@node Wywołanie fmt
@section @code{fmt}: reformatowanie akapitów tekstu

@pindex fmt
@cindex formatowanie tekstu akapitu
@cindex akapity, zmiana formatowania
@cindex tekst, zmiana formatowania

@code{fmt} wypełnia i łączy linie dając linie wynikowe o (co najwyżej)
zadanej liczbie znaków (domyślnie 75).  Składnia:

@example
fmt [@var{opcje}]@dots{} [@var{plik}]@dots{}
@end example

@code{fmt} czyta z @var{plików} podanych jako argumenty (lub standardowego
wejścia jeśli nie podano żadnego) i zapisuje na standardowe wyjście.

Domyślnie, w utworzonym wyjściu zachowywane są puste linie, odstępy między
wyrazami i wcięcia.  Linie z różnymi wcięciami nie są łączone.  Znaki
tabulacji są rozszerzane na wejściu i wprowadzane ponownie na wyjściu.

@cindex linie, łamanie
@cindex łamanie linii
@cindex zdania a łamanie linii
@cindex Knuth, Donald E.
@cindex Plass, Michael F.
@code{fmt} preferuje łamanie linii na końcu zdania, i próbuje uniknąć
łamania linii po pierwszym słowie zdania, albo przed ostatnim słowem zdania.
@dfn{Koniec zdania} zdefiniowany jest jako albo koniec akapitu albo słowo
zakończone jednym ze znaków @samp{.?!}, po którym występują dwie spacje
lub koniec linii, bez względu na jakiekolwiek wtrącone nawiasy czy
cudzysłowy. Podobnie jak @TeX{}, @code{fmt} czyta całe ,,akapity'' przed
wyborem łamania linii.  Użyty algorytm jest wariantem opisanego
w ,,Breaking Paragraphs into Lines'', (Donald E. Knuth and Michael F. Plass,
@cite{Software---Practice and Experience}, 11 (1981), 1119--1184).

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -c
@itemx --crown-margin
@opindex -c
@opindex --crown-margin
@cindex crown margin
@cindex marginesy zwieńczone
Tryb @dfn{zwieńczonych marginesów} (@dfn{crown margin}).
Zachowuje wcięcia pierwszych dwóch linii akapitu oraz wyrównuje lewy margines
każdej następnej linii do marginesu drugiej linii.

@item -t
@itemx --tagged-paragraph
@opindex -t
@opindex --tagged-paragraph
@cindex akapity wcięte
@cindex wcięte akapity
@cindex wyróżnione akapity
Tryb @dfn{wyróżnionych akapitów} (wciętych akapitów):
tak jak tryb zwieńczony, z wyjątkiem tego, że wcięcie pierwszej linii akapitu
musi się różnić od wcięcia drugiej linii.  W przeciwnym razie linia
pierwsza jest traktowana jako akapit jednolinijkowy.

@item -s
@itemx --split-only
@opindex -s
@opindex --split-only
Tylko dzieli linie.  Nie łączy krótkich linii, by utworzyć dłuższe.
Ta opcja chroni przed niesłusznym łączeniem przykładowych linii kodu
lub innego w podobny sposób ,,sformatowanego'' tekstu.

@item -u
@itemx --uniform-spacing
@opindex -u
@opindex --uniform-spacing
Jednorodne odstępy.
Redukuje odstępy między wyrazami do jednej spacji, zaś między
zdaniami do dwu spacji.

@item -@var{szerokość}
@itemx -w @var{szerokość}
@itemx --width=@var{szerokość}
@opindex -@var{szerokość}
@opindex -w
@opindex --width
Wypełnia linie wynikowe aż do @var{szerokość} znaków (domyślnie 75).
@code{fmt} początkowo próbuje tworzyć linie o około 7% krótsze, aby zapewnić
sobie miejsce na wyrównanie różnych długości linii.

@item -p @var{przedrostek}
@itemx --prefix=@var{przedrostek}
Tylko linie zaczynające się od @var{przedrostka} (może być poprzedzony białymi
znakami) podlegają przetworzeniu.  Przedrostek ze wszystkimi poprzedzającymi
go białymi znakami jest odcinany na czas formatowania i dostawiany ponownie
do każdej sformatowanej linii wyjściowej.
Jednym z zastosowań jest formatowanie pewnych rodzajów komentarzy
w programie, bez zmiany kodu.

@end table


@node Wywołanie pr
@section @code{pr}: stronicowanie i kolumnowanie plików do wydruku

@pindex pr
@cindex wydruk, przygotowanie plików
@cindex wyjście wielokolumnowe, tworzenie
@cindex wielokolumnowe wyjście, tworzenie
@cindex scalanie plików równolegle

@code{pr} wypisuje na standardowe wyjście zawartość @var{plików}
podanych w linii poleceń (@samp{-} oznacza standardowe wejście), lub
standardowego wejścia, jeśli nie podano żadnego pliku, dzieląc wynik
na strony i opcjonalnie w formacie wielokolumnowym.
Pliki mogą być scalane, wypisywane wszystkie równocześnie, po jednym
w kolumnie.  Składnia:

@example
pr [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

Domyślnie, na każdej stronie wypisywany jest 5-linijkowy nagłówek: dwie puste
linie, linia z datą, nazwą pliku i numerem strony i dwie kolejne puste linie.
Tworzona jest też złożona z 5 linii stopka. Przy opcji @samp{-F} tworzony
jest nagłówek 3-linijkowy: początkowe dwie puste linie są pomijane, nie jest
używana stopka.  Domyślna @var{długość strony} w obu przypadkach
wynosi 66 linii.  Linia tekstu z nagłówkiem zajmuje całą szerokość strony
i ma postać @samp{yyyy-mm-dd HH:MM łańcuch Page nnnn}. Łańcuch nagłówka jest
centrowany.

Znaki wysuwu strony (FF) w wejściu powodują łamanie strony w wyniku.
Powtórzone znaki zmiany strony dają puste strony.

Kolumny tekstu mają jednakową szerokość, rozdzielone są opcjonalnym łańcuchem
(domyślnie @samp{spacją}). Przy tworzeniu wyjścia wielokolumnowego, linie
będą zawsze obcinane do zadanej szerokości strony (@var{page_width}),
domyślnie 72, chyba że zostanie użyta opcja @samp{-J}. Przy wyniku
jednokolumnowym domyślnie nie zachodzi obcinanie linii. W tym przypadku
do ucięcia linii należy użyć opcji @samp{-W}.

   Od wersji 1.22i:

Niektóre opcje podawane @var{małymi literami} (@samp{-s}, @samp{-w})
zostały przedefiniowane w celu uzyskania lepszej zgodności z @sc{posix}.
Wyjście uzyskiwane z niektórych dodatkowych opcji zostało przystosowane
do innych @sc{unix}-ów. Należy się pogodzić z naruszeniem zgodności
wstecznej.

Wprowadzono kilka nowych opcji podawanych dużymi literami (@samp{-J},
@samp{-S}, @samp{-W}), służących do wyłączania nieoczekiwanych kolizji
opcji podawanych małymi literami.  Opcja @samp{-N} i drugi argument 
@var{ostatnia} opcji @samp{+@var{pierwsza}} oferują większą elastyczność.
Precyzyjna obsługa ustawień zmiany strony w plikach wejściowych wymaga
opcji @samp{-T}.

Opcje o dużych literach mają przewagę nad opcjami wyrażanymi małymi literami.

Niektóre z argumentów opcji (porównaj @samp{-s}, @samp{-S}, @samp{-e},
@samp{-i}, @samp{-n}) nie mogą być podawane odsunięte od poprzedzającej
je litery opcji (już ustanowiono w specyfikacji @sc{posix}).

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item +@var{pierwsza}[:@var{ostatnia}]
@itemx --pages=@var{pierwsza}[:@var{ostatnia}]
@opindex +@var{pierwsza}[:@var{ostatnia}]
@opindex --pages
Zaczyna wypisywanie od @var{pierwszej} i kończy na @var{ostatniej} stronie.
Pominięcie wskazania @samp{:@var{ostatniej}} strony oznacza do końca pliku.
Przy szacowaniu liczby pomijanych stron każdy znak wysuwu strony w pliku
wejściowym daje nową stronę.  Numeracja stron z opcją @samp{+@var{pierwsza}}
i bez niej jest identyczna.  Domyślnie, numerowanie rozpoczyna się od
pierwszej strony pliku wejściowego (a nie pierwszej strony wynikowej).
Numerowanie linii można zmienić opcją @samp{-N}.

@item -@var{kolumn}
@itemx --columns=@var{kolumn}
@opindex -@var{kolumn}
@opindex --columns
@cindex kolumny tekstu, zmniejszanie
Dla każdego @var{pliku} tworzy zadaną ilość @var{kolumn} wyjścia (domyślnie 1)
i wypełnia je pionowo, chyba że użyto opcji @samp{-a}.  Szerokość kolumny jest
automatycznie zmniejszana wraz ze wzrostem liczby kolumn, chyba że użyto
równocześnie opcji @samp{-W/-w} do zmiany szerokości strony.   Opcja ta może
spowodować obcięcie niektórych linii. Na każdej stronie wyrównywana jest
liczba linii w kolumnach.  Dla wyjścia wielokolumnowego włączone są opcje
@samp{-e} i @samp{-i}.  Przy połączeniu z opcją @samp{-J} wyrównywanie
kolumn i ucinanie linii są wyłączane.  Linie pełnej długości są łączone
w formacie pól swobodnych a opcją @samp{-S} można wyznaczyć separatory pól.
Opcja @samp{-@var{kolumn}} nie może być stosowana z opcją @samp{-m}.

@item -a
@itemx --across
@opindex -a
@opindex --across
@cindex kolumny tekstu, poprzecznie
Dla każdego @var{pliku}, wypisuje kolumny w poprzek, nie w dół. Musi być
podana opcja @samp{-@var{kolumn}} z liczbą @var{kolumn} większą niż jeden.
Jeżeli linia jest zbyt długa, by zmieścić się w kolumnie, to jest obcinana.

@item -c
@itemx --show-control-chars
@opindex -c
@opindex --show-control-chars
Wypusje znaki kontrolne używając notacji z daszkiem (np. @samp{^G}), zaś
inne niedrukowalne znaki w notacji ósemkowej z odwrotnym ukośnikiem.
Domyślnie znaki niedrukowalne nie są zmieniane.

@item -d
@itemx --double-space
@opindex -d
@opindex --double-space
@cindex podwójne odstępy międzyliniowe
@cindex odstępy międzyliniowe, podwójne
Używa podwójnych odstępów [między liniami] w wyniku.

@item -e[@var{znak-tab-wej}[@var{szer-tab-wej}]]
@itemx --expand-tabs[=@var{znak-tab-wej}[@var{szer-tab-wej}]]
@opindex -e
@opindex --expand-tabs
@cindex tabulacje wejściowe
@cindex wejściowe tabulacje
Rozwija tabulacje na spacje w wejściu.  Opcjonalny argument @var{znak-tab-wej}
to wejściowy znak tabulacji, domyślnie TAB.  Drugi opcjonalny argument
@var{szer-tab-wej} to szerokość znaków tabulacji w wejściu, domyślnie 8.

@item -f
@itemx -F
@itemx --form-feed
@opindex -F
@opindex -f
@opindex --form-feed
Używa znaku końca strony, a nie znaków nowej linii, do rozdzielania stron
wynikowych. Domyślna długość strony (66 linii) nie jest zmieniana, ale liczba
linii tekstu na stronie zmienia się z domyślnych 56 na 63.

@item -h @var{nagłówek}
@itemx --header=@var{nagłówek}
@opindex -h
@opindex --header
Zastępuje nazwę pliku w nagłówku wypośrodkowanym łańcuchem @var{nagłówek}.
Może wystąpić ucięcie lewej strony (zaznaczone przez @samp{*}), jeśli cała
linia nagłówka @samp{yyyy-mm-dd HH:MM nagłówek Page nnnn} będzie większa niż
szerokość strony.  @samp{-h ""} daje w wyniku pustą linię nagłówka. Proszę
nie używać @samp{-h""}.  Odstęp pomiędzy @samp{-h} a argumentem jest zawsze
konieczny.

@item -i[@var{znak-tab-wyj}[@var{szer-tab-wyj}]]
@itemx --output-tabs[=@var{znak-tab-wyj}[@var{szer-tab-wyj}]]
@opindex -i
@opindex --output-tabs
@cindex wyjściowe tabulacje
@cindex tabulacje wyjściowe
Zastępuje spacje tabulacjami w wyjściu.  Opcjonalny argument @var{znak-tab-wyj}
to wyjściowy znak tabulacji, domyślnie TAB.  Drugi opcjonalny argument
@var{szer-tab-wyj} to szerokość znaków tabulacji w wyjściu, domyślnie 8.

@item -J
@itemx --join-lines
@opindex -J
@opindex --join-lines
Łączy linie pełnej długości. Używane razem z opcjami dotyczącymi kolumn
@samp{-@var{kolumn}}, @samp{-a -@var{kolumn}} lub @samp{-m}.  Wyłącza
ucinanie linii przez @samp{-W/-w}.  Nie jest wykonywane wyrównywanie kolumn.
Można używać w połączeniu z @samp{-S[@var{łańcuch}]}.  Opcję @samp{-J}
wprowadzono (razem z @samp{-W} i @samp{-S}) w celu rozplątania
starych (zgodnych z @sc{posix}) opcji @samp{-w} i @samp{-s} z powyższymi
trzema opcjami kolumnowymi.


@item -l @var{dług-strony}
@itemx --length=@var{dług-strony}
@opindex -l
@opindex --length
Ustawia długość strony na @var{dług-strony} linii, łącznie z liniami nagłówka
i stopki.  Wartość domyślna to 66.  Jeśli @var{dług-strony} jest mniejsza
lub równa 10 (zaś <=3 z @samp{-F}), pomijane są nagłówki i stopki oraz
usuwane są wszystkie ustawienia zmiany strony z plików wejściowych,
tak jak gdyby została podana opcja @samp{-T}.

@item -m
@itemx --merge
@opindex -m
@opindex --merge
Scala i wypisuje wszystkie @var{pliki} równolegle, jeden w każdej kolumnie.
Jeśli linia nie mieści się w kolumnie, to jest ucinana, chyba że
podano opcję @samp{-J}.  Można wykorzystać @samp{-S[@var{łańcuch}]}.
Puste strony niektórych plików (ustawione zmiany strony) dają w wyniku puste
kolumny, nadal oznakowane @var{łańcuchem}.  W rezultacie otrzymuje się ciągłą
numerację linii i oznakowanie kolumn w całym scalonym pliku.  Całkiem puste
połączone strony nie mają ani separatorów ani numerów linii.  Domyślny
nagłówek zmieniany jest na @samp{yyyy-mm-dd HH:MM <odstępy> Page nnnn}.
Do wypełnienia środkowej, pustej jego części można użyć opcji
@samp{-h @var{nagłówek}}.

@item -n[@var{sep-liczb}[@var{cyfry}]]
@itemx --number-lines[=@var{sep-liczb}[@var{cyfry}]]
@opindex -n
@opindex --number-lines
Powoduje poprzedzanie wyniku numerami linii.
Opcjonalny argument @var{cyfry} to liczba cyfr na numer linii, domyślnie 5.
Przy wyjściu wielokolumnowym numer zajmuje pierwsze @var{cyfr} pozycji
każdej kolumny tekstu.  W wyjściu jednokolumnowym numer poprzedza każdą linię,
tak samo jak przy @samp{-m}.  Domyślnie numeracja linii rozpoczyna się od
pierwszej linii pliku wejściowego (nie od pierwszej linii wynikowej, porównaj
opcje @samp{--page} i @samp{-N}).
Opcjonalny argument @var{sep-liczb} to znak, który należy wypisać po każdym
numerze, dla oddzielenia go od następującego po nim tekstu, domyślnie
tabulacja.  Ściśle mówiąc, znak tabulacji jest zawsze wpisywany tylko
w wyjściu jednokolumnowym.  Szerokość tabulacji zmienia się w zależności
od jej pozycji, np. zależnie od lewego @var{marginesu} określonego
przez opcję @samp{-o}.  Przy wyjściu wielokolumnowym priorytetem jest
@samp{równa szerokość kolumn wynikowych} (specyfikacja @sc{posix}).
Szerokość tabulacji ustalana jest na wartość z pierwszej kolumny i nie
zmienia się z różnymi wartościami lewego marginesu. Znaczy to, że zamiast
@var{sep-liczb}=TAB wypisywana jest zawsze stała liczba spacji.
Tabularyzacja zależy od pozycji w wyjściu.

@item -N @var{nr-linii}
@itemx --first-line-number=@var{nr-linii}
@opindex -N
@opindex --first-line-number
Rozpoczyna numerację linii od @var{nr-linii} dla pierwszej linii na
pierwszej stronie wynikowej (przeważnie nie jest to pierwsza linia pliku
wejściowego).

@item -o @var{margines}
@itemx --indent=@var{margines}
@opindex -o
@opindex --indent
@cindex wcięcia linii
@cindex lewy margines
@cindex margines, lewy
Wysuwa każdą linię o margines szeroki na @var{margines} spacji (domyślnie
zero).  Całkowita szerokość strony to owo wcięcie plus szerokość strony
ustawiona opcją @samp{-W/-w}.
Przy numerowanym wyjściu jednokolumnowym (por.opcja @samp{-n}) może pojawić
się ograniczony nadmiar.

@item -r
@itemx --no-file-warnings
@opindex -r
@opindex --no-file-warnings
Nie wypisuje komunikatu ostrzegawczego kiedy nie można otworzyć @var{pliku}
będącego argumentem.  Nieudane otwarcie pliku ciągle jednak ustawia
kod zakończenia na niezerowy.

@item -s[@var{sep}]
@itemx --separator[=@var{sep}]
@opindex -s
@opindex --separator
Oddziela kolumny pojedynczym znakiem @var{sep}. Domyślnie, bez opcji
@samp{-w} jest to tabulacja, z opcją @samp{-w} @samp{brak znaku}.
Bez @samp{-s} domyślnym separatorem jest @samp{spacja}.
Opcja ta wyłącza obcinanie linii we wszystkich trzech opcjach dotyczących
kolumn (@samp{-kolumn}, @samp{-a -kolumn}, @samp{-m}), chyba że jawnie
włączone jest @samp{-w}.  Jest to zgodne z regulacjami @sc{posix}.


@item -S[@var{łańcuch}]
@itemx --sep-string[=@var{łańcuch}]
@opindex -S
@opindex --sep-string
Oddziela kolumny łańcuchem @var{łańcuch}.  Opcja ta, w odróżnieniu od
@samp{-s}, nie ma wpływu na działanie @samp{-W/-w}.  Nie wpływa na obcinanie
linii czy wyrównywanie kolumn.  Jeśli @samp{-S} nie jest ustawiona a
posłużono się @samp{-J}, to użyty zostanie domyślny separator wyjściowy,
tabulacja.  Jeśli żadna z nich nie jest ustawiona to separatorem jest spacja
(tak samo jak przy @samp{-S" "}).  Podanie @samp{-S} bez @var{łańcucha} jest
równoważne @samp{-S""}.  Zauważ, że w niektórych z jednoliterowych opcji
polecenia @code{pr} odpowiedni argument musi wystąpić bezpośrednio po nazwie
opcji. Nie można używać rozdzielających spacji.  @samp{-S/-s} to jeden
z takich przypadków. Proszę nie używać @samp{-S" łańcuch"}.
Tego wymaga @sc{posix}.

@item -t
@itemx --omit-header
@opindex -t
@opindex --omit-header
Nie wypisuje nagłówka i stopki znajdujących się zwykle na każdej stronie,
i nie wypełnia dołów strony (linami pustymi lub znakami nowej strony).
Nie jest tworzona struktura strony, ale ustawienia zmian strony z plików
wejściowych są zachowywane. Nie jest zmieniane predefiniowane stronicowanie.
@samp{-t} lub @samp{-T} mogą być przydatne z innymi opcjami, np.
@samp{-t -e4} rozwija znaki tabulacji pliku wejściowego do 4 spacji, ale
nie wykonuje innych zmian. Użycie @samp{-t} przesłania opcję @samp{-h}.

@item -T
@itemx --omit-pagination
@opindex -T
@opindex --omit-pagination
Nie wypisuje nagłówka i stopki. Oprócz tego ignoruje wszystkie zmiany
strony ustawiane w plikach wejściowych.

@item -v
@itemx --show-nonprinting
@opindex -v
@opindex --show-nonprinting
Wypisuje znaki niedrukowalne w notacji ósemkowej z odwrotnym ukośnikiem.

@item -w @var{szer-strony}
@itemx --width=@var{szer-strony}
@opindex -w
@opindex --width
Ustawia szerokość strony na @var{szer-strony} znaków -- tylko dla wyjścia
wielokolumnowego.  Wartość domyślna to 72.
@samp{-s[@var{sep}]} wyłącza domyślną szerokość strony, obcinanie
linii i wyrównywanie kolumn.  Linie pełnej długości są scalane, bez względu
na ustawienia opcji kolumn.  Możliwe jest nieustawienie szerokości strony
przy wyjściu jednokolumnowym.  Zgodne z regulacjami @sc{posix}.

@item -W @var{szer-strony}
@itemx --page_width=@var{szer-strony}
@opindex -W
@opindex --page_width
Ustawia szerokość strony na @var{szer-strony} znaków (domyślnie 72).
Obowiązuje zarówno z opcjami kolumnowymi jak i bez nich.  Linie tekstu są
obcinane, chyba że podano @samp{-J}.  Łącznie z jedną z trzech opcji
dotyczących kolumn (@samp{-@var{kolumn}}, @samp{-a -@var{kolumn}} lub
@samp{-m}) zawsze stosowane jest wyrównywanie kolumn. Opcje separatora
@samp{-S} czy @samp{-s} nie mają wpływu na @samp{-W}.
Jeżeli nie użyto ani tej opcji ani żadnej z opcji kolumnowych, to nie jest
stosowane @emph{żadne} obcinanie linii (zdefiniowane w celu utrzymania
zgodności wstecznej i spełniania najczęstszych zadań).  Jest to równoważne
ustawieniu @samp{-W 72 -J}.  Zarówno z opcją @samp{-W @var{szer-strony}},
jak i bez niej, nagłówek jest zawsze obcinany dla uniknięcia nadmiaru.

@end table


@node Wywołanie fold
@section @code{fold}: zawijanie linii wejściowych do zadanej szerokości 

@pindex fold
@cindex zawijanie długich linii wejściowych
@cindex łamanie długich linii wejściowych
@cindex długie linii wejściowe, łamanie

@code{fold} zapisuje na standardowe wyjście zawartość każdego z podanych
@var{plików} (@samp{-} oznacza standardowe wejście), lub standardowego
wejścia, jeśli nie podano żadnego pliku, łamiąc długie linie.  Składnia:

@example
fold [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

Domyślnie, @code{fold} łamie linie dłuższe niż 80 kolumn.  Wyjście jest
dzielone na tyle linii, ile to konieczne.

@cindex kolumny ekranowe
@code{fold} domyślnie liczy kolumny ekranowe, zatem znaki tabulacji
przeważnie zajmują więcej niż jedną kolumnę, znaki backspace zmniejszają
licznik kolumn, a znaki powrotu karetki ustawiają licznik kolumn z powrotem
na zero.

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -b
@itemx --bytes
@opindex -b
@opindex --bytes
Liczy bajty, a nie kolumny, tak iż znaki tabulacji, backspace
i powrót karetki są liczone za jedną kolumnę każdy, tak jak inne
znaki.

@item -s
@itemx --spaces
@opindex -s
@opindex --spaces
Łamie na granicy słów.  Linia jest łamana po ostatnim znaku pustym
wypadającym przed maksymalna długością linii.  Jeśli nie ma takich znaków
pustych, linia jest łamana na maksymalnej długości linii, jak zwykle.

@item -w @var{szerokość}
@itemx --width=@var{szerokość}
@opindex -w
@opindex --width
Używa maksymalnej długości linii wynoszącej @var{szerokość} kolumn zamiast 80.

@end table


@node Wypisywanie części plików
@chapter Wypisywanie części plików

@cindex wypisywanie części plików
@cindex części plików, wypisywanie

Te polecenia wypisują części plików wejściowych.

@menu
* Wywołanie head::        wypisywanie początku plików
* Wywołanie tail::        wypisywanie końcówki plików
* Wywołanie split::       podział pliku na części stałej wielkości
* Wywołanie csplit::      podział pliku na części zależne od kontekstu
@end menu

@node Wywołanie head
@section @code{head}: wypisywanie początku plików

@pindex head
@cindex początkowa część plików, wypisywanie

@code{head} wypisuje początkową część (domyślnie 10 linii) każdego podanego
@var{pliku}. Czyta ze standardowego wejścia jeśli nie podano plików, albo
jeśli jako nazwę pliku podano @samp{-}.  Składnie:

@example
head [@var{opcja}]@dots{} [@var{plik}]@dots{}
head -@var{liczba} [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

Jeśli podano więcej niż jeden @var{plik}, @code{head} wypisuje także
jednolinijkowy nagłówek postaci:
@example
==> @var{nazwa pliku} <==
@end example
@noindent
przed wypisaniem początku każdego z plików.

@code{head} akceptuje dwa formaty opcji: nowy, w którym liczby są argumentami
opcji literowych (@samp{-q -n 1}), i stary, w którym liczby poprzedzają
jakiekolwiek opcje literowe (@samp{-1q}).

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -@var{ile}@var{opcje}
@opindex -@var{ile}
Opcja taka jest rozpoznawana tylko jeśli jest podana jako pierwsza.
@var{ile} jest liczbą dziesiętną, po której opcjonalnie występuje litera
rozmiaru (@samp{b}, @samp{k}, @samp{m}) jak w opcji @samp{-c}, lub litera
@samp{l} oznaczająca zliczanie linii, albo inne litery opcji (@samp{cqv}).

@item -c @var{n}
@itemx --bytes=@var{n}
@opindex -c
@opindex --bytes
Wypisuje pierwsze @var{n} bajtów, zamiast początkowych linii.  Dodanie po
liczbie przyrostka @samp{b} oznacza wypisywanie @var{n} bloków 512-bajtowych,
przyrostka @samp{k} - bloków kilobajtowych, a @samp{m} - bloków megabajtowych.

@itemx -n @var{n}
@itemx --lines=@var{n}
@opindex -n
@opindex --lines
Wypisuje pierwsze @var{n} linii.
[Opcja @samp{-l} jest rozpoznawana tylko z użyciem starego formatu opcji.]

@item -q
@itemx --quiet
@itemx --silent
@opindex -q
@opindex --quiet
@opindex --silent
Nigdy nie wypisuje nagłówków z nazwami plików.

@item -v
@itemx --verbose
@opindex -v
@opindex --verbose
Zawsze wypisuje nagłówki z nazwami plików.

@end table


@node Wywołanie tail
@section @code{tail}: wypisywanie końcówki plików

@pindex tail
@cindex końcowa część plików, wypisywanie

@code{tail} wypisuje końcową część (domyślnie 10 linii) każdego podanego
@var{pliku}. Czyta ze standardowego wejścia jeśli nie podano plików, albo
jeśli jako nazwę pliku podano @samp{-}.  Składnie:

@example
tail [@var{opcja}]@dots{} [@var{plik}]@dots{}
tail -@var{liczba} [@var{opcja}]@dots{} [@var{plik}]@dots{}
tail +@var{liczba} [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

Jeśli podano więcej niż jeden @var{plik}, @code{tail} wypisuje także
jednolinijkowy nagłówek postaci:
@example
==> @var{nazwa pliku} <==
@end example
@noindent
przed wypisaniem końcówki każdego z plików.

@cindex BSD @code{tail}
@cindex @code{tail} z BSD
GNU @code{tail} może wypisać dowolną ilość danych, czego nie potrafią
niektóre inne wersje @code{tail}.  Nie ma on opcji @samp{-r} (wypisywanie
odwrotnie), gdyż odwracanie pliku to faktycznie zupełnie inne zadanie niż
wypisywanie końca pliku; 
@code{tail} z BSD (posiadający opcję @samp{-r}) potrafi odwrócić tylko pliki,
które są nie większe niż jego bufor, przeważnie 32k.  Bardziej niezawodnym
i wszechstronnym sposobem odwracania plików jest polecenie GNU @code{tac}.

@code{tail} akceptuje dwa formaty opcji: nowy, w którymi liczby są
argumentami opcji literowych (@samp{-n 1}), i stary, w którym liczby
poprzedzają jakiekolwiek opcje literowe (@samp{-1} lub @samp{+1}).

Jeśli będąca argumentem nieopcyjnym liczba @var{n} zaczyna się od znaku
@samp{+}, @code{tail} zaczyna wypisywanie od @var{n}-tego elementu od
początku każdego pliku, a nie od końca.

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -@var{ile}
@itemx +@var{ile}
@opindex -@var{ile}
@opindex +@var{ile}
Opcja taka jest rozpoznawana tylko jeśli jest podana jako pierwsza.
@var{ile} jest liczbą dziesiętną, po której opcjonalnie występuje litera
rozmiaru (@samp{b}, @samp{k}, @samp{m}) jak w opcji @code{-c}, lub litera
@samp{l} oznaczająca zliczanie linii, albo inne litery opcji (@samp{cfqv}).

@item -c @var{n}
@itemx --bytes=@var{n}
@opindex -c
@opindex --bytes
Wypisuje ostatnich @var{n} bajtów, zamiast końcowych linii.  Dodanie po
liczbie przyrostka @samp{b} oznacza wypisywanie @var{n} bloków 512-bajtowych,
przyrostka @samp{k} - bloków kilobajtowych, a @samp{m} - bloków megabajtowych.

@item -f
@itemx --follow[=@var{jak}]
@opindex -f
@opindex --follow
@cindex rosnące pliki
@vindex name @r{opcja follow}
@vindex descriptor @r{opcja follow}
Pracuje w nieskończonej pętli próbując przeczytać więcej znaków z końca
pliku, zakładając, że plik rośnie.  Ignorowana jeśli czytanie odbywa się
z potoku.  Jeśli podano więcej niż jeden plik, @code{tail} wypisuje nagłówek
za każdym razem gdy dostaje wynik od innego pliku, aby zaznaczyć, z którego
pliku on pochodzi.

Istnieją dwa sposoby określania, jak mają być śledzone pliki przy użyciu
tej opcji, ale różnica ta jest zauważalna tylko wtedy, gdy śledzony plik
zostanie usunięty lub zmieni nazwę.
Chcąc śledzić koniec powiększającego się pliku nawet po jego usunięciu
(unlink), należy użyć @samp{--follow=descriptor}.  Jest to zachowanie
domyślne, ale nie jest przydatne jeżeli śledzi się plik dziennika, który
może podlegać cyklicznej wymianie (usunięcie lub zmiana nazwy, następnie
ponowne otwarcie).  W takim przypadku, należy użyć @samp{--follow=name},
by śledzić plik o danej nazwie przez okresowe ponowne otwieranie go
i sprawdzanie czy został usunięty i ponownie utworzony przez jakiś inny
program.

Bez względu na wykorzystaną metodę, jeżeli zostanie stwierdzone skurczenie
się pliku, @code{tail} wypisuje komunikat mówiący o tym, że plik został
obcięty i wznawia śledzenie końca pliku od ponownie wyznaczonego punktu
końcowego.

Gdy plik jest usunięty, zachowanie się @code{tail} zależy od tego czy śledzi
on nazwę czy deskryptor. Podążając za nazwą potrafi rozpoznać, że plik został
usunięty i daje odpowiedni komunikat, a jeśli użyto opcji @samp{--retry}
będzie wykonywał cykliczne sprawdzanie czy plik nie pojawi się znowu.
Podążając za deskryptorem, @code{tail} nie wykrywa, że plik został usunięty
czy zmienił nazwę i nie wysyła komunikatów; mimo, iż plik może nie być już
dostępny pod pierwotną nazwą, może on wciąż powiększać się.

Wartości opcji @samp{descriptor} i @samp{name} można podać tylko przy długiej
postaci opcji, nie z @samp{-f}.

@itemx --retry
@opindex --retry
Ma znaczenie tylko przy podążaniu za nazwą.  
[Z opcją @samp{--retry} program ponawia próby otwarcia pliku nawet, jeśli
jest niedostępny w momencie rozpoczęcia pracy przez @code{tail}lub staje
się niedostępny później.]
Bez tej opcji @code{tail} napotykając plik, który nie istnieje lub jest
niedostępny w inny sposób, zgłasza ten fakt i nie sprawdza już powtórnie.

@itemx --sleep-interval=@var{n}
@opindex --sleep-interval
Zmienia liczbę sekund odczekiwania pomiędzy iteracjami (domyślnie jest to 1).
Podczas pojedynczej iteracji, dla każdego z podanych plików wykonywane jest
sprawdzenie jest czy nie zmienił on rozmiaru.

@itemx --pid=@var{pid}
@opindex --pid
Podążając za deskryptorem lub nazwą, można podać identyfikator procesu,
@var{pid}, jedynego piszącego do wszystkich @var{plików} wymienionych jako
argumenty.  Następnie, wkrótce po zakończeniu tego procesu, @code{tail}
również zakończy pracę.  Działa to poprawnie tylko wtedy, gdy piszący
i proces tail uruchomione są na tej samej maszynie. Na przykład, by
zachować wyniki kompilacji w pliku i obserwować jego wzrost, można wywołać
@code{make} i @code{tail} a proces tail zatrzyma się po ukończeniu kompilacji.
Bez tej opcji, trzeba było by samodzielnie unicestwić proces @code{tail -f}.
@example
$ make >& makerr & tail --pid=$! -f makerr
@end example
Jeśli zostanie podany nie używany @var{pid} lub nie odpowiadający procesowi
piszącemu do przeglądanych plików, to @code{tail} może zakończyć pracę dużo
wcześniej niż @var{plik}(i) przestaną się powiększać lub może nie ukończyć
pracy długo po tym, jak faktyczny piszący skończył.

@itemx --max-consecutive-size-changes=@var{n}
@opindex --max-consecutive-size-changes
Opcja znacząca tylko, jeśli występuje podążanie za nazwą.
Służy do określania, jak długo @code{tail} ma podążać za deskryptorem
gwałtownie rosnącego pliku, nawet jeśli zostanie on usunięty lub zmieni się
jego nazwa.  Po wykryciu @var{n} kolejnych zmian rozmiaru pliku @code{tail}
wykonuje @code{open}/@code{fstat} pliku, by stwierdzić czy dana nazwa pliku
jest wciąż skojarzona z tym samą parą urządzenie/numer-iwęzła, co uprzednio.
Zobacz wynik @code{tail --help} by zapoznać się z wartością domyślną
[tłum.: 5].

@itemx --max-unchanged-stats=@var{n}
@opindex --max-unchanged-stats
Przy przeglądaniu końca pliku według nazwy, jeśli wystąpiło @var{n} kolejnych
iteracji, podczas których rozmiar pozostał ten sam, to @code{tail} wykonuje
@code{open}/@code{fstat} pliku. Stwierdza w ten sposób czy dana nazwa pliku
jest wciąż skojarzona z tym samą parą urządzenie/numer-iwęzła, co uprzednio.
Przy podążaniu za plikiem dziennika podlegającym cyklicznej wymianie jest to
w przybliżeniu liczba sekund pomiędzy momentem, kiedy tail wypisze ostatnie
linie sprzed rotacji a czasem, kiedy wypisze linie, jakie nagromadziły się
w nowym pliku dziennika. Zobacz wynik @code{tail --help} by zapoznać się
z wartością domyślną [tłum.: 200]. Opcja ta jest znacząca tylko przy
podążaniu za nazwą.

@itemx -n @var{n}
@itemx --lines=@var{n}
@opindex -n
@opindex --lines
Wypisuje ostatnie @var{n} linii.
[@samp{-l} jest rozpoznawana tylko z użyciem starego formatu opcji.]

@item -q
@itemx -quiet
@itemx --silent
@opindex -q
@opindex --quiet
@opindex --silent
Nigdy nie wypisuje nagłówków z nazwami plików.

@item -v
@itemx --verbose
@opindex -v
@opindex --verbose
Zawsze wypisuje nagłówki z nazwami plików.

@end table


@node Wywołanie split
@section @code{split}: podział pliku na części stałej wielkości

@pindex split
@cindex podział pliku na części
@cindex dzielenie pliku na części
@cindex części, dzielenie pliku

@code{split} tworzy pliki wyjściowe zawierające kolejne części
@var{wejścia} (standardowego wejścia jeśli nie podano żadnego pliku
wejściowego lub podanym @var{wejściem} jest @samp{-}).  Składnia:

@example
split [@var{opcja}] [@var{wejście} [@var{przedrostek}]]
@end example

Domyślnie, @code{split} do każdego pliku wyjściowego wstawia 1000 linii
@var{wejścia}, albo to co pozostało, w przypadku ostatniej części.

@cindex przedrostek nazwy pliku wyjściowego
Nazwy plików wyjściowych składają się z @var{przedrostka} (domyślnie @samp{x}),
po którym następuje grupa liter @samp{aa}, @samp{ab} i tak dalej, wybrana
tak, iż połączenie plików wyjściowych posortowanych wedle nazwy daje
oryginalny plik wejściowy.  (Jeśli potrzeba więcej niż 676 plików wyjściowych,
to @code{split} stosuje @samp{zaa}, @samp{zab}, etc.)

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -@var{linie}
@itemx -l @var{linie}
@itemx --lines=@var{linie}
@opindex -l
@opindex --lines
Wstawia @var{linie} linii pliku @var{wejściowego} do każdego pliku wyjściowego.

@item -b @var{n}
@itemx --bytes=@var{n}
@opindex -b
@opindex --bytes
Wstawia @var{n} bajtów @var{wejścia} do każdego pliku wyjściowego.
Dodanie po liczbie przyrostka @samp{b} oznacza wypisywanie @var{n} bloków
512-bajtowych, przyrostka @samp{k} - bloków kilobajtowych,
a @samp{m} - bloków megabajtowych.

@item -C @var{n}
@itemx --line-bytes=@var{n}
@opindex -C
@opindex --line-bytes
Wstawia do każdego pliku wynikowego tyle kompletnych linii @var{wejścia}, ile
jest możliwe bez przekraczania @var{n} bajtów.  Dla linii dłuższych niż limit
wstawia @var{n} bajtów do każdego pliku wynikowego aż pozostanie mniej niż
@var{n} bajtów dzielonej linii, potem kontynuuje normalnie.
@var{n} ma taki sam format jak w opcji @samp{--bytes}.

@itemx --verbose
@opindex --verbose
Wyświetla komunikat na standardowym wyjściu diagnostycznym przed otwarciem
każdego z plików wynikowych.

@end table


@node Wywołanie csplit
@section @code{csplit}: podział pliku na części zależne od kontekstu

@pindex csplit
@cindex podział kontekstowy pliku na części
@cindex dzielenie kontekstowe pliku na części
@cindex części, dzielenie kontekstowe pliku

@code{csplit} tworzy zero lub więcej plików wyjściowych zawierających części
@var{wejścia} (standardowego wejścia podanym @var{wejściem} jest @samp{-}).
Składnia:

@example
csplit [@var{opcja}]@dots{} @var{wejście} @var{wzorzec}@dots{}
@end example

Zawartość plików wyjściowych ustalana jest wedle argumentów @var{wzorzec},
Jeśli argument wzorca odnosi się do nieistniejącej w pliku wejściowym linii,
np. gdy żadna z pozostałych linii nie pokrywa się z podanym wyrażeniem
regularnym, następuje błąd.  Po dopasowaniu wszystkich podanych @var{wzorców}
pozostała część wejścia kopiowana jest do jeszcze jednego, ostatniego pliku
wyjściowego.

Domyślnie, @code{csplit} wypisuje liczbę bajtów zapisanych do każdego pliku
wyjściowego po jego utworzeniu.

Typy argumentów wzorca to:

@table @samp

@item @var{n}
Tworzy plik wyjściowy zawierający bieżącą linię aż do (ale nie włącznie
z) linii o numerze @var{n} (dodatnia liczba całkowita) pliku wejściowego.
Jeśli następuje po nim ilość powtórzeń, tworzy także pliki wyjściowe
zawierające następne @var{n} linii pliku wejściowego, po jednym dla każdego
powtórzenia.

@item /@var{regexp}/[@var{offset}]
Tworzy plik wyjściowy zawierający bieżącą linię aż do (ale nie włącznie z)
następnej linii, która zawiera coś pasującego do wyrażenia regularnego
@var{regexp}.  Opcjonalny @var{offset} to @samp{+} albo @samp{-},
po którym następuje liczba naturalna.  Jeśli został podany, do pliku
wyjściowego wstawiane jest wejście aż do pasującej linii plus lub minus
@var{offset}, a kolejna linia zaczyna następną część wejścia.

@item %@var{regexp}%[@var{offset}]
Jak w poprzednim typie, z wyjątkiem tego, że nie tworzy pliku wyjściowego,
wskutek czego owa część pliku wejściowego jest faktycznie ignorowana.

@item @{@var{ile-powtórzeń}@}
Powtarza poprzedni wzorzec zadaną liczbę razy (dodatnia liczba całkowita).
W miejsce ilości powtórzeń można podać gwiazdkę -- w tym przypadku
poprzedzający wzór jest powtarzany tyle razy, ile to potrzebne, aż do
wyczerpania wejścia.

@end table

Nazwy plików wyjściowych składają się z przedrostka (domyślnie @samp{xx}),
po którym następuje przyrostek.  Domyślnie przyrostek jest liniowo rosnącym
ciągiem dziesiętnych liczb dwucyfrowych, począwszy od @samp{00} aż do
@samp{99}.  W każdym przypadku, połączenie plików wyjściowych posortowanych
według nazwy pliku daje oryginalny plik wejściowy.

Domyślnie, jeśli @code{csplit} napotka błąd lub otrzyma sygnał zawieszania,
przerwania, wyjścia lub zakończenia, to przed zakończeniem pracy usuwa
wszystkie pliki wyjściowe, które jak dotąd stworzył.

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -f @var{przedrostek}
@itemx --prefix=@var{przedrostek}
@opindex -f
@opindex --prefix
@cindex przedrostek nazwy pliku wyjściowego
Używa @var{przedrostka} jako łańcucha będącego przedrostkiem nazwy
pliku wyjściowego.

@item -b @var{przedrostka}
@itemx --suffix=@var{przedrostka}
@opindex -b
@opindex --suffix
@cindex przyrostek nazwy pliku wyjściowego
Używa @var{przyrostka} jako łańcucha będącego przyrostkiem nazwy pliku
wyjściowego.  Gdy podaje się tę opcję, łańcuch przyrostka musi obejmować
dokładnie jedną specyfikację stylu konwersji @code{printf(3)}, mogącą
zawierać flagi określające format, szerokość pola, specyfikatory precyzji
lub wszystkie te rodzaje modyfikatorów.  Specyfikacja konwersji musi być
odpowiednia dla zamiany argumentu będącego binarną liczbą całkowitą na
formę czytelną.  Wobec tego dozwolone są tylko specyfikatory formatu
@samp{d}, @samp{i}, @samp{u}, @samp{o}, @samp{x} oraz @samp{X}.  Cały łańcuch
@var{przyrostka} podawany jest (razem z bieżącym numerem pliku wyjściowego)
do @code{sprintf(3)}, by stworzyć przyrostki nazwy pliku dla każdego
kolejnego pliku wyjściowego.  Zauważ, że gdy używa się tej opcji, opcja
@samp{--digits} jest ignorowana.

@item -n @var{cyfry}
@itemx --digits=@var{cyfry}
@opindex -n
@opindex --digits
Używa nazw plików wyjściowych zawierających numery o długości @var{cyfry}
cyfr zamiast domyślnie dwucyfrowe.

@item -k
@itemx --keep-files
@opindex -k
@opindex --keep-files
Nie usuwa plików wyjściowych przy napotkaniu błędów.

@item -z
@itemx --elide-empty-files
@opindex -z
@opindex --elide-empty-files
Wyłącza tworzenie plików o długości zerowej. (W przypadkach gdy ograniczniki
części pliku wejściowego mają zaznaczać pierwsze linie każdej z części,
pierwszy plik wyjściowy będzie miał przeważnie długość zero, chyba że
użyjesz tej opcji.)  Zauważ, że numery plików wyjściowych zawsze biegną
po kolei, poczynając od 0, nawet w przypadkach kiedy wyłączono części wyjścia
o długości zerowej z powodu użycia tej opcji.

@item -s
@itemx -q
@itemx --silent
@itemx --quiet
@opindex -s
@opindex -q
@opindex --silent
@opindex --quiet
Nie wypisuje obliczanych wielkości plików wyjściowych.

@end table


@node Podsumowywanie plików
@chapter Podsumowywanie plików

@cindex podsumowywanie plików

Te polecenia tworzą jedynie kilka liczb reprezentujących całą zawartość
plików.

@menu
* Wywołanie wc::          wypisywanie liczby bajtów, słów i linii
* Wywołanie sum::         wypisywanie sumy kontrolnej i liczby bloków
* Wywołanie cksum::       wypisywanie sumy CRC liczby bloków
* Wywołanie md5sum::      wypisywanie lub sprawdzanie skrótu danych
@end menu


@node Wywołanie wc
@section @code{wc}: wypisywanie liczby bajtów, słów i linii

@pindex wc
@cindex bajty, zliczanie
@cindex słowa, zliczanie
@cindex wyrazy, zliczanie
@cindex linie, zliczanie

@code{wc} zlicza liczbę bajtów, słów oddzielonych białymi znakami, oraz
znaków końca linii w każdym podanym @var{pliku} lub w standardowym wejściu
(jeśli nie podano żadnego pliku albo podano plik zwany @samp{-}).  Składnia:

@example
wc [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

@cindex sumy całkowite
@cindex liczby sumaryczne
@code{wc} wypisuje jedną linię danych o liczbach dla każdego pliku, a jeśli
plik ów został podany jako argument, po liczbie(ach) wypisuje nazwę pliku.
Jeśli podano więcej niż jedną nazwę @var{pliku}, @code{wc} wypisuje linię
końcową zawierającą łączne liczby, z nazwą pliku @file{total}.
Liczby są wypisywane w kolejności: linie, słowa, bajty.

Domyślnie każda z liczb wypisywana jest w wyrównanym do prawej 7-bajtowym
polu, z jedną spacją między polami.  Wówczas liczby i nazwy plików ładnie
wyrównują się w kolumnach.  Jednak @sc{posix} wymaga, by kolumny były
rozdzielone dokładnie jedną spacją.  Można wymusić przestrzeganie
formatu wyjścia zgodnego z @sc{posix} ustawiając zmienną środowiskową
@env{POSIXLY_CORRECT}.

Domyślnie @code{wc} wypisuje wszystkie trzy liczby.  Opcjami można określić
wypisywanie tylko niektórych liczb.  Kolejne opcje nie unieważniają innych,
poprzednich, tak więc

@example
wc --bytes --words
@end example

@noindent
wypisze liczbę bajtów oraz liczbę słów.

Z opcją @samp{--max-line-length} program wypisuje długość najdłuższej linii
w każdym z plików, a jeżeli podano więcej niż jeden plik, to również
największą (nie sumę) z tych długości.

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -c
@itemx --bytes
@itemx --chars
@opindex -c
@opindex --bytes
@opindex --chars
Wypisuje tylko liczbę bajtów.

@item -w
@itemx --words
@opindex -w
@opindex --words
Wypisuje tylko liczbę słów.

@item -l
@itemx --lines
@opindex -l
@opindex --lines
Wypisuje tylko liczbę znaków nowej linii.

@item -L
@itemx --max-line-length
@opindex -L
@opindex --max-line-length
Wypisuje tylko długość najdłuższej linii.

@end table


@node Wywołanie sum
@section @code{sum}: wypisywanie sumy kontrolnej i liczby bloków

@pindex sum
@cindex 16-bitowa suma kontrolna
@cindex suma kontrolna, 16-bitowa
@cindex checksum

@code{sum} oblicza 16-bitową sumę kontrolną dla każdego podanego pliku, albo
standardowego wejścia jeśli nie podano żadnego lub podano plik zwany @samp{-}.
Składnia:

@example
sum [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

@code{sum} wypisuje sumę kontrolną dla każdego @var{pliku}, razem z liczbą
bloków w pliku (zaokrągloną w górę).  Domyślnie wypisywana jest także każda
odpowiednia nazwa pliku, jeśli podano co najmniej dwa @var{pliki}.
(Z opcją @samp{--sysv} odpowiednie nazwy plików są wypisywane gdy podano
przynajmniej jeden argument będący plikiem.)

Domyślnie, GNU @code{sum} oblicza sumy kontrolne używając algorytmu
zgodnego z BSD @code{sum} i wypisuje rozmiary plików używając jako jednostek
1024-bajtowych bloków.

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -r
@opindex -r
@cindex BSD @code{sum}
@cindex @code{sum} z BSD
Używa domyślnego algorytmu (zgodnego z BSD).  Ta opcja jest załączona dla
zgodności z @code{sum} z System V.  Nie wywołuje żadnego efektu, chyba że
podano także opcję @samp{-s}.

@item -s
@itemx --sysv
@opindex -s
@opindex --sysv
@cindex System V @code{sum}
@cindex @code{sum} z System V
Oblicza sumy kontrolne używając algorytmu zgodnego z domyślnie używanym przez
@code{sum} z System V i wypisuje rozmiary plików w jednostkach 512-bajtowych
bloków [a nie kilobajtowych].

@end table

@code{sum} jest zapewniany dla utrzymania zgodności.  W nowych zastosowaniach
preferowany jest program @code{cksum} (zob. następna sekcja).


@node Wywołanie cksum
@section @code{cksum}: wypisywanie sumy CRC liczby bloków

@pindex cksum
@cindex cyclic redundancy check
@cindex CRC suma kontrolna
@cindex suma kontrolna CRC
@cindex checksum

@code{cksum} oblicza sumę kontrolną CRC (cyclic redundancy check) dla 
każdego podanego pliku, bądź dla standardowego wejścia jeśli nie podano
żadnego lub gdy podano plik zwany @samp{-}.  Składnia:

@example
cksum [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

@code{cksum} wypisuje CRC dla każdego pliku razem z liczbą bajtów w pliku,
oraz nazwą pliku, chyba że nie zostały podane żadne argumenty.

@code{cksum} używany jest przeważnie do upewnienia się, że pliki przeniesione
za pomocą niepewnych środków (takich jak newsy), nie zostały zepsute,
a to porównując wynik @code{cksum} dla otrzymanych plików z wynikiem
@code{cksum} dla plików oryginalnych (zwykle podanym w pakiecie dystrybucyjnym).

Algorytm CRC określony jest przez standard @sc{posix.2}.  Nie jest on zgodny
z programami @code{sum} z BSD i System V (zob.poprzednia sekcja); jest
bardziej niezawodny.

Jedynymi opcjami są @samp{--help} i @samp{--version}.  @xref{Wspólne opcje}.


@node Wywołanie md5sum
@section @code{md5sum}: wypisywanie lub sprawdzanie skrótu danych

@pindex md5sum
@cindex 128-bitowa suma kontrolna
@cindex suma kontrolna, 128-bitowa
@cindex skrót danych, 128-bitowy
@cindex odcisk, 128-bitowy
@cindex fingerprint
@cindex message-digest
@cindex checksum

@code{md5sum} tworzy dla każdego podanego @var{pliku} wejściowego 128-bitową
sumę kontrolną (@dfn{odcisk}, @dfn{skrót danych}).  Jeśli jako nazwę pliku
podano @samp{-} lub nie podano żadnego pliku, to suma kontrolna obliczana
jest dla standardowego wejścia.
@code{md5sum} potrafi też sprawdzić, używając wyniku wcześniejszego
uruchomienia, czy skróty ciągle są takie same (tj. czy pliki się zmieniły).
Składnia:

@example
md5sum [@var{opcja}]@dots{} [@var{plik}]@dots{}
md5sum [@var{opcja}]@dots{} --check [@var{plik}]
@end example

Dla każdego z @var{plików} wypisywana jest linia ze skrótem, znakiem
wskazującym na typ pliku wejściowego, i jego nazwą.
Jeśli pominięto @var{plik} lub jako nazwę pliku podano @samp{-}, to czytane
jest standardowe wejście.

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -b
@itemx --binary
@opindex -b
@opindex --binary
@cindex binarne pliki wejściowe
Traktuje wszystkie pliki wejściowe jako binarne.  Ta opcja nie ma znaczenia
w systemach uniksowych, gdyż nie rozróżnia się w nich plików binarnych
i tekstowych.  Przydaje się natomiast w systemach, które mają odmienną
wewnętrzną i zewnętrzną reprezentację tekstu (zwłaszcza znaków końca
linii).  Tryb ten jest domyślny w MS-DOS/MS-Windows.

@item -c
@itemx --check
Czyta nazwy plików i informację o skrótach z zadanego pojedynczego @var{pliku}
(lub ze standardowego wejścia, jeśli nie podano pliku) i zgłasza, czy każdy
z danych plików ma skrót zgodny z zapisanym. Plikiem wejściowym dla tego
trybu pracy jest na ogół wynik wcześniejszego, tworzącego skróty,
uruchomienia @code{md5sum}.
Plik wejściowy zawiera w każdej linii sumę MD5, znacznik binarium/tekstu,
oraz nazwę pliku.
Pliki binarne oznaczone są przez @samp{*}, tekstowe przez @samp{ }.
Dla każdej z linii czytany jest wymieniony w niej plik i wyliczany jego
skrót.  Następnie, jeśli skrót nie jest taki sam, jak podany w tej linii,
test pliku oznaczony zostanie jako nieudany.  W przeciwnym razie plik zdaje
test. Domyślnie, dla każdej poprawnej linii na standardowe wyjście
wypisywana jest jedna linia wskazująca, czy dany plik przeszedł test.
Po przeprowadzeniu wszystkich kontroli, jeżeli wystąpiły jakieś niepowodzenia,
na standardowe wyjście błędów wysyłane jest ostrzeżenie. Opcja @samp{--status}
wyłącza ten komunikat. Jeżeli nie można otworzyć lub przeczytać któregoś
ze wskazanych plików, któraś z poprawnych linii zawiera niezgodny z aktualnym
skrót odpowiedniego pliku albo nie znaleziono żadnej poprawnej linii, to
@code{md5sum} kończy pracę z niezerowym kodem.  W przeciwnym razie kończy
pracę pomyślnie.

@itemx --status
@opindex --status
@cindex weryfikacja sum kontrolnych MD5
Opcja przydatna tylko przy weryfikacji skrótów.  Zakazuje wówczas domyślnego
tworzenia raportu (po jednej linii na plik) i wysyłania ostrzeżenia
z podsumowaniem niepowodzeń.  Nieudane otwarcia lub odczyty plików nadal
powodują odrębne komunikaty na standardowym wyjściu błędów.
Jeżeli wszystkie wskazane pliki dają się czytać i mają skróty zgodne
z zapisanymi, to @code{fBmd5sum} pomyślnie kończy pracę.  W przeciwnym
przypadku kończy działanie z kodem wskazującym na niepowodzenie.

@item -t
@itemx --text
@opindex -t
@opindex --text
@cindex tekstowe pliki wejściowe
Traktuje wszystkie pliki wejściowe jako tekst.  Jest to opcja odwrotna do
@samp{--binary}.

@item -w
@itemx --warn
@opindex -w
@opindex --warn
@cindex weryfikacja sum kontrolnych MD5
Przy weryfikacji skrótów ostrzega o niepoprawnie sformatowanych liniach
z sumami kontrolnymi MD5. Opcja przydatna tylko wtedy, gdy poprawne są
wszystkie oprócz kilku linii sprawdzanego wejścia.

@end table


@node Działania na posortowanych plikach
@chapter Działania na posortowanych plikach

@cindex działania na posortowanych plikach
@cindex posortowane pliki, działania
@cindex sortowane pliki, działania

Te polecenia działają na plikach posortowanych (lub je tworzą).

@menu
* Wywołanie sort::        sortowanie plików tekstowych
* Wywołanie uniq::        pozostawianie unikalnych linii w pliku
* Wywołanie comm::        porównywanie dwu posortowanych plików liniami
* Wywołanie ptx::         tworzenie indeksu permutacyjnego zawartości pliku
* Wywołanie tsort::       sortowanie topologiczne
@end menu


@node Wywołanie sort
@section @code{sort}: sortowanie plików tekstowych

@pindex sort
@cindex sortowanie plików

@code{sort} sortuje, zlepia lub porównuje wszystkie linie z podanych
plików, lub standardowego wejścia jeśli nie podano żadnych @var{plików}
lub podano plik o nazwie @samp{-}.  Domyślnie,  @samp{sort} wypisuje
rezultaty na standardowe wyjście.  Składnia:

@example
sort [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

@code{sort} ma trzy tryby działania: sortowanie (domyślnie), zlepianie
i sprawdzanie posortowania.  Następujące opcje zmieniają tryb działania:

@table @samp

@item -c
@opindex -c
@cindex sprawdzanie posortowania
Sprawdza czy podane pliki są już posortowane.  Jeśli nie wszystkie są,
wypisuje komunikat o błędzie i kończy pracę z kodem równym 1.
W przeciwnym razie, pomyślnie kończy pracę.

@item -m
@opindex -m
@cindex scalanie posortowanych plików
@cindex zlepianie posortowanych plików
Zlepia podane pliki sortując je jako grupę.  Każdy plik wejściowy powinien
być już posortowany indywidualnie.  @code{sort} działa zawsze sortując,
a nie lepiąc; zlepianie udostępniono ponieważ jest ono szybsze w tych
przypadkach, w których działa.

@end table

@vindex LC_COLLATE
Para linii porównywana jest jak następuje:
jeśli podano jakieś pola kluczowe, @code{sort} porównuje każdą parę pól,
w porządku podanym w linii komend, według skojarzonych opcji porządkowania,
aż znaleziona zostanie różnica albo przeszukane zostaną wszystkie pola.
Wszystkie porównania wykorzystują porządek znaków określony przez ustawienie
narodowe @env{LC_COLLATE}, chyba że podano inaczej.

Jeśli użyto której z globalnych opcji @samp{Mbdfinr}, ale nie podano pól
kluczowych, @code{sort} porównuje całe linie według opcji globalnych.

W końcu, w ostatniej próbie, kiedy wszystkie porównywane klucze są równe
(lub nie podano żadnych opcji porządkujących), @code{sort} porównuje całe
linie.  Ostatnia próba porównania bierze pod uwagę opcję @samp{-r}.
Opcja @samp{-s} (stable) wyłącza ostatnią próbę porównania, tak że linie,
w których wszystkie pola są równie w porównaniu zostają pozostawione
w pierwotnej kolejności względnej.  Jeśli nie podano żadnych pól ani opcji
globalnych, @samp{-s} nie wywołuje efektów.

GNU @code{sort} (jak to określono dla wszystkich narzędzi GNU) nie ma limitów
co do długości linii ani ograniczeń co do bajtów dozwolonych w linii.
Dodatkowo, jeśli ostatni bajt pliku wejściowego nie jest nową linią, GNU
@code{sort} po cichu takową dostawia. Kończący linię znak nowej linii
w porównywaniu jest jej częścią. Na przykład, bez opcji, przy sortowaniu
@sc{ascii}, linia rozpoczynająca się tabulacją zostanie umieszczona przed
pustą linią, gdyż w porządku leksykograficznym @sc{ascii} znak tabulacji
poprzedza znak nowej linii.

Przy błędzie @code{sort} kończy pracę z kodem @samp{2}.

@vindex TMPDIR
Jeśli ustawiono zmienną środowiskową @env{TMPDIR}, @code{sort} używa jej jako
katalogu w którym należy umieścić pliki tymczasowe, zamiast domyślnego
@file{/tmp}.  Opcja @samp{-T @var{kat-tymcz}} jest jeszcze jednym sposobem
wybrania katalogu dla plików tymczasowych; zastępuje ona ową zmienną
środowiskową.

@vindex LC_CTYPE
Poniższe opcje wpływają na porządkowanie linii wyjścia.  Mogą być one
określone globalnie lub jako część konkretnego pola kluczowego.
Jeśli nie podano żadnego pola kluczowego, opcje globalne stosują się
do porównań całych linii; w przeciwnym razie opcje globalne są dziedziczone
przez pola kluczowe, dla których nie określono żadnych specjalnych opcji.
Opcje @samp{-b}, @samp{-d}, @samp{-f} i @samp{-i} klasyfikują znaki zgodnie
z ustawieniami narodowymi @env{LC_CTYPE}.

@table @samp

@item -b
@opindex -b
@cindex odstępy, ignorowane początkowych
@cindex puste znaki, ignorowane początkowych
Ignoruje początkowe znaki puste podczas szukania kluczy sortowania w każdej
linii.

@item -d
@opindex -d
@cindex telefoniczna kolejność
Sortuje w porządku @dfn{książki telefonicznej}: podczas sortowania ignoruje
wszystkie znaki oprócz liter, cyfr i znaków pustych.

@item -f
@opindex -f
@cindex zamiana wielkości znaków
@cindex wielkość znaków, zamiana
Podstawia znaki małych liter za odpowiednie znaki dużych liter podczas
sortowania tak aby, na przykład, @samp{b} sortowało się tak samo
jak @samp{B'}.

@item -g
@opindex -g
@cindex sortowanie numeryczne, ogólne
@cindex numeryczne sortowanie, ogólne
Sortuje numerycznie, posługując się standardową funkcją C @code{strtod},
przekształcając przedrostek każdej linii na liczbę zmiennoprzecinkową
podwójnej precyzji.  Umożliwia to podawanie liczb zmiennoprzecinkowych
w notacji naukowej, jak @code{1.0e-34} czy @code{10e100}.  Nie zgłasza
nadmiaru, niedomiaru czy błędów konwersji.  Wykorzystuje następujący porządek
leksykograficzny:

@itemize @bullet
@item
Linie nie rozpoczynające się liczbami (wszystkie uważane za równe).
@item
Wartości NaN (,,Not a Number'') w arytmetyce zmiennoprzecinkowej IEEE
w spójnej, ale zależnej od architektury komputera kolejności.
@item
Minus nieskończoność.
@item
Liczby skończone w kolejności rosnącej (z równymi @math{-0} i @math{+0}).
@item
Plus nieskończoność.
@end itemize

Opcji tej należy używać tylko wtedy, gdy nie ma innej alternatywy.  Jest
znacznie wolniejsza niż @samp{-n} i przy konwersji na zmiennoprzecinkowe
można utracić informację.

@item -i
@opindex -i
@cindex niedrukowalne znaki, ignorowanie
Ignoruje znaki niedrukowalne.

@item -M
@opindex -M
@cindex miesiące, sortowanie wg
@cindex sortowanie wg miesięcy
@vindex LC_TIME
Każdy początkowy łańcuch składający się z dowolnej ilości białych znaków
plus trzy litery będące skrótem nazwy miesiąca jest zamieniany na
DUŻE litery i porównywany w porządku @samp{JAN} < @samp{FEB} < @dots{}
< @samp{DEC}.
Przy porównywaniu nieprawidłowe nazwy są mniejsze od poprawnych.
Ustawienie narodowe @env{LC_TIME} wyznacza pisownię nazw miesięcy.

@item -n
@opindex -n
@cindex numeryczne sortowanie
@cindex sortowanie numeryczne
@vindex LC_NUMERIC
Sortowanie numeryczne: każdą linię rozpoczyna liczba. Składają się na nią
opcjonalne białe znaki, opcjonalny znak @samp{-}, oraz zero lub więcej cyfr,
które mogą być oddzielone separatorami tysięcy, plus opcjonalnie występujący
separator dziesiętny i zero lub więcej cyfr dziesiętnych.  Ustawienie narodowe
@var{LC_NUMERIC} określa znak separatora dziesiętnego i separatora tysięcy.

@code{sort -n} wykorzystuje coś, co może być uważane za niekonwencjonalną
metodę porównywania łańcuchów reprezentujących liczby zmiennoprzecinkowe.
Zamiast najpierw zamieniać każdy łańcuch na typ @code{double} języka C
a następnie porównywać ich wartości, sort wyrównuje znaki separatora
dziesiętnego w dwu łańcuchach i porównuje je znak po znaku.  Jedną z korzyści
z takiego podejścia jest jego szybkość.  W praktyce jest to o wiele
wydajniejsze niż wykonywanie dwu odpowiednich konwersji string-double
(lub nawet string-integer) i następnie porównywanie liczb podwójnej precyzji.
Dodatkowo, nie występuje tu towarzysząca utrata dokładności. Konwersja przed
porównaniem każdego łańcucha na typ @code{double} ograniczałaby dokładność
do około 16 cyfr w większości systemów.

Nie jest rozpoznawany ani początkowy znak @samp{+}, ani notacja wykładnicza.
Do porównywania numerycznego takich łańcuchów należy użyć opcji @samp{-g}.

@item -r
@opindex -r
@cindex odwrotne sortowanie
@cindex sortowanie odwrotne
Odwraca rezultat porównania, tak iż linie z większymi wartościami
klucza pojawiają się w wyniku wcześniej, a nie później.

@end table

Inne opcje to:

@table @samp

@item -o @var{plik-wyj}
@opindex -o
@cindex nadpisywanie pliku wejściowego, dozwolone
Wypisuje wynik do @var{plik-wyj}, a nie na standardowe wyjście.  Jeśli
@var{plik-wyj} jest jednym z plików wejściowych, @code{sort} kopiuje go
do pliku tymczasowego przed sortowaniem i wypisaniem wyniku do @var{plik-wyj}.

@item -t @var{separator}
@opindex -t
@cindex znak separatora pól
@cindex pola, znak separatora
Używa znaku @var{separator} jako separatora pól podczas szukania kluczy
sortowania w każdej linii.  Domyślnie pola oddzielone są łańcuchem pustym
pomiędzy znakami nie będącymi białym znakiem i białymi znakami.  To znaczy,
linię wejścia @w{@samp{ foo bar}}, @code{sort} rozkłada na pola
@w{@samp{ foo}} i @w{@samp{ bar}}.  Separator pól nie jest uważany za część
ani pola, które go poprzedza ani tego, które po nim następuje.

@item -u
@opindex -u
@cindex bez duplikatów w wyjściu
@cindex unikalne linie w wyjściu
W przypadku domyślnym lub opcji @samp{-m}, wypisuje tylko pierwszą
z sekwencji linii porównanych jako równe.  Dla opcji @samp{-c} sprawdza czy
żadna para kolejnych linii w wyniku porównania nie jest równa.

@item -k @var{poz1}[,@var{poz2}]
@opindex -k
@cindex pola sortowania
@cindex sortowanie, pola
Zalecana, @sc{posix}-owa składnia określania pól sortowania.
Pole jest częścią linii pomiędzy @var{poz1} i @var{poz2} (lub końcem linii,
jeśli pominięto @var{poz2}) @emph{włącznie}.  Pola i pozycje znaków
numerowane są począwszy od 1.  Zatem sortowanie według drugiego pola
wymagałoby @samp{-k 2,2}.
Poniżej znajdziesz więcej przykładów.

@item -z
@opindex -z
@cindex sortowanie linii zakończonych znakiem zero
Traktuje wejście jako zestaw linii zakończonych bajtem zerowym (znak @sc{ascii}
@sc{nul} (null)) a nie @sc{ascii} @sc{lf} (koniec linii).  Opcja ta może być
przydatna w połączeniu z @samp{perl -0} lub @samp{find -print0}
i @samp{xargs -0}, które robią to samo w celu niezawodnego zachowania
dowolnych nazw ścieżek (nawet zawierających znaki końca linii).

@item +@var{poz1}[-@var{poz2}]
Przestarzała, tradycyjna opcja określania pól sortowania.
Określa pole w każdej linii, którego należy użyć jako klucza sortowanie.
Pole to składa się z części linii zaczynającej się na @var{poz1} aż do
(ale @emph{nie włącznie z}) @var{poz2} (albo do końca linii jeśli nie podano
@var{poz2}).  Pola i pozycje znaków numerowane są począwszy od 0.
Zob. poniżej.

@end table

Dodatkowo, kiedy GNU @code{sort} wywołany został z dokładnie jednym
argumentem, rozpoznawane są opcje @samp{--help} i @samp{--version}.
@xref{Wspólne opcje}.

Historyczne (z BSD i System V) implementacje @code{sort} różniły się
w interpretacji niektórych opcji, szczególnie @samp{-b}, @samp{-f}
i @samp{-n}.  GNU sort naśladuje zachowanie POSIXowe, które jest zwykle
(ale nie zawsze!) podobne do zachowania z System V.
Według @sc{posix} @samp{-n} nie zakłada już @samp{-b}.  Dla spójności, w ten
sam sposób zmieniono @samp{-M}.  Może to wpłynąć na znaczenie pozycji znaków
w określeniach pól w pewnych zagmatwanych przypadkach.
Jedynym rozwiązaniem jest dodanie wprost opcji @samp{-b}.

Pozycja w polu sortowania w opcjach @samp{-k} i @samp{+} ma postać
@samp{@var{f}.@var{c}}, gdzie @var{f} to numer pola, które ma zostać użyte
a @var{c} to numer pierwszego znaku od początku pola (dla @samp{+@var{poz}})
albo od końca poprzedniego pola (dla @samp{-@var{poz}}).  Część @samp{.@var{c}}
pozycji może zostać pominięta; w tym przypadku uważa się ją za oznaczającą
pierwszy znak pola.  Jeśli podano opcję @samp{-b}, część @samp{.@var{c}}
określenia pola liczona jest od pierwszego niepustego znaku pola (dla
@samp{+@var{poz}}) lub ostatniego niepustego znaku stojącego
po poprzednim polu (dla @samp{+@var{poz}}).

Opcja wyznaczająca klucz sortowania może także zawierać dołączoną dowolną
z liter opcji @samp{Mbdfinr}, wówczas dla tego konkretnego pola nie są
używane globalne opcje porządkowania.  Opcja @samp{-b} może być dołączona
niezależnie do jednej z lub obu części @samp{+@var{poz}} i @samp{-@var{poz}}
określenia pola, a jeśli została odziedziczona z opcji globalnych, zostanie
dołączona do obydwu.  Klucze mogą się rozciągać na kilka pól.

A oto nieco przykładów ilustrujących rozmaite kombinacje opcji.
Do określania kluczy sortowania używana jest w nich @sc{posix}-owa opcja
@samp{-k}, zamiast przestarzałej składni @samp{+@var{poz1}-@var{poz2}}.

@itemize @bullet

@item
Sortowanie w malejącej (odwrotnej) kolejności numerycznej:

@example
sort -nr
@end example

Sortowanie alfabetyczne, przy pominięciu pierwszych i drugich pól. Posługuje
się pojedynczym kluczem złożonym ze znaków od początku trzeciego pola
do końca każdej linii:

@example
sort -k3
@end example

@item
Sortowanie numeryczne według drugiego pola i rozstrzyganie przeszkód przez
@c   resolve ties by sorting
sortowanie alfabetyczne wg trzeciego i czwartego znaku piątego pola.
Znakiem ograniczającym pola jest dwukropek @samp{:}

@example
sort -t : -k 2,2n -k 5.3,5.4
@end example

Zauważ, że w przypadku napisania @samp{-k 2} zamiast @samp{-k 2,2},
@code{sort} wykorzystałby wszystkie znaki począwszy od drugiego pola,
a skończywszy na końcu linii jako pierwszy klucz @emph{numeryczny}.
W większości zastosowań, traktowanie jako numeryczne kluczy złożonych
z więcej niż jednego pola nie daje oczekiwanego wyniku.

Zauważ też, że do określnika końca pola dla pierwszego klucza został
zastosowany modyfikator @samp{-n}. Byłby równoważny podaniu @samp{-k 2n,2}
lub @samp{-k 2n,2n}. Wszystkie modyfikatory z wyjątkiem @samp{b} odnoszą się
do odnośnego @emph{pola}, niezależnie od tego czy są dołączone do określenia
początku pola, końca czy obu.

@item
Sortowanie pliku haseł według piątego pola, ignorowane są początkowe
białe znaki. Sortowanie linii z równymi wartościami piątego pola według
numerycznego identyfikatora użytkownika z pola trzeciego:

@example
sort -t : -k 5b,5 -k 3,3n /etc/passwd
@end example

Alternatywą jest zastosowanie globalnego modyfikatora numerycznego @samp{-n}:

@example
sort -t : -n -k 5b,5 -k 3,3 /etc/passwd
@end example

@item
Utworzenie pliku znaczników (tags) w kolejności sortowania niewrażliwej
na wielkość liter:
@example
find src -type f -print0 | sort -t / -z -f | xargs -0 etags --append
@end example

Użycie w tym przypadku @samp{-print0}, @samp{-z} i @samp{-0} oznacza, że
ścieżki zawierające znaki nowej linii nie będą rozbijane przez operację
sortowania.

Na koniec: do zignorowania zarówno początkowych jak i końcowych białych
znaków można zastosować modyfikator @samp{b} do końcowego określnika
pierwszego klucza

@example
sort -t : -n -k 5b,5b -k 3,3 /etc/passwd
@end example

lub użyć globalnego modyfikatora @samp{-b} zamiast @samp{-n} i bezpośredniego
@samp{n} przy określeniu drugiego klucza:

@example
sort -t : -b -k 5,5 -k 3,3n /etc/passwd
@end example

@c This example is a bit contrived and needs more explanation.
@c @item
@c Sort records separated by an arbitrary string by using a pipe to convert
@c each record delimiter string to @samp{\0}, then using sort's -z option,
@c and converting each @samp{\0} back to the original record delimiter.
@c
@c @example
@c printf 'c\n\nb\n\na\n'|perl -0pe 's/\n\n/\n\0/g'|sort -z|perl -0pe 's/\0/\n/g'
@c @end example

@end itemize


@node Wywołanie uniq
@section @code{uniq}: pozostawianie unikalnych linii w pliku

@pindex uniq
@cindex bez duplikatów w wyjściu
@cindex unikalne linie w wyjściu

@code{uniq} wypisuje unikatowe linie z @var{wejścia} (standardowego
wejścia jeśli nie podano żadnego pliku wejściowego lub podanym
@var{wejściem} jest @samp{-}).  Składnia:

@example
uniq [@var{opcja}]@dots{} [@var{wejście} [@var{wyjście}]]
@end example

Domyślnie, @code{uniq} wypisuje z posortowanego pliku niepowtarzające
się linie, tj. odrzuca z kolejnych identycznych linii wszystkie poza
jedną.  Może też, opcjonalnie, pokazywać tylko linie, które pojawiają
się tylko raz, bądź linie które pojawiają się więcej niż raz.

Wejście programu musi być posortowane. Jeśli nie jest posortowane,
można zamiast @code{uniq} użyć @code{sort -u}.

Jeśli nie podano pliku @var{wyjściowego}, @code{uniq} pisze na standardowe
wyjście.

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -@var{n}
@itemx -f @var{n}
@itemx --skip-fields=@var{n}
@opindex -@var{n}
@opindex -f
@opindex --skip-fields
Przed sprawdzeniem unikalności każdej linii pomija w niej @var{n} pól.
Pola definiowane są jako łańcuchy znaków nie będących spacjami ani
tabulacjami, rozdzielone od siebie spacjami lub tabulacjami.

@item +@var{n}
@itemx -s @var{n}
@itemx --skip-chars=@var{n}
@opindex +@var{n}
@opindex -s
@opindex --skip-chars
Pomija @var{n} znaków przed sprawdzeniem unikalności.  
Jeśli użyto zarówno pomijania pól jak i znaków, pola są pomijane w pierwszej
kolejności.

@item -c
@itemx --count
@opindex -c
@opindex --count
Wypisuje razem z linią ile razy się ona powtórzyła.

@item -i
@itemx --ignore-case
@opindex -i
@opindex --ignore-case
Podczas porównywania linii ignoruje różnice pomiędzy małymi a dużymi literami.

@item -d
@itemx --repeated
@opindex -d
@opindex --repeated
@cindex zdublowane linie, wypisywanie
@cindex powtarzające się linie, wypisywanie
Wypisuje tylko linie powtarzające się.

@item -D
@itemx --all-repeated
@opindex -D
@opindex --all-repeated
@cindex powtarzające się linie, wypisywanie tylko takich
Wypisuje wszystkie linie powtarzające się i tylko linie powtarzające się.
Opcja ta przydatna jest głównie w połączeniu z innymi np. do ignorowania
wielkości liter lub porównywania tylko wybranych pól.
Jest to rozszerzenie GNU.
@c FIXME: give an example showing *how* it's useful

@item -u
@itemx --unique
@opindex -u
@opindex --unique
@cindex unikatowe linie, wypisywanie
Wypisuje tylko linie unikatowe.

@item -w @var{n}
@itemx --check-chars=@var{n}
@opindex -w
@opindex --check-chars
Określa ilość znaków, które należy porównywać w liniach, po pominięciu
wszystkich wskazanych pól i znaków.  Normalnie porównywana jest cała
reszta linii.

@end table


@node Wywołanie comm
@section @code{comm}: porównywanie dwu posortowanych plików liniami

@pindex comm
@cindex linia-po-linii, porównywanie
@cindex porównywanie posortowanych plików

@code{comm} wypisuje z dwóch plików wejściowych linie, które są wspólne
oraz linie, które są unikatowe.  Nazwa pliku @samp{-} oznacza standardowe
wejście.  Składnia:

@example
comm [@var{opcja}]@dots{} @var{plik1} @var{plik2}
@end example

@vindex LC_COLLATE
Oba pliki muszą być posortowane zanim będzie można użyć @code{comm}, przy
czym kończące znaki nowej linii są znaczące.  Przy sortowaniu powinien być
zastosowany porządek znaków określony ustawieniem narodowym @env{LC_COLLATE}.
Jeżeli plik wejściowy kończy się innym znakiem, to znak nowej linii jest
po cichu dokładany.  Polecenie @code{sort} bez opcji zawsze daje plik
będący odpowiednim wejściem dla @code{comm}.

@cindex odróżniające linie
@cindex wspólne linie
Bez opcji @code{comm} wypisuje wynik w trzech kolumnach.  Kolumna pierwsza
zawiera linie unikatowe dla @var{plik1}, kolumna druga zawiera linie
unikatowe dla @var{plik2}, a kolumna trzecia zawiera linie wspólne obu
plikom.  Kolumny oddzielone są pojedynczym znakiem tabulacji.
@c FIXME: when there's an option to supply an alternative separator
@c string, append `by default' to the above sentence.

@opindex -1
@opindex -2
@opindex -3
Opcje @samp{-1}, @samp{-2} i @samp{-3} wyłączają wypisywanie odpowiednich
kolumn.  Zobacz też @ref{Wspólne opcje}.

W odróżnieniu od niektórych innych narzędzi porównywania, @code{comm} podaje
kod zakończenia niezależny od wyniku porównania.  Przy normalnym zakończeniu
pracy daje kod zero.  Przy błędzie kończy pracę z kodem niezerowym.


@node Wywołanie tsort
@section @code{tsort}: sortowanie topologiczne

@pindex tsort
@cindex sortowanie topologiczne
@cindex topologiczne, sortowanie

@code{tsort} wykonuje sortowanie topologiczne zadanego @var{pliku} lub
standardowego wejścia jeśli nie podano pliku lub podano plik o nazwie
@samp{-}.  Składnia:

@example
tsort [@var{opcja}] [@var{plik}]
@end example

@code{tsort} czyta wejście jako pary łańcuchów, oddzielanych odstępami,
opisujące częściowe uporządkowanie.  Wyjściem jest całkowite uporządkowanie
odpowiadające zadanemu uporządkowaniu częściowemu.

[tłum.:
Pary łańcuchów są nazwami węzłów wyznaczających początek i koniec krawędzi
grafu skierowanego.
Jeżeli węzeł nie jest połączony z innymi, można do sortowania topologicznego
zapisać go jako połączony z samym sobą.]

Na przykład:

@example
tsort <<EOF
a b c
d
e f
b c d e
EOF
@end example

@noindent
da jako wynik:

@example
a
b
c
d
e
f
@end example

@code{tsort} rozpoznaje pętle (cykle grafu) w wejściu i wypisuje pierwszą
napotkaną na standardowe wyjście błędów.

Zauważ, że dla danego uporządkowania częściowego zazwyczaj nie istnieje
unikatowe uporządkowanie całkowite.

Jedynymi opcjami są @samp{--help} i @samp{--version}.  @xref{Wspólne opcje}.


@node Wywołanie ptx
@section @code{ptx}: tworzenie indeksu permutacyjnego

@pindex ptx

@code{ptx} czyta plik tekstowy i zasadniczo tworzy indeks permutacyjny,
z każdym słowem kluczowym umieszczonym we własnym kontekście.
Schemat wywołania jest jednym z:

@example
ptx [@var{opcja} @dots{}] [@var{plik} @dots{}]
ptx -G [@var{opcja} @dots{}] [@var{wejście} [@var{wyjście}]]
@end example

Opcja @samp{-G} (lub równoważna jej @samp{--traditional}) wyłącza wszystkie
rozszerzenia GNU i przywraca tryb tradycyjny, wprowadzając w ten sposób pewne
ograniczenia i zmieniając niektóre wartości domyślne opcji programu.
Jeżeli nie podano @samp{-G}, to rozszerzenia GNU są zawsze aktywne. Są one
opisane w odpowiednich miejscach tej dokumentacji.
Pełna lista znajduje się w części @xref{Zgodność w ptx}.

Poszczególne opcje wyjaśniono w dalszych sekcjach.

Przy włączonych rozszerzeniach GNU, po opcjach może wystąpić zero, jeden
lub kilka @var{plików}.  Jeżeli nie podano plików, to program czyta
standardowe wejście.  Jeżeli podano jakieś pliki wejściowe, to są one czytane
naraz tak, jakby były sklejone.  Są jednak zupełnie rozdzielone kontekstowo,
i, przy żądaniu automatycznego tworzenia odnośników, nazwy plików i numery
linii odnoszą się do poszczególnych tekstowych plików wejściowych.
We wszystkich przypadkach program tworzy indeks permutacyjny na standardowym
wyjściu.

Przy @emph{wyłączonych} rozszerzeniach GNU, to znaczy, gdy program działa
w tradycyjnym trybie pracy, oprócz opcji może istnieć zero, jeden lub dwa
parametry.  Jeśli nie ma parametrów, to program czyta standardowe wejście
i tworzy indeks permutacyjny na standardowym wyjściu.  Jeżeli jest tylko
jeden parametr, to określa on nazwę pliku wejściowego, z którego, zamiast
ze standardowego wejścia, będzie prowadzony odczyt.  Jeżeli podano dwa
parametry, to określają one odpowiednio plik wejściowy i tworzony plik
wyjściowy.  @emph{Bądź bardzo ostrożny}, gdyż w tym przypadku
zawartość pliku podanego jako przez drugi parametr jest niszczona.
Zachowanie takie podyktowane jest wyłącznie zgodnością z @code{ptx}
Systemu V, gdyż Standardy GNU stanowczo odradzają parametry wyjściowe
nie poprzedzane opcją.

Zauważ, że jako @emph{dowolną} z nazw plików wejściowych lub wartość opcji
określającej plik można podać pojedynczy myślnik @kbd{-}.  W takim przypadku
przyjmowane jest standardowe wejście.  Jednak nie ma sensu używanie tej
konwencji więcej niż raz w danym wywołaniu programu.

@menu
* Ogólne opcje ptx::            Opcje wpływające na ogólne działanie.
* Wybór zestawu znaków ptx::    Kwestie stosowanego zestawu znaków.
* Przetwarzanie wejścia ptx::   Wybór pól, kontekstów, słów kluczowych.
* Formatowanie wyników ptx::    Typy formatów wyjściowych, rozmiary pól.
* Zgodność w ptx::              Rozszerzenia GNU w @code{ptx}
@end menu


@node Ogólne opcje ptx
@subsection Ogólne opcje

@table @samp

@item -C
@itemx --copyright
Wypisuje krótką notę o prawach autorskich i warunkach kopiowania, następnie
kończy pracę bez dalszego przetwarzania.

@item -G
@itemx --traditional
Jak już wyjaśniono, wyłącza wszystkie rozszerzenia GNU @code{ptx} i przełącza
się na tradycyjny tryb działania.

@item --help
Wyświetla krótką informację pomocy na standardowym wyjściu, następnie kończy
pracę bez dalszego przetwarzania.

@item --version
Wypisuje numer wersji programu na standardowym wyjściu, następnie kończy
pracę bez dalszego przetwarzania.

@end table


@node Wybór zestawu znaków ptx
@subsection Wybór zestawu znaków

Przy obecnej konfiguracji, program zakłada, że plik jest zakodowany
przy zastosowaniu 8-bitowego ISO 8859-1, zwanego też zestawem znaków
Latin-1, @emph{chyba że} zostanie skompilowany dla MS-DOS, wówczas używa
zestawu IBM-PC.  (Nic nie wiadomo o tym, by GNU @code{ptx} nadal działał
na mniejszych maszynach MS-DOS.)  W porównaniu z 7-bitowym @sc{ascii}, zestaw
znaków będących literami jest więc inny.  Fakt ten zmienia zachowanie
dopasowywania wyrażeń regularnych.  Stąd też, domyślne wyrażenie regularne
dla słowa kluczowego dopuszcza akcentowane litery i litery spoza alfabetu
angielskiego.  Sortowanie słów kluczowych jest jednak nadal niewykończone:
przestrzega ślepo odnośnego uporządkowania zestawu znaków.

@table @samp

@item -f
@itemx --ignore-case
Do celów sortowania zamienia małe litery na duże.

@end table


@node Przetwarzanie wejścia ptx
@subsection Wybór słów i przetwarzanie wejścia

@table @samp

@item -b @var{plik}
@item --break-file=@var{plik}

Zapewnia alternatywny (dla @samp{-W}) sposób opisywania, jakie znaki tworzą
słowa.  Podany w tej opcji @var{plik} zawiera listę znaków, które
@emph{nie mogą} być częścią jednego słowa.  Plik ten zwany jest @dfn{plikiem
podziału} (@dfn{Break file}).  Każdy ze znaków nie będący częścią pliku
podziału jest składową słów.  Jeżeli podano obie opcje: @samp{-b} i @samp{-W},
to @samp{-W} ma pierwszeństwo a @samp{-b} jest ignorowana.

Przy włączonych rozszerzeniach GNU jedynym sposobem uniknięcia interpretacji
znaku nowej linii jako znaku podziału jest zapisanie wszystkich znaków
podziału w pliku nie zawierającym w ogóle znaku nowej linii, nawet na końcu.
Przy wyłączonych rozszerzeniach GNU spacje, tabulacje i znaki nowej linii
zawsze uważane są za znaki podziału, nawet jeśli nie ma ich w pliku podziału.

@item -i @var{plik}
@itemx --ignore-file=@var{plik}

Plik związany z tą opcją zawiera listę słów, które nigdy nie powinny być
brane jako słowa kluczowe w skorowidzu wyjściowym.  Zwany jest @dfn{plikiem
pomijania} (@dfn{Ignore file}).  Zawiera w każdej linii dokładnie jedno słowo.
Koniec linii rozdzielającej słowa nie podlega opcji @samp{-S}.

Istnieje domyślny plik pomijania używany przez @code{ptx}, gdy nie podano
niniejszej opcji, zwykle w @file{/usr/local/lib/eign}, jeśli nie zmieniono
tego podczas instalacji.  Chcąc deaktywować domyślny plik pomijania należy
podać plik @code{/dev/null}.

@item -o @var{plik}
@itemx --only-file=@var{plik}

Plik związany z tą opcją zawiera listę słów, które pozostaną w skorowidzu
wyjściowym. Każde słowo nie ujęte w tym pliku jest pomijane. Plik zwany
jest @dfn{plikiem wyłączności} (@dfn{Only file}).  Zawiera po jednym słowie
w każdej linii.  Koniec linii rozdzielającej słowa nie podlega opcji @samp{-S}.

Dla pliku wyłączności nie ma ustawienia domyślnego. W przypadku wystąpienia
zarówno pliku pomijania jak i pliku wyłączności słowo uważane jest
za kluczowe tylko wtedy, gdy podano je w pliku wyłączności a nie podano
w pliku pomijania.

@item -r
@itemx --references

W każdej linii wejściowej początkowa sekwencja nie-białych znaków zostanie
przyjęta za odnośnik, którego celem jest identyfikacja tej linii
w utworzonym indeksie permutacyjnym.  Więcej na temat tworzenia odnośników
zob. @xref{Formatowanie wyników ptx}.  Użycie tej opcji zmienia domyślną
wartość opcji @samp{-S}.

Przy wykorzystaniu opcji @samp{-r} program nie próbuje zbyt usilnie
usuwać odnośników z kontekstów wyjścia, ale udaje mu się to poprawnie
@emph{jeśli} kontekst kończy się dokładnie na znaku nowej linii.
Jeżeli opcji tej użyto z domyślną wartością opcji @samp{-S}, lub jeśli
wyłączone są rozszerzenia GNU, warunek ten jest zawsze spełniony.
Odnośniki są wówczas całkowicie wykluczone z kontekstów wynikowych.

@item -S @var{regexp}
@itemx --sentence-regexp=@var{regexp}

Określa, jakie wyrażenie regularne będzie opisywać koniec linii lub koniec
zdania.  W rzeczywistości istnieje inne rozróżnienie pomiędzy końcami linii
czy końcami zdań niż wynik tego wyrażenia regularnego, a granice linii
wejściowych nie mają żadnego specjalnego znaczenia poza tą opcją.  Domyślnie,
gdy włączone są rozszerzenia GNU, a nie jest używana opcja @samp{-r},
używane są końce zdań.  W tym przypadku używane jest dokładne @var{regexp}
zapożyczone z GNU emacsa:

@example
[.?!][]\"')@}]*\\($\\|\t\\|  \\)[ \t\n]*
@end example

Gdy wyłączone są rozszerzenia GNU lub użyta opcja @samp{-r}, używane są
końce linii.  W tym przypadku, domyślnym wyrażeniem regularnym jest po prostu:

@example
\n
@end example

Zastosowanie pustego @var{regexp} jest równoważne całkowitemu wyłączeniu
rozpoznawania końca linii lub końca zdania.  Cały plik jest wówczas traktowany
jak jedna długa linia lub zdanie.  Użytkownik może również zakazać
generowania wszystkich flag obcinania, korzystając z opcji @samp{-F ""}.
@xref{Regexps, , Syntax of Regular Expressions, emacs, The GNU Emacs Manual}.

Gdy słowa kluczowe trafiają się blisko początku zdania lub linii wejściowej,
często tworzy to niewykorzystany obszar na początku wynikowej linii
kontekstu.  Gdy słowa kluczowe są blisko końca zdania lub linii wejściowej,
często tworzy to niewykorzystany obszar na końcu wynikowej linii.
Program usiłuje wypełnić te obszary zawijając kontekst w ich wnętrzu.
Końcówka zdania (linii wejściowej) używana jest do wypełnienia
niewykorzystanego obszaru po lewej stronie linii wynikowej,
początek używany jest do wypełnienia obszaru po prawej.

Dla wygody użytkownika rozpoznawanych jest wiele zwyczajowych sekwencji
specjalnych (poprzedzanych odwrotnym ukośnikiem), jakie występują w C.
Są one przekształcane na odpowiadające im znaki przez sam @code{ptx}.

@item -W @var{regexp}
@itemx --word-regexp=@var{regexp}

Określa, jakie wyrażenie regularne będzie opisywać każde ze słów kluczowych.
Domyślnie, jeśli włączone są rozszerzenia GNU, słowo jest sekwencją liter:
używanym @var{regexp} jest @samp{\w+}.  Gdy rozszerzenia GNU są wyłączone,
słowem jest domyślnie wszystko kończące się spacją, tabulacją lub znakiem
nowej linii: używanym @var{regexp} jest @samp{[^ \t\n]+}.

Puste wyrażenie regularne jest równoważne nie podaniu tej opcji, pozwalając
zadziałać domyślnemu.
@xref{Regexps, , Syntax of Regular Expressions, emacs, The GNU Emacs Manual}.

Dla wygody użytkownika rozpoznawanych jest wiele zwyczajowych sekwencji
specjalnych (poprzedzanych odwrotnym ukośnikiem), jakie występują w C.
Są one przekształcane na odpowiadające im znaki przez sam @code{ptx}.

@end table


@node Formatowanie wyników ptx
@subsection Formatowanie wyjścia ptx

Format wynikowy jest sterowany głównie opcjami @samp{-O} i @samp{-T},
opisanych poniżej.  Jeżeli nie wybrano ani opcji @samp{-O} ani @samp{-T},
a włączone są rozszerzenia GNU, to program wybiera format wyjściowy
odpowiedni dla terminala uproszczonego.  Każde wystąpienie słowa kluczowego
wypisywane jest na środku jednej linii, otoczone przez swój lewy i prawy
kontekst.  Pola są poprawnie wyrównywane, więc skorowidz wynikowy można
z łatwością studiować.
Jeżeli wybrano automatyczne odnośniki opcją @samp{-A} i są one wypisane przed
lewym kontekstem, to jest, jeżeli @emph{nie} wybrano opcji @samp{-R}, to po
odnośniku dodawany jest dwukropek.  Ładnie współpracuje to z przetwarzaniem
przez GNU Emacsa @code{next-error}.  W tym domyślnym formacie wyjściowym,
każdy biały znak, jak znak nowej linii czy tabulacja, jest po prostu
zamieniany na dokładnie jedną spację, bez specjalnych prób kompresowania
ciągu kolejnych spacji.  W przyszłości może się to zmienić. Za wyjątkiem
białych znaków, każdy inny znak odnośnego zestawu 256 znaków przekazywany
jest dosłownie.

Format wyjściowy sterowany jest dodatkowo poniższymi opcjami.

@table @samp

@item -g @var{liczba}
@itemx --gap-size=@var{liczba}

Określa rozmiar minimalnej przerwy pomiędzy polami w linii wyjściowej.

@item -w @var{liczba}
@itemx --width=@var{liczba}

Określa maksymalną szerokość każdej ostatecznej linii wyjścia.  Jeżeli
stosowane są odnośniki, to są one ujęte lub nie ujęte w tej szerokości
w zależności od wartości opcji @samp{-R}.  Jeżeli nie użyto tej opcji,
to znaczy, gdy odnośniki wypisywane są przed lewym kontekstem, maksymalna
szerokość wyjścia bierze pod uwagę maksymalną długość wszystkich odnośników.
Jeżeli użyto opcji @samp{-R}, to znaczy, gdy odnośniki wypisywane są po
prawym kontekście, maksymalna szerokość nie uwzględnia miejsca zajętego
przez odnośniki ani przerw, które je poprzedzają.

@item -A
@itemx --auto-reference

Tworzy automatyczne odnośniki. Każda linia wejściowa będzie posiadać
automatyczny odnośnik utworzony z nazwy pliku i liczby porządkowej linii,
z pojedynczym dwukropkiem między nimi.  Jednak nazwa pliku będzie pusta, jeśli
odczytywane jest standardowe wejście.  Jeżeli podano zarówno opcję @samp{-A}
jak i @samp{-r}, to wejściowy odnośnik jest nadal czytany i przeskakiwany,
ale podczas wypisywania wyników używany jest automatyczny odnośnik,
przesłaniając wejściowy odnośnik.

@item -R
@itemx --right-side-refs

W domyślnym formacie wyjściowym, gdy nie jest używana opcja @samp{-R},
każdy odnośnik utworzony w wyniku opcji @samp{-r} lub @samp{-A} podawany
jest w skrajnej prawej części linii wyjściowej, po prawym kontekście.
W domyślnym formacie wyjściowym, przy podanej opcji @samp{-R}, odnośniki
są natomiast podawane na początku linii wyjściowej, przed lewym kontekstem.
W każdym innym formacie wyjściowym opcja @samp{-R} jest niemal ignorowana,
z wyjątkiem tego, że szerokość odnośników @emph{nie jest} wówczas jest
wliczana do całkowitej szerokości wyjścia podanej przez @samp{-w}.

Opcja ta jest wybierana automatycznie przy wyłączeniu rozszerzeń GNU.

@item -F @var{łańcuch}
@itemx --flac-truncation=@var{łańcuch}

Żąda, by każde obcięcie w wyjściu było zgłoszone za pomocą @var{łańcucha}.
Większość pól wynikowych teoretycznie rozciąga się w stronę początku lub końca
bieżącej linii, lub bieżącego zdania, jak ustalono opcją @samp{-S}.
Istnieje jednak maksymalna dozwolona szerokość linii wyjściowej, zmieniana
opcją @samp{-w}, która jest następnie dzielona na części dla różnych pól
wyjściowych.  Jeżeli pole nie może się rozciągać aż do początku lub końca
bieżącej linii i mieścić w zadanej szerokości, wówczas następuje obcięcie.
Domyślnie łańcuchem oznaczający obcięcie jest pojedynczy ukośnik,
jak w @samp{-F /}.

@var{łańcuch} może mieć więcej niż jeden znak, jak w @samp{-F ...}.
W szczególnym przypadku, gdy @var{łańcuch} jest pusty (@samp{-F ""}),
oznaczanie obcięcia jest wyłączane.  Nie są wówczas dołączane żadne znaczniki
obcięcia.

Dla wygody użytkownika rozpoznawanych jest wiele zwyczajowych sekwencji
specjalnych (poprzedzanych odwrotnym ukośnikiem), jakie występują w C.
Są one przekształcane na odpowiadające im znaki przez sam @code{ptx}.

@item -M @var{łańcuch}
@itemx --macro-name=@var{łańcuch}

Określa inny @var{łańcuch}, jaki ma być stosowany zamiast @samp{xx} przy
tworzeniu wyjścia odpowiedniego dla @code{nroff}, @code{troff} lub @TeX{}.

@item -O
@itemx --format=roff

Wybiera format wyjściowy odpowiedni dla przetwarzania przez @code{nroff}
lub @code{troff}.  Linie wyjściowe są typu:

@example
.xx "@var{końc}" "@var{przed}" "@var{słowoklucz_i_dalej}" "@var{pocz}" "@var{odnośnik}"
@end example

więc możliwe będzie napisanie makra @samp{.xx} roff-a do obsługi składu
otrzymanego wyjścia.  Jest to domyślny format wyjścia, gdy wyłączone są
rozszerzenia GNU.  Opcją @samp{-M} można zmienić @samp{xx} na inną nazwę
makra.

W tym formacie każdy znak nie-graficzny, jak znak nowej linii czy tabulacja,
jest po prostu zamieniany na dokładnie jedną spację, bez specjalnych prób
kompresowania ciągu kolejnych spacji.  Wszystkie znaki cytowania: @kbd{"}
są podwajane, by zostały poprawnie przetworzone przez @code{nroff}
czy @code{troff}.

@item -T
@itemx --format=tex

Wybiera format wyjściowy odpowiedni dla przetwarzania przez @TeX{}.
Linie wyjściowe są typu:

@example
\xx @{@var{końc}@}@{@var{przed}@}@{@var{słowoklucz}@}@{@var{po}@}@{@var{pocz}@}@{@var{odnośnik}@}
@end example

@noindent
więc możliwe będzie napisanie definicji @code{\xx} do obsługi składu
otrzymanego wyjścia.  Zauważ, że gdy nie są tworzone odnośniki, to znaczy,
gdy nie użyto ani opcji @samp{-A} ani @samp{-r}, nie pojawia się ostatni
parametr każdego wywołania @code{\xx}.  Opcją @samp{-M} można zmienić
@samp{xx} na inną nazwę makra.

W tym formacie niektóre znaki specjalne, jak @kbd{$}, @kbd{%}, @kbd{&},
@kbd{#} i @kbd{_} są automatycznie chronione przed cytowaniem przez
poprzedzenie ich odwrotnym ukośnikiem.  Nawiasy klamrowe @kbd{@{}, @kbd{@}}
też są chronione w ten sposób, ale również ujęte między parę znaków dolara,
by wymusić tryb matematyczny.  Sam odwrotny ukośnik generuje sekwencję
@code{\backslash@{@}}.  Daszki (circumflex) i tyldy nad literami
generują odpowiednio sekwencje @code{^\@{ @}} i @code{~\@{ @}}.  Inne znaki
diakrytyczne w odnośnym zestawie znaków dają odpowiednie sekwencje @TeX{}-a,
na ile jest to możliwe.  Inne znaki nie-graficzne, jak znak nowej linii,
i tabulacja, i wszystkie inne znaki nie będące częścią @sc{ascii},
są po prostu zamieniane na dokładnie jedną spację, bez specjalnych prób
kompresowania ciągu kolejnych spacji.  Proszę dać znać autorowi jak
ulepszyć przetwarzanie tych znaków specjalnych dla @TeX{}-a.

@end table


@node Zgodność w ptx
@subsection Rozszerzenia GNU w @code{ptx}

Ta wersja @code{ptx} zawiera kilka cech nieistniejących w @code{ptx}
z Systemu V.  Można je wyeliminować przy pomocy opcji @samp{-G} linii
poleceń, chyba że zostanie ona przesłonięta przez inne opcje.  Niektóre
rozszerzenia nie mogą być przywrócone przez przesłonięcie, zatem prostą
zasadą jest unikanie @samp{-G} jeżeli chce się korzystać z rozszerzeń GNU.
Poniżej podano różnice pomiędzy tym programem a @code{ptx} z Systemu V.

@itemize @bullet

@item
Niniejszy program potrafi czytać wiele plików wejściowych naraz, zawsze
zapisuje powstały skorowidz na standardowe wyjście.  Z drugiej strony,
@code{ptx} z System V czyta tylko jeden plik i tworzy wynik na standardowym
wyjściu lub, jeśli w wywołaniu polecenia podano drugi parametr @var{plik},
w zadanym @var{pliku}.

Posługiwanie się parametrami wyjścia nie poprzedzonymi opcjami jest dość
niebezpieczną praktyką, której GNU w miarę możliwości unika.  Zatem, przy
posługiwaniu się @code{ptx} przenośnie między GNU a System V, powinno się
zwracać uwagę, by zawsze używać go z jednym plikiem wejściowym i zawsze
oczekiwać wyniku na standardowym wyjściu.  Można również automatycznie
skonfigurować wywoływania @code{ptx} z opcją @samp{-G} w produktach go
używających, jeśli konfigurator zauważy, że instalowany @code{ptx} akceptuje
@samp{-G}.

@item
Jedynymi opcjami dostępnymi w @code{ptx} z System V są @samp{-b}, @samp{-f},
@samp{-g}, @samp{-i}, @samp{-o}, @samp{-r}, @samp{-t} i @samp{-w}.  
Wszystkie inne opcje są rozszerzeniami GNU i nie są powtórzone
w tym wyliczeniu.  Ponadto, niektóre opcje mają nieco inne znaczenie
przy włączonych rozszerzeniach GNU, jak wyjaśniono poniżej.

@item
Domyślnie, skorowidz wyjściowy nie jest sformatowany dla @code{troff}
czy @code{nroff}.  Zamiast tego sformatowany jest dla terminala uproszczonego.
Wyjście dla @code{troff} lub @code{nroff} można wybrać opcją @samp{-O}.

@item
Dopóki nie użyto opcji @samp{-R} maksymalna szerokość odnośników jest
odejmowana od całkowitej szerokości linii wyjściowej.  Przy wyłączonych
rozszerzeniach GNU, szerokość odnośników nie jest uwzględniana w obliczeniach
szerokości linii wyjściowej.

@item
Czytane i przetwarzane z pliku wejściowego są zawsze wszystkie z 256 znaków
zestawu, nawet znaki @kbd{NUL}, bez niepoprawnego efektu, nawet gdy
rozszerzenia GNU są wyłączone.  Jednak @code{ptx} z Systemu V nie przyjmuje
8-bitowych znaków, odrzucanych jest kilka znaków sterujących, a tylda
@kbd{~} jest potępiona.

@item
Długość linii wejściowej jest ograniczona tylko dostępną pamięcią, nawet
przy wyłączonych rozszerzeniach GNU.  Jednak @code{ptx} z Systemu V
przetwarza tylko 200 pierwszych znaków linii.

@item
Domyślnymi znakami podziału (nie-słowami) są wszystkie znaki oprócz liter
odnośnego zestawu znaków, diakrytycznych lub nie.  Przy wyłączonych
rozszerzeniach GNU domyślnymi znakami podziału są wyłącznie spacja, tabulacja
i znak nowej linii.

@item
Program lepiej posługuje się szerokością linii wyjściowej. Jeżeli wyłączono
rozszerzenia GNU, program próbuje zamiast tego imitować @code{ptx}
z System V, ale istnieje kilka niewielkich zakłóceń, których niniejszy
program całkowicie nie powiela.

@item
Użytkownik może podać równocześnie plik pomijania i plik wyłączności.
W @code{ptx} z System V nie jest to dozwolone.

@end itemize


@node Działania na polach wewnątrz linii
@chapter Działania na polach wewnątrz linii

@menu
* Wywołanie cut::         wypisywanie wybranych części linii
* Wywołanie paste::       zlepianie linii plików
* Wywołanie join::        łączenie linii według wspólnego pola
@end menu


@node Wywołanie cut
@section @code{cut}: wypisywanie wybranych części linii

@pindex cut
@code{cut} wypisuje na standardowym wyjściu wybrane części każdej linii
każdego z plików wejściowych albo standardowego wejścia jeśli nie podano
żadnego lub podano plik zwany @samp{-}.  Składnia:

@example
cut [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

W poniższej tabeli, @var{lista-bajtów}, @var{lista-znaków} i @var{lista-pól}
to jedna lub więcej liczb lub zakresów (dwu liczb rozdzielonych myślnikiem),
oddzielone przecinkami.  Pierwszy bajt, znak i pole mają numer 1.  Można
podawać niekompletne zakresy: @samp{-@var{m}} oznacza @samp{1-@var{m}};
@samp{@var{n}-} oznacza @samp{@var{n}} aż do końca linii lub ostatniego pola.

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -b @var{lista-bajtów}
@itemx --bytes=@var{lista-bajtów}
@opindex -b
@opindex --bytes
Wypisuje tylko bajty na pozycjach wyliczonych w @var{lista-bajtów}.
Znaki tabulacji i backspace są traktowane jak wszystkie inne znaki;
zajmują po bajcie każdy.

@item -c @var{lista-znaków}
@itemx --characters=@var{lista-znaków}
@opindex -c
@opindex --characters
Wypisuje tylko znaki na pozycjach wyliczonych w @var{lista-znaków}.
Obecnie to samo co @samp{-b}, ale umiędzynarodowienie to zmieni.
Znaki tabulacji i backspace są traktowane jak wszystkie inne znaki;
zajmują po bajcie każdy.

@item -f @var{lista-pól}
@itemx --fields=@var{lista-pól}
@opindex -f
@opindex --fields
Wypisuje tylko pola wyliczone w @var{lista-pól}.
Pola domyślnie rozdzielane są znakiem tabulacji.

@item -d @var{sep-wej}
@itemx --delimiter=@var{sep-wej}
@opindex -d
@opindex --delimiter
Dla @samp{-f}, pola wejściowe są rozdzielone pierwszym znakiem @var{sep-wej}
(domyślnie tabulacją).

@item -n
@opindex -n
Nie rozdziela znaków wielobajtowych (obecnie nie funkcjonuje).

@item -s
@itemx --only-delimited
@opindex -s
@opindex --only-delimited
Dla @samp{-f}, nie wypisuje linii, które nie zawierają znaku separatora pól.

@itemx --output-delimiter=@var{sep-wyj}
@opindex --output-delimiter
Dla @samp{-f}, pola wynikowe są rozdzielane łańcuchem @var{sep-wyj}.
Domyślnie używany jest tu separator wejściowy.

@end table


@node Wywołanie paste
@section @code{paste}: zlepianie linii plików

@pindex paste
@cindex zlepianie linii plików
@cindex scalanie linii plików
@cindex łączenie linii plików

@code{paste} wypisuje na standardowym wyjściu linie składające się z kolejno
odpowiadających sobie linii każdego z podanych plików, oddzielonych
znakiem tabulacji.
Jeśli nie podano żadnych plików lub plik o nazwie @samp{-}, używane jest
standardowe wejście.

Składnia:

@example
paste [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -s
@itemx --serial
@opindex -s
@opindex --serial
Wkleja linie jednego pliku na raz, a nie naprzemiennie po jednej linii
z każdego pliku.

@item -d @var{lista-sep}
@itemx --delimiters @var{lista-sep}
@opindex -d
@opindex --delimiters
Zamiast tabulacji do oddzielania połączonych linii używa po kolei
ograniczników z @var{listy-sep}.  Gdy lista zostanie wyczerpana, zaczyna
na nowo od jej początku.

@end table


@node Wywołanie join
@section @code{join}: łączenie linii według wspólnego pola

@pindex join
@cindex pole połączeniowe, łączenie wg
@cindex połączeniowe pole, łączenie wg
@cindex wspólne pole, łączenie wg

@code{join} wypisuje na standardowe wyjście linię dla każdej pary linii
wejściowych o identycznych polach połączeniowych.  Składnia:

@example
join [@var{opcja}]@dots{} @var{plik1} @var{plik2}
@end example

@vindex LC_COLLATE
Każdą z nazw plików (ale nie obydwoma) może być @samp{-}, oznaczające
standardowe wejście.  @var{plik1} i @var{plik2} powinny być już uprzednio
posortowane w tekstowym porządku rosnącym (nie numerycznie) według pól
połączeniowych, z zastosowaniem porządku znaków określonego ustawieniem
narodowym @env{LC_COLLATE}.  Sortowanie winno być wykonane z pominięciem
znaków pustych na początku pola połączeniowego, tak jak działa @code{sort}
z podaną opcją @samp{-b}, chyba że podano opcję @samp{-t}, zmieniającą znak
rozdzielający pola.  Jeżeli podano opcję @samp{--ignore-case}, linie powinny
być posortowane bez rozróżniania wielkości znaków w polu połączeniowym, jak
w @code{sort -f}.

Wartości domyślne to: pola połączeniowe są pierwszymi polami w każdej
linii; pola w wejściu rozdzielone są jednym lub więcej znakami pustymi;
znaki puste zaczynające linię są ignorowane; pola w wyjściu rozdzielone
są spacją; każda linia wyjścia składa się z pola połączeniowego, pozostałych
pól z @var{plik1}, a następnie pozostałych pól z @var{plik2}.

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -a @var{numer-pliku}
@opindex -a
Oprócz normalnego wyjścia, wypisuje też niesparowane linie z pliku
@var{numer-pliku} (@samp{1} lub @samp{2}).

@item -e @var{łańcuch}
@opindex -e
Zastępuje @var{łańcuchem} te puste pola wynikowe, których brakuje na wejściu.

@item -i
@itemx --ignore-case
@opindex -i
@opindex --ignore-case
Ignoruje różnice między małymi i dużymi literami przy porównywaniu kluczy.
Pola wejściowe muszą być wówczas uporządkowane według tej samej reguły.
Do utworzenia takiego uporządkowania należy użyć @samp{sort -f}.

@item -1 @var{pole}
@itemx -j1 @var{pole}
@opindex -1
@opindex -j1
Łączy według pola @var{pole} (dodatnia liczba całkowita) pliku 1.

@item -2 @var{pole}
@itemx -j2 @var{pole}
@opindex -2
@opindex -j2
Łączy według pola @var{pole} (dodatnia liczba całkowita) pliku 2.

@item -j @var{pole}
Równoważne @samp{-1 @var{pole} -2 @var{pole}}.

@item -o @var{lista-pól}@dots{}
Konstruuje każdą linię wyjścia według formatu zawartego w @var{liście-pól}.
Każdy element listy jest albo pojedynczym znakiem @samp{0} albo ma postać
@var{m.n}, gdzie @var{m} to numeru pliku (@samp{1} albo @samp{2}), zaś @var{n}
- numer pola (liczba naturalna).

Specyfikacja pola postaci @samp{0} oznacza pole połączeniowe.
W większości przypadków funkcjonalność specyfikacji @samp{0} można zastąpić
użyciem bezpośredniego zapisu @var{m.n}, odpowiedniego dla pola
połączeniowego.  Jednak przy wydruku linii niesparowanych (użycie opcji
@samp{-a} lub @samp{-v}) nie można w żaden sposób określić takiego pola
przez użycie @var{m.n} w liście pól jeżeli linie niesparowane występują
w obu plikach.  Dla uzyskania takiej funkcjonalności @code{join} w @sc{posix}
wynaleziono notację @samp{0}.

Elementy listy pól oddzielone są przecinkami lub znakami pustymi.
Można podawać wielokrotne argumenty @var{lista-pól} po pojedynczej
opcji @samp{-o}; wartości wszystkich list podanych po @samp{-o} są łączone
razem.  Zadana lista pól jest stosowana do wszystkich linii wyjściowych
- także tworzonych wskutek działania opcji @samp{-a} czy @samp{-v}.

@item -t @var{znak}
Używa znaku @var{znak} jako separatora pól wejścia i wyjścia.

@item -v @var{numer-pliku}
Wypisuje tylko niesparowane linie z pliku @var{numer-pliku} (1 albo 2),
zamiast normalnego wyjścia.

@end table

Dodatkowo, kiedy GNU @code{join} wywoływane jest z dokładnie jednym
argumentem, rozpoznawane są opcje @samp{--help} i @samp{--version}.
@xref{Wspólne opcje}.


@node Działania na znakach
@chapter Działania na znakach

@cindex działania na znakach

Te polecenia działają na pojedynczych znakach.

@menu
* Wywołanie tr::          zamiana, ściskanie, usuwanie znaków
* Wywołanie expand::      zamiana tabulacji na spacje
* Wywołanie unexpand::    zamiana spacji na tabulacje
@end menu


@node Wywołanie tr
@section @code{tr}: zamiana, ściskanie, usuwanie znaków

@pindex tr

Składnia:

@example
tr [@var{opcja}]@dots{} @var{zestaw1} [@var{zestaw2}]
@end example

@code{tr} kopiuje standardowe wejście na standardowe wyjście, dokonując
jednej z następujących operacji:

@itemize @bullet
@item
przekład, opcjonalnie ściśnięcie powtórzonych znaków w wyniku,
@item
ściśnięcie powtórzonych znaków,
@item
usunięcie znaków,
@item
usunięcie znaków, potem ściśnięcie powtórzonych znaków w wyniku.
@end itemize

Argumenty @var{zestaw1} i (jeśli podany) @var{zestaw2} definiują
uporządkowane zbiory znaków.
@c  , poniżej nazwane @var{zb1} i @var{zb2}.
Owe zbiory to znaki z wejścia, na których działa @code{tr}.
Opcja @samp{--complement} (@samp{-c}) zastępuje @var{zestaw1} jego
dopełnieniem (wszystkimi znakami, których nie ma w @var{zestaw1}).

@menu
* Zestawy znaków::        Określanie zestawów znaków.
* Konwersja::             Wymiana jednych znaków na inne.
* Ściskanie::             Ściskanie powtórzeń i usuwanie.
* Ostrzeżenia w tr::      Komunikaty ostrzegawcze w tr.
@end menu


@node Zestawy znaków
@subsection Określanie zestawów znaków

@cindex określanie zestawów znaków

Format argumentów @var{zestaw1} i @var{zestaw2} przypomina format
wyrażeń regularnych; jednakowoż, nie są to wyrażenia regularne, lecz
tylko listy znaków.  Większość znaków w tych łańcuchach reprezentuje
po prostu same siebie, ale łańcuchy mogą też, dla wygody, zawierać wyliczone
poniżej skróty.  Niektórych z nich można użyć tylko w @var{zestaw1} lub
@var{zestaw2}, jak zaznaczono poniżej.

@table @asis

@item Sekwencje z odwrotnym ukośnikiem
@cindex backslash
@cindex sekwencje specjalne
@cindex sekwencje z odwrotnym ukośnikiem

Odwrotny ukośnik, po którym nie następuje znak spośród wymienionych
poniżej powoduje komunikat o błędzie.

@table @samp
@item \a
Control-G.
@item \b
Control-H.
@item \f
Control-L.
@item \n
Control-J.
@item \r
Control-M.
@item \t
Control-I.
@item \v
Control-K.
@item \@var{ooo}
Znak o wartości podanej przez @var{ooo}, czyli od 1 do 3 cyfr ósemkowych.
@item \\
Odwrotny ukośnik (backslash).
@end table

@item Zakresy
@cindex zakresy

Notacja @samp{@var{m}-@var{n}} interpretowana jest jako wszystkie znaki
od @var{m} do @var{n}, w porządku rosnącym.  @var{m} powinno występować
w porządku sortowania przed @var{n}; jeśli tak nie jest, następuje błąd.
Dla przykładu, @samp{0-9} jest tym samym co @samp{0123456789}. Chociaż GNU
@code{tr} nie obsługuje składni System V używającej nawiasów kwadratowych
do zamykania zakresów, tłumaczenia określone w tym formacie nadal będą
działać, o ile nawiasy w @var{zakres1} odpowiadają identycznym nawiasom
w @var{zakres2}.

@item Powtórzone znaki
@cindex powtórzone znaki

Notacja @samp{[@var{c}*@var{n}]} w @var{zestaw2} interpretowana jest jako
@var{n} kopii znaku @var{c}.  Tak więc @samp{[y*6]} jest tym samym co
@samp{yyyyyy}.  Notacja @samp{[@var{c}*]} w @var{zestaw2} rozszerzana jest
na tyle kopii @var{c}, ile potrzeba na to aby @var{zestaw2} był tak długi
jak @var{zestaw2}.  Jeśli @var{n} zaczyna się od @samp{0}, jest
reprezentowane ósemkowo, w przeciwnym razie dziesiętnie.

@item Klasy znaków
@cindex klasy znaków

Notacji @samp{[:@var{nazwa-klasy}:]} odpowiadają wszystkie znaki
z (predefiniowanej) klasy zwanej @var{nazwa-klasy}.  Znaki nie są rozszerzane
w jakimś szczególnym porządku, z wyjątkiem klas @code{upper} i @code{lower},
rozszerzanych w porządku rosnącym.  Gdy podano zarówno opcję @samp{--delete}
(@samp{-d}) jak i @samp{--squeeze-repeats} (@samp{-s}) w @var{zestaw2} można
użyć każdej klasy znaków.  W przeciwnym razie w @var{zestaw2} akceptowane są
tylko klasy znaków @code{upper} i @code{lower}, i to tylko wtedy, kiedy
odpowiednie klasy @code{upper} i @code{lower} zostały określone na tej samej
pozycji względnej w @var{zestaw1}.  Takie postępowanie określa konwersję
wielkości liter.  Nazwy klas podano niżej; jeśli poda się nieprawidłową nazwę
klasy, powstaje błąd.

@table @code
@item alnum
@opindex alnum
Litery i cyfry.
@item alpha
@opindex alpha
Litery.
@item blank
@opindex blank
Poziomy biały znak.
@item cntrl
@opindex cntrl
Znaki sterujące.
@item digit
@opindex digit
Cyfry.
@item graph
@opindex graph
Znaki drukowalne, z wyłączeniem spacji.
@item lower
@opindex lower
Małe litery.
@item print
@opindex print
Znaki drukowalne, łącznie ze spacją.
@item punct
@opindex punct
Znaki interpunkcyjne.
@item space
@opindex space
Pionowy lub poziomy biały znak (odstęp).
@item upper
@opindex upper
Duże litery.
@item xdigit
@opindex xdigit
Cyfry szesnastkowe.
@end table

@item Klasy równoważne
@cindex klasy równoważne

Składnia @samp{[=@var{c}=]} oznacza wszystkie znaki równoważne @var{c},
bez szczególnej kolejności.  Klasy równoważne to niedawny wynalazek pomyślany
dla obsługi alfabetów nie-angielskich.  Jednak nie istnieje, zdaje się,
standardowa metoda ich zdefiniowania lub określenia ich zawartości.  Z tego
powodu nie są one w pełni zaimplementowane w GNU @code{tr}: klasa równoważna
każdego znaku składa się tylko z tego znaku, co obecnie czyni je konstrukcją
bezużyteczną.

@end table


@node Konwersja
@subsection Konwersja znaków

@cindex tłumaczenie znaków
@cindex konwersja znaków
@cindex zamiana znaków

@code{tr} dokonuje tłumaczenia, konwersji, gdy podane są zarówno @var{zestaw1}
jak i @var{zestaw2}, a nie podano opcji @samp{--delete} (@samp{-d}).
Program przekłada każdy znak swojego wejścia znajdujący się w @var{zestaw1}
na odpowiedni znak w @var{zestaw2}.  Znaki, których nie ma w @var{zestaw1}
przepuszczane są w postaci niezmienionej.  Gdy jakiś znak pojawia się więcej
niż jeden raz w @var{zestaw1}, a odpowiadające mu znaki w @var{zestaw2} nie
są takie same, używany jest tylko ostatni z nich.  Dla przykładu, poniższe
dwa polecenia są równoważne:

@example
tr aaa xyz
tr a z
@end example

Typowym zastosowaniem @code{tr} jest konwersja małych liter na duże.
Można to zrobić na wiele sposobów.  Oto trzy z nich:

@example
tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
tr a-z A-Z
tr '[:lower:]' '[:upper:]'
@end example

Gdy @code{tr} dokonuje tłumaczenia, @var{zestaw1} i @var{zestaw2} powinny
normalnie być tej samej długości.  Jeśli @var{zestaw1} jest krótszy od
@var{zestaw2}, dodatkowe znaki na końcu @var{zestaw2} są ignorowane.

Z drugiej strony, podanie @var{zestaw1} dłuższego od @var{zestaw1} nie jest
przewidziane: @sc{posix.2} stanowi, że rezultat jest niezdefiniowany.
W takiej sytuacji @code{tr} z BSD wydłuża @var{zestaw2} do długości
@var{zestaw1} powtarzając ostatni znak @var{zestaw2} tyle razy ile potrzeba.
@code{tr} z System V obcina @var{zestaw1} do długości @var{zestaw2}.

Domyślnie, GNU @code{tr} załatwia ten przypadek tak jak robi to wersja
z BSD.  Gdy podano opcję @samp{--truncate-set1} (@samp{-t}) GNU @code{tr}
obsługuje załatwia ten przypadek tak jak wersja z System V.
Opcja ta jest ignorowana dla operacji innych niż tłumaczenie.

Zachowywanie się jak @code{tr} z System V w tym przypadku psuje stosunkowo
częsty idiom z BSD:

@example
tr -cs A-Za-z0-9 '\012'
@end example

@noindent
ponieważ konwertuje na znaki nowej linii tylko bajty zerowe (pierwszy element
dopełnienia @var{zestaw1}), a nie wszystkie znaki nie-alfanumeryczne.


@node Ściskanie
@subsection Ściskanie powtórzeń i usuwanie

@cindex ściskanie powtórzeń i usuwanie
@cindex usuwanie znaków

Jeśli podano tylko opcję @samp{--delete} (@samp{-d}), @code{tr} usuwa
z wejścia wszystkie znaki znajdujące się w @var{zestaw1}.

Jeśli podano tylko opcję @samp{--squeeze-repeats} (@samp{-s}), @code{tr}
zastępuje w wejściu każdą sekwencję powtórzonych znaków występujących
się w @var{zestaw1} pojedynczym wystąpieniem tegoż znaku.

Jeśli podano zarówno opcję @samp{--delete} jak i @samp{--squeeze-repeats},
@code{tr} najpierw wykonuje wszelkie usunięcia używając @var{zestaw1}, potem
ściska powtórzenia pozostałych znaków używając @var{zestaw2}.

Opcji @samp{--squeeze-repeats} można także używać podczas tłumaczenia.
Wówczas program najpierw dokonuje tłumaczenia, potem ściska powtórzenia
pozostałych znaków używając @var{zestaw2}.

Oto kilka przykładów ilustrujących różne kombinacje opcji:

@itemize @bullet

@item
Usuwanie wszystkich bajtów zerowych:

@example
tr -d '\000'
@end example

@item
Umieszczenie każdego słowa w osobnej linii.  Konwertuje to wszystkie
znaki nie-alfanumeryczne na znaki nowej linii, potem ściska każdy łańcuch
powtórzonych nowych linii w pojedynczą nową linię:

@example
tr -cs 'a-zA-Z0-9' '[\n*]'
@end example

@item
Konwersja każdej sekwencji powtórzonych nowych linii w pojedynczą nową linię:

@example
tr -s '\n'
@end example

@item
Wyszukiwanie w dokumencie podwójnych wystąpień słów. Na przykład, zdarza się
pisanie ,,do do'', powtórzonych słów rozdzielonych znakiem nowej linii.
Poniższy skrypt powłoki Bourne'a najpierw zamienia każdą sekwencję znaków 
interpunkcyjnych i znaków pustych na pojedynczy znak nowej linii.  Powoduje
to umieszczenie każdego ,,słowa'' w osobnej linii.  Następnie zamienia
wszystkie duże litery na małe, i, na koniec, uruchamia @code{uniq} z opcją
@samp{-d}, co powoduje wypisanie tylko słów, które były powtórzone obok
siebie.

@example
#!/bin/sh
cat "$@@" \
  | tr -s '[:punct:][:blank:]' '\n' \
  | tr '[:upper:]' '[:lower:]' \
  | uniq -d
@end example

@end itemize


@node Ostrzeżenia w tr
@subsection Komunikaty ostrzegawcze w tr

@vindex POSIXLY_CORRECT
Ustawienie zmiennej środowiskowej @env{POSIXLY_CORRECT} wyłącza niektóre
ostrzeżenia i komunikaty o błędach, dla ścisłej zgodności z @sc{posix.2}.
Komunikaty te występują normalnie w następujących okolicznościach:

@enumerate

@item
1. Gdy podano opcję @samp{--delete}, ale nie @samp{--squeeze-repeats},
a podano @var{zestaw2}, GNU @code{tr} domyślnie wypisuje komunikat o sposobie
użycia i kończy pracę, ponieważ @var{zestaw2} nie zostałby użyty.
Specyfikacja @sc{posix} mówi, że @var{zestaw2} należy w tej sytuacji
zignorować.  Jednak milczące ignorowanie argumentów to zły pomysł.

@item
2. Gdy podano niejednoznaczne specjalne sekwencje ósemkowe.  Na przykład,
@samp{\400} to faktycznie @samp{\40} plus cyfra @samp{0}, ponieważ ósemkowa
wartość 400 nie mieści się w pojedynczym bajcie.

@end enumerate

Zauważ że GNU @code{tr} nie zapewnia pełnej zgodności z BSD lub System V.
Na przykład, nie istnieje opcja wyłączająca interpretację konstrukcji
@sc{posix}-owych @samp{[:alpha:]}, @samp{[=c=]} i @samp{[c*10]}.
GNU @code{tr} nie usuwa także automatycznie bajtów zerowych, w odróżnieniu
od tradycyjnych wersji UNIX-owych, w których nie ma sposobu zachowania
bajtów zerowych.


@node Wywołanie expand
@section @code{expand}: zamiana tabulacji na spacje

@pindex expand
@cindex tabulacje na spacje, konwersja
@cindex konwersja tabulacji na spacje
@cindex zamiana tabulacji na spacje

@code{expand} wypisuje zawartość każdego podanego @var{pliku}, lub
standardowego wejścia jeśli nie podano żadnej lub podano plik zwany @samp{-},
na standardowe wyjście, konwertując znaki tabulacji na odpowiednią liczbę
spacji.  Składnia:

@example
expand [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

Domyślnie @code{expand} przekształca na spacje wszystkie znaki tabulacji.
Zachowuje jednak w pliku wynikowym znaki backspace; zmniejszają one licznik
kolumn w o jeden przy obliczeniach pozycji tabulacji. Domyślne działanie
jest równoważne opcji @samp{-8} (ustawia tabulacje co ósmą kolumnę).

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -@var{tab1}[,@var{tab2}]@dots{}
@itemx -t @var{tab1}[,@var{tab2}]@dots{}
@itemx --tabs=@var{tab1}[,@var{tab2}]@dots{}
@opindex -@var{tab}
@opindex -t
@opindex --tabs
@cindex tabulatory, ustawianie
Jeśli podano tylko jedną pozycję tabulacji, ustawia tabulacje co @var{tab1}
spacji, zamiast domyślnych ośmiu.  W przeciwnym razie, ustawia tabulacje
w kolumnach @var{tab1}, @var{tab2}, itd. (numerowanych od 0), i zastępuje
wszystkie tabulacje za ostatnią podaną pozycją pojedynczymi spacjami.
Jeśli pozycje tabulacji podano opcją @samp{-t} lub @samp{--tabs}, mogą być
one rozdzielone nie tylko przecinkami, ale i znakami pustymi.

@item -i
@itemx --initial
@opindex -i
@opindex --initial
@cindex początkowe tabulacje, zamiana
Konwertuje na spacje tylko początkowe tabulacje (te, które poprzedzają
wszelkie znaki nie będące tabulacjami ani spacjami) każdej linii.
[Inaczej mówiąc: nie dokonuje konwersji za znakami różnymi od spacji
i tabulacji.]

@end table


@node Wywołanie unexpand
@section @code{unexpand}: zamiana spacji na tabulacje

@pindex unexpand
@cindex spacje na tabulacje, konwersja
@cindex konwersja spacji na tabulacje
@cindex zamiana spacji na tabulacje

@code{unexpand} wypisuje zawartość każdego podanego @var{pliku}, lub
standardowego wejścia jeśli nie podano żadnego lub podano plik zwany @samp{-},
na standardowe wyjście, zamieniając łańcuchy dwu lub więcej spacji na tyle
tabulacji ile to możliwe, plus tyle spacji ile potrzeba.  Składnia:

@example
unexpand [@var{opcja}]@dots{} [@var{plik}]@dots{}
@end example

Domyślnie @code{unexpand} konwertuje w każdej linii tylko spacje i tabulacje
początkowe (poprzedzające wszystkie znaki nie będące spacjami i tabulacjami).
Zachowuje w wyniku znaki backspace; zmniejszają one licznik kolumn
w obliczeniach tabulacji.  Domyślnie tabulacje ustawiane są co ósmą kolumnę.

Program przyjmuje następujące opcje.  Zobacz też @ref{Wspólne opcje}.

@table @samp

@item -@var{tab1}[,@var{tab2}]@dots{}
@itemx -t @var{tab1}[,@var{tab2}]@dots{}
@itemx --tabs=@var{tab1}[,@var{tab2}]@dots{}
@opindex -@var{tab}
@opindex -t
@opindex --tabs
@cindex tabulatory, ustawianie
Jeśli podano tylko jedną pozycję tabulacji, ustawia tabulacje co @var{tab1}
spacji zamiast domyślnych ośmiu.  W przeciwnym razie, ustawia tabulacje
w kolumnach @var{tab1}, @var{tab2}, itd. (liczone od 0) i pozostawia spacje
i tabulacje poza podanymi pozycjami niezmienione.  Jeśli pozycje tabulacji
podano opcją @samp{-t} lub @samp{--tabs}, mogą być one oddzielone nie tylko
przecinkami, ale i znakami pustymi.  Opcja ta zakłada opcję @samp{-a}.

@item -a
@itemx --all
@opindex -a
@opindex --all
Konwertuje na tabulacje wszystkie łańcuchy dwu lub więcej spacji lub
tabulacji, nie tylko początkowe.

@end table

@c              What's GNU?
@c              Arnold Robbins
@node Skrzynka z programami
@chapter Skrzynka z programami

Ten rozdział pierwotnie pojawił się w @cite{Linux Journal}, volume 1, nr 2,
w dziale @cite{What's GNU?}. Został napisany przez Arnolda Robbinsa.

@menu
* Wprowadzenie do narzędzi::    Wprowadzenie do narzędzi
* Przekierowanie I/O::          Przekierowanie wejścia/wyjścia
* Polecenie who::               Polecenie @code{who}
* Polecenie cut::               Polecenie @code{cut}
* Polecenie sort::              Polecenie @code{sort}
* Polecenie uniq::              Polecenie @code{uniq}
* Łączenie narzędzi::           Łączenie narzędzi
@end menu


@node Wprowadzenie do narzędzi
@unnumberedsec Wprowadzenie do narzędzi

W tym miesiącu artykuł jest tylko ubocznie związany z Projektem GNU,
gdyż opisuje kilka narzędzi GNU obecnych w systemie Linux i sposoby,
na jakie możesz z nich korzystać. Faktycznie artykuł jest o filozofii
,,Narzędzi programowych,, w rozwijaniu i wykorzystywaniu programów.

Filozofia narzędzi programowych była ważnym i integralnym pojęciem
w początkowym projekcie i rozwoju Uniksa (którego Linux i GNU są zasadniczo
klonami).  Niestety, przy współczesnym nacisku intersieci i błyskotliwych GUI,
wydaje się, że idea ta spadła na pobocze.  To wstyd, ponieważ zapewnia ona
potężny model myślowy do rozwiązywania wielu rodzajów problemów.

Sporo ludzi nosi w kieszeniach spodni szwajcarski scyzoryk.  Scyzoryk jest
wygodnym narzędziem: ma kilka ostrzy, śrubokręt, pincetę, wykałaczkę, zestaw
gwoździ, korkociąg i może kilka innych rzeczy.  Do codziennych drobnych,
różnorodnych zadań, gdzie potrzebujesz prostego narzędzia ogólnego
zastosowania, jest właśnie tym, o co chodzi.

Z drugiej strony, doświadczony cieśla nie buduje domu scyzorykiem.
Zamiast tego ma skrzynkę wypchaną specjalizowanymi narzędziami -- jest tam
piła, młotek, śrubokręt, strug i tak dalej.  I dokładnie wie kiedy i gdzie
użyć każdego z narzędzi. Nie przyłapałbyś go na wbijaniu gwoździ rękojeścią
śrubokrętu.

Konstruktorzy Uniksa w Bell Labs byli całkiem zawodowymi programistami
i wyszkolonymi naukowcami komputerowymi.  Zauważyli, że choć rozwiązanie
wszystko-w-jednym może przyciągać użytkownika, gdyż ma on tylko jeden program
do korzystania, w praktyce programy takie są

@enumerate a
@item
trudne do napisania,

@item
trudne w konserwacji i usuwaniu błędów, oraz

@item
rudne do rozbudowy, przystosowania do nowych sytuacji.
@end enumerate

Uważali, że zamiast tego, programy powinny być specjalizowanymi narzędziami.
Krótko mówiąc, każdy program ,,powinien robić jedną rzecz dobrze''.
Nie więcej i nie mniej.  Takie programy są łatwiejsze do zaprojektowania,
napisania i zrozumienia -- robią tylko jedną rzecz.

Ponadto zauważyli, że przy odpowiednim mechanizmie łączenia programów
całość jest większa od sumy składowych.  Wiążąc kilka specjalizowanych
programów możesz zrealizować konkretne zadanie, do którego żaden z nich
nie był projektowany i osiągnąć to dużo szybciej i łatwiej niż pisząc dla
niego specjalizowany program.  W dalszej części artykułu zobaczymy kilka
(klasycznych) tego przykładów.  Ważnym dodatkowym punktem było to, że jeśli
jest to niezbędne, należy najpierw zrobić narzędzia, które będą potrzebne,
jeżeli nie ma się jeszcze odpowiednich w skrzynce narzędziowej.

@node Przekierowanie I/O
@unnumberedsec Przekierowanie wejścia/wyjścia

Mam nadzieję, że jesteś obeznany z podstawami przekierowywania wejścia/wyjścia
w powłoce, w szczególności z pojęciami ,,standardowego wejścia'', ,,standardowego
wyjścia'' i ,,standardowego wyjścia błędów (diagnostycznego)''. Zwięźle:
,,standardowe wejście'' jest źródłem danych, skąd pochodzą dane. Program nie musi
wiedzieć ani dbać o to, czy źródłem danych jest plik dyskowy, klawiatura,
taśma magnetyczna czy nawet czytnik kart perforowanych. Podobnie, ,,standardowe
wyjście'' jest odpływem danych, dokąd dane spływają. Program nie powinien ani
wiedzieć ani dbać o to, gdzie to może być. Programy, które tylko czytają swoje
standardowe wejście, robią coś z tymi danymi i wysyłają je na standardowe
wyjście, nazywane są ,,filtrami'', przez analogię do filtrów w wodociągach.

W powłoce uniksowej bardzo łatwo jest zestawić potoki danych:
[tłum.: ang.,,pipeline'' to ,,rurociąg'' lub, w informatyce, ,,potok'']

@example
program_tworzacy_dane | filtr1 | .... | filtrN > koncowe.dane
@end example

Zaczynamy od utworzenia surowych danych pierwotnych. Każdy z filtrów stosuje
pewne kolejne przekształcenie danych, aż wychodząc z potoku będą one mieć
pożądaną postać.

To jest eleganckie i dobre dla standardowego wejścia i standardowego wyjścia.
A gdzie się tu pojawia standardowe wyjście błędów? Cóż, pomyślmy o @code{filtr1}
w powyższym potoku. Co się stanie, jeśli napotka on błąd w przyjmowanych
danych? Jeżeli wypisze komunikat o błędzie na standardowe wyjście, to po prostu
zniknie on w potoku wejścia do @code{filtr2} a użytkownik zapewne nigdy go
nie zobaczy. Zatem programiści potrzebują miejsca, gdzie mogliby wysyłać
komunikaty o błędach, tak by użytkownik je zauważył. Jest to standardowe
wyjście diagnostyczne i zwykle związane jest z twoją konsolą lub oknem,
nawet jeśli przekierowałeś standardowe wyjście programu gdzieś poza ekran.

Aby programy filtrujące mogły współdziałać, musi zostać uzgodniony format
danych. Najprostszym i najłatwiejszym w wykorzystaniu formatem są zwykłe
wiersze tekstu. Uniksowe pliki danych są zazwyczaj po prostu strumieniami
bajtów, o wierszach zakończonych znakiem @sc{lf} @sc{ascii} (Line Feed - wysuw linii),
konwencjonalnie w literaturze dotyczącej Uniksa nazywanym ,,znakiem nowej linii''
(newline). (Jest to @code{'\n'} jeśli programujesz w C.) To format stosowany przez
wszystkie tradycyjne programy filtrujące. (Wiele wcześniejszych systemów
operacyjnych wypracowało środki i specjalizowane programy do obsługi danych
binarnych. Unix zawsze wystrzegał się takich rzeczy, zgodnie z filozofią,
że najłatwiej jest móc przeglądać i modyfikować dane po prostu edytorem
tekstu.)

Dobrze, starczy wprowadzenia. Przyjrzyjmy się niektórym narzędziom,
a wtedy zobaczymy jak wiązać je ze sobą na ciekawe sposoby. W dalszych
rozważaniach pokażemy tylko te opcje wiersza poleceń, które nas interesują.
Tak jak zawsze powinieneś, dwukrotnie sprawdź dokumentację systemową.
Znajdziesz tam pełne opisy.

@node Polecenie who
@unnumberedsec Polecenie @code{who}

Pierwszym programem jest polecenie @code{who} (kto). Samodzielne, tworzy listę aktualnie
zalogowanych użytkowników. Mimo, że piszę to w systemie jednoużytkownikowym,
będziemy udawać, że zalogowanych jest kilka osób:

@example
$ who
arnold   console Jan 22 19:57
miriam   ttyp0   Jan 23 14:19(:0.0)
bill     ttyp1   Jan 21 09:32(:0.0)
arnold   ttyp2   Jan 23 20:48(:0.0)
@end example

Znak @samp{$} jest tu zwyczajową zachętą powłoki, po której napisałem @code{who}.
Zalogowane są trzy osoby, w tym ja dwukrotnie. W tradycyjnych systemach Unix
nazwy użytkowników nigdy nie mają więcej niż osiem znaków. Ta mała ciekawostka
przyda się później. Wyjście z @code{who} wygląda ładnie, ale dane nie są aż tak
pasjonujące.

@node Polecenie cut
@unnumberedsec Polecenie @code{cut}

Następnym programem, któremu się przyglądniemy jest polecenie @code{cut} (wytnij).
Wycina ono kolumny lub pola z danych wejściowych. Na przykład, możemy nakazać
mu wypisanie tylko nazwy zgłoszeniowej i nazwiska z pliku @file{/etc/passwd}.
Plik posiada siedem pól, rozdzielonych dwukropkami:

@example
arnold:xyzzy:2076:10:Arnold D. Robbins:/home/arnold:/bin/ksh
@end example

Do pobrania pierwszego i piątego pola, użylibyśmy takiego wycinania:

@example
$ cut -d: -f1,5 /etc/passwd
root:Operator
@dots{}
arnold:Arnold D. Robbins
miriam:Miriam A. Robbins
@dots{}
@end example

Z opcją @samp{-c}, @code{cut} wycina konkretne znaki (tj. kolumny) wierszy wejściowych.
To polecenie wygląda na przydatne do filtrowania danych.


@node Polecenie sort
@unnumberedsec Polecenie @code{sort}

Następnie przyjrzymy się @code{sort}.  To jedno z najpotężniejszych
poleceń w systemie typu uniksowego.  Często będziesz go używał przy
konstruowaniu różnych wymyślnych rurociągów.  @code{sort} czyta i sortuje każdy
z podanych w wierszu poleceń plików.  Następnie scala uporządkowane dane
i wypisuje na standardowe wyjście.  Jeśli w wierszu poleceń nie poda się
żadnych nazw plików to czyta standardowe wejście (w ten sposób robimy zeń
filtr).  Sortowanie oparte jest na leksykograficznym porządku znaków lub
kryteriach porządkowania zadanych przez użytkownika.


@node Polecenie uniq
@unnumberedsec Polecenie @code{uniq}

Na koniec (przynajmniej na razie), przyglądniemy się programowi @code{uniq}.
Przy sortowaniu danych często uzyskasz powtórzone wiersze, wiersze,
które są identyczne.  Zazwyczaj potrzebujesz tylko jednego wystąpienia każdego
z nich.  Tu właśnie pojawia się @code{uniq}.  Czyta on ze swego standardowego wejścia,
spodziewając się, że jest ono posortowane.  Wypisuje tylko jeden egzemplarz
każdego zduplikowanego wiersza.  @code{uniq} ma kilka opcji.  W dalszym ciągu
wykorzystamy opcję @samp{-c}, wypisującą przed niepowtarzalnym wierszem
ile razy wystąpił on w danych wejściowych.


@node Łączenie narzędzi
@unnumberedsec Łączenie narzędzi

Załóżmy teraz, że mamy system BBS z zalogowanymi dziesiątkami
użytkowników.  Zarządzający chcą, by operator systemu (SysOp) napisał
program tworzący posortowaną listę zalogowanych użytkowników.
Co więcej, nawet jeśli użytkownik jest zalogowany wielokrotnie, jego nazwa
powinna w wyniku pojawić się tylko raz.

SysOp mógłby siąść z dokumentacją systemową i napisać program w C, który
by to robił.  Kosztowałoby to pewnie kilkaset linii kodu i około dwu godzin
pisania, testowania i usuwania błędów.  Jednak, znając narzędzia programowe,
SysOp może zamiast tego zacząć od utworzenia tylko listy zalogowanych
użytkowników:

@example
$ who | cut -c1-8
arnold
miriam
bill
arnold
@end example

Następnie, posortować listę:

@example
$ who | cut -c1-8 | sort
arnold
arnold
bill
miriam
@end example

Na koniec, przepuścić posortowaną listę przez @code{uniq}, by wypielić
duplikaty:

@example
$ who | cut -c1-8 | sort | uniq
arnold
bill
miriam
@end example

Polecenie @code{sort} faktycznie posiada opcję @samp{-u}, która robi to,
co @code{uniq}.  Jednak @code{uniq} ma inne zastosowania, w których nie
można go zastąpić przez @samp{sort -u}.

SysOp umieszcza ten potok w skrypcie powłoki i udostępnia go wszystkim
użytkownikom systemu:

@example
# cat > /usr/local/bin/listusers
who | cut -c1-8 | sort | uniq
^D
# chmod +x /usr/local/bin/listusers
@end example

Warto tu zauważyć cztery zalety.  Po pierwsze, przy pomocy zaledwie
czterech programów, w jednej linii poleceń, SysOp mógł oszczędzić około
dwu godzin pracy.  Co więcej, potok powłoki jest prawie tak samo wydajny,
jak byłby program w C, a o wiele bardziej efektywny jeśli chodzi o czas
programisty.  Czas ludzki jest o wiele kosztowniejszy niż czas komputera,
a w naszym współczesnym społeczeństwie, gdzie ,,nigdy nie ma dość czasu by
wszystko zrobić'', zaoszczędzenie dwu godzin czasu programisty jest
nie byle jakim wyczynem.

Po drugie, równie istotne jest podkreślenie, że przy pomocy @emph{połączenia}
narzędzi możliwe jest wykonanie specyficznego zadania, nigdy nie
przewidywanego przez autorów pojedynczych programów.

Po trzecie, wartościowe jest też stopniowe budowanie potoku, jak to
zrobiliśmy.  Pozwala ono na przyglądnięcie się danym na każdym etapie
przebiegu potoku, co pomaga uzyskać pewność, że rzeczywiście poprawnie
używasz narzędzi.

Na koniec, dzięki zapakowaniu potoku w skrypt powłoki, inni użytkownicy mogą
korzystać z twojego polecenia, nie musząc pamiętać o zawartości tego
wymyślnego opakowania.  Z punktu widzenia sposobu uruchamiania, skrypty powłoki
i skompilowane programy są nierozróżnialne.

Po uprzedniej rozgrzewce, przypatrzymy się dwu kolejnym, bardziej
skomplikowanym potokom.
Potrzebujemy dla nich wprowadzić jeszcze dwa narzędzia.

Pierwszym jest polecenie @code{tr}, oznaczające ,,transliterację''.
Polecenie @code{tr} wymienia znaki, działając na zasadzie znak-na-znak.
Zwykle stosowane jest do takich rzeczy jak odwzorowanie dużych liter
na małe.

@example
$ echo ThIs ExAmPlE HaS MIXED case! | tr '[A-Z]' '[a-z]'
this example has mixed case!
@end example

Interesuje nas kilka opcji:

@table @samp
@item -c
działa na dopełnieniu wskazanych znaków, tj. działania odnoszą się
do znaków spoza zadanego zestawu

@item -d
usuwa z wyniku znaki określone w pierwszym zestawie

@item -s
ściska w wyjściu powtórzone znaki w pojedynczy znak.
@end table

Za chwilę będziemy korzystać ze wszystkich trzech opcji.

Innym poleceniem, któremu się przyjrzymy jest @code{comm} (common - wspólne).
Pobiera ono dwa
posortowane pliki jako dane wejściowe i wypisuje ich wiersze w trzech
kolumnach.  Kolumny wynikowe są unikalnymi wierszami z pierwszego pliku,
unikalnymi wierszami z drugiego pliku i wierszami danych wspólnymi dla obu.
Opcje @samp{1}, @samp{-2} i @samp{3} pomijają odpowiednie kolumny.  Nie jest
to intuicyjne i wymaga pewnego przywyknięcia.  Na przykład:

@example
$ cat f1
11111
22222
33333
44444
$ cat f2
00000
22222
33333
55555
$ comm f1 f2
        00000
11111
                22222
                33333
44444
        55555
@end example

Pojedyncza kreska jako nazwa pliku nakazuje @code{comm} czytanie standardowego
wejścia zamiast zwykłego pliku.

Jesteśmy teraz gotowi do skonstruowania wymyślnego potoku.
Pierwszym zastosowaniem jest licznik częstości słów. Pomaga autorowi
stwierdzić, czy nie nadużywa on pewnych słów.

Pierwszym krokiem jest zmiana wielkości wszystkich liter z pliku wejściowego
na jedną wielkość. ,,To'' i ,,to'' przy zliczaniu są tym samym słowem.

@example
$ tr '[A-Z]' '[a-z]' < whats.gnu | ...
@end example

[tłum.: zauważ, że dla języka polskiego, podobnie jak w następnym kroku,
należy uwzględnić dodatkowo nasze znaki diakrytyczne.  Można dołączyć je
do podanego zakresu lub, lepiej, posłużyć się klasą znaków i ustawieniami
narodowymi - zobacz @ref{Wywołanie tr}.]

Następnym krokiem jest pozbycie się znaków przestankowych.  Słowa cytowane
i niecytowane powinny być traktowane identycznie; najłatwiej będzie po prostu
wyrzucić zawadzającą interpunkcję.

@example
$ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' | ...
@end example

Drugie polecenie @code{tr} działa na dopełnieniu podanych znaków, którymi są
litery, cyfry, podkreślenie i odstęp.  @samp{\012} oznacza znak nowej linii,
należy go pozostawić.  Dla dobrego pomiaru w działającym skrypcie
powinien być też zawarty znak tabulacji (@sc{ascii} tab).

Na tym etapie, mamy dane składające się ze słów rozdzielonych odstępami.
Słowa zawierają wyłącznie znaki alfanumeryczne i znak podkreślenia.
Następnym krokiem jest rozbicie danych na części tak, byśmy mieli po jednym
słowie w wierszu.  Jak wkrótce zobaczymy, znacznie ułatwia to zliczanie.

@example
$ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
> tr -s '[ ]' '\012' | ...
@end example

To polecenie zamienia odstępy w znaki nowej linii.  Opcja @samp{-s} ściska
wielokrotne znaki nowej linii wyniku w pojedynczy.  Pomaga nam to uniknąć
pustych wierszy. (Znak @samp{>} jest tu wtórnym znakiem zachęty powłoki.
Powłoka wypisuje go, gdy zauważy, że nie zakończyłeś wpisywania całego
polecenia.)

Teraz mamy dane składające się z jednego słowa w każdym wierszu, bez znaków
interpunkcyjnych, wszystkie pisane jedną wielkością.
Jesteśmy gotowi do zliczania każdego z nich:

@example
$ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
> tr -s '[ ]' '\012' | sort | uniq -c | ...
@end example

Na tym etapie, dane mogą wyglądać jakoś tak:

@example
  60 a
   2 able
   6 about
   1 above
   2 accomplish
   1 acquire
   1 actually
   2 additional
@end example

Wynik jest posortowany według słów, nie według liczby wystąpień!
Chcielibyśmy natomiast mieć jako pierwsze najczęściej używane słowa.
Na szczęście, łatwo to osiągnąć przy pomocy dwu dodatkowych opcji @code{sort}:

@table @samp
@item -n
wykonuje sortowanie liczbowe, a nie tekstowe

@item -r
odwraca kolejność sortowania
@end table

Ostateczny potok wygląda tak:

@example
$ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
> tr -s '[ ]' '\012' | sort | uniq -c | sort -nr
 156 the
  60 a
  58 to
  51 of
  51 and
 ...
@end example

No, no! Sporo do opowiadania. Nadal jednak obowiązują te same zasady.
Przy pomocy sześciu poleceń, w dwu wierszach (faktycznie jednej długiej linii
podzielonej dla wygody), stworzyliśmy program, który robi coś ciekawego
i pożytecznego, w dużo krótszym czasie niż moglibyśmy napisać program w C
robiący to samo.

Niewielkie zmiany w powyższym potoku mogą nam dać prosty korektor pisowni!
Do stwierdzenia, czy napisałeś poprawnie jakieś słowo wystarczy, że
poszukasz go w słowniku. Jeśli w nim nie występuje, to możliwe, że twoja
pisownia jest nieprawidłowa. Tak więc, potrzebujemy słownika. Jeżeli masz
dystrybucję Slackware Linux, to plik @file{/usr/lib/ispell/ispell.words}
jest posortowanym, zawierającym 38.400 słów, słownikiem.

Zatem, jak porównać nasz plik ze słownikiem? Jak poprzednio, utworzymy
posortowaną listę słów, po jednym w wierszu:

@example
$ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
> tr -s '[ ]' '\012' | sort -u | ...
@end example

Teraz potrzebujemy tylko listy słów, których @emph{nie ma} w słowniku.
Tu właśnie pojawia się polecenie @code{comm}.

@example
$ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
> tr -s '[ ]' '\012' | sort -u |
> comm -23 - /usr/lib/ispell/ispell.words
@end example

Opcje @samp{-2} i @samp{-3} likwidują wiersze występujące tylko słowniku (drugi plik),
i występujące w obu plikach. Wiersze obecne tylko w pierwszym pliku
(standardowe wejście, nasz strumień słów), są słowami, których nie ma
w słowniku. Są to prawdopodobne błędy pisowni.
Taki potok był pierwszym etapem budowy korektora pisowni w Uniksie.

Istnieje jeszcze kilka innych narzędzi wymagających krótkiej wzmianki.

@table @code
@item grep
szuka w plikach tekstu pasującego do wyrażenia regularnego

@item egrep
jak @code{grep}, ale z bardziej rozbudowanymi wyrażeniami regularnymi

@item wc
zlicza wiersze, słowa, znaki

@item tee
kopiuje dane do plików i na standardowe wyjście;
działa jak T-kształtka w rurociągu danych

@item sed
edytor strumieniowy, zaawansowane narzędzie

@item awk
język manipulacji danymi, kolejne zaawansowane narzędzie
@end table

Filozofia narzędzi programowych daje też następującą radę: ,,Niech ktoś
inny zrobi trudną część pracy''.
To znaczy, weź coś, co zaspokoi większość twoich potrzeb, a następnie
przekształcaj dalej, aż uzyskasz pożądaną postać.

Podsumowując:

@enumerate 1
@item
Każdy program powinien robić jedną rzecz, ale dobrze. Nie więcej, nie mniej.

@item
Łączenie programów w odpowiedni sposób prowadzi do rezultatu, gdzie
całość jest lepsza od sumy części. Prowadzi też do nowatorskich
zastosowań programów, których ich autorzy nawet sobie nie wyobrażali.

@item
Programy nigdy nie powinny wypisywać dodatkowych danych nagłówkowych
czy kończących, gdyż mogłyby one zostać przesłane potokiem.
(Cecha, o której wcześniej nie wspominaliśmy).

@item
Niech ktoś inny wykona trudną część roboty.

@item
Znaj swoje narzędzia! Każdego programu używaj we właściwy sposób.
Jeżeli nie masz odpowiedniego narzędzia - zrób je.
@end enumerate

W chwili powstania tego artykułu, wszystkie omawiane programy były dostępne
przez anonimowe @code{ftp} z @code{prep.ai.mit.edu} jako
@file{/pub/gnu/textutils-1.9.tar.gz}.@footnote{Wersja 1.9 była wówczas
bieżącą. Sprawdź w najbliższym archiwum GNU jaka wersja jest aktualnie
bieżąca. Główną siedzibą archiwum jest obecnie @code{ftp.gnu.org}.}

Nic z tego, co przedstawiłem w tym artykule nie jest nowe. Filozofia Narzędzi
Programowych została po raz pierwszy wprowadzona w książce @cite{Software Tools},
Briana Kernighana i P.J. Plaugera (Addison-Wesley, ISBN 0-201-03669-X).
Książka ta pokazywała jak pisać i wykorzystywać narzędzia programowe.
Została napisana w 1976, korzystając z preprocesora FORTRAN-u o nazwie @code{ratfor}
(RATional FORtran). Wówczas C nie był tak wszechobecny jak dziś. FORTRAN był.
Ostatni rozdział przedstawiał @code{ratfor} dla procesora FORTRAN-u, napisany w
@code{ratfor}ze. @code{ratfor} wygląda bardzo podobnie do C -- jeśli znasz C,
nie będziesz mieć żadnych kłopotów ze zrozumieniem kodu.

W 1981 książka ta została zaktualizowana i udostępniona jako @cite{Software Tools
in Pascal} (Addison-Wesley, ISBN 0-201-10342-7). Obie książki są nadal
drukowane i są rzeczywiście warte przeczytania jeśli jesteś programistą.
Z pewnością bardzo zmieniły mój punkt widzenia na programowanie.

Początkowo programy z obu książek były dostępne (na 9-calowej taśmie)
z Addison-Wesley. Niestety, już tak nie jest, mimo że możesz znaleźć kopie
rozproszone w Internecie. Przez wiele lat działała Software Tools Users Group
- Grupa Użytkowników Narzędzi Programowych, której członkowie przenieśli
pierwotne programy @code{ratfor} na niemal każdy system komputerowy z kompilatorem
FORTRAN-u. Popularność grupy zanikła w połowie lat 80-tych, gdy Unix zaczął
rozpowszechniać się poza uniwersytetami.

Przy obecnym rozmnożeniu kodu GNU i innych klonów programów uniksowych,
programom tym poświęca się teraz niewiele uwagi. Współczesne wersje C
są o wiele wydajniejsze i robią więcej niż te programy. Niemniej jednak,
książki te są niezrównane jako opis dobrego stylu programowania, głosząc
wciąż cenną filozofię. Gorąco je polecam.

Podziękowania: chciałbym wyrazić swą wdzięczność Brianowi Kernighanowi
z Bell Labs, pierwszemu Kowalowi Narzędzi Programowych, za przejrzenie tego
artykułu.


@node Skorowidz
@unnumbered Skorowidz

@printindex cp

@contents
@bye

@c Local variables:
@c texinfo-column-for-description: 32
@c End:
