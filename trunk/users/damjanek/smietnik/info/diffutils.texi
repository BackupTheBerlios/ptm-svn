%& -translate-file=il2-pl
\def\fontprefix{pl}
\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename diffutils.info
@settitle Porównywanie i scalanie plików
@setchapternewpage odd
@documentencoding ISO-8859-2
@documentlanguage pl
@c %**end of header

@set TRANSLATED marzec 2001

@ifinfo
@format
START-INFO-DIR-ENTRY
* Porównywanie i scalanie plików: (diffutils).      Narzędzia różnicowe GNU.
* cmp: (diffutils)Wywołanie cmp.           Porównuje dwa pliki binarnie.
* diff: (diffutils)Wywołanie diff.         Porównuje dwa pliki tekstowe.
* diff3: (diffutils)Wywołanie diff3.       Porównuje trzy pliki tekstowe.
* patch: (diffutils)Wywołanie patch.       Łata plik ze starego tworząc nowy.
* sdiff: (diffutils)Wywołanie sdiff.       Interaktywnie scala zmiany.
END-INFO-DIR-ENTRY
@end format
@end ifinfo

@ifinfo
Plik ten dokumentuje polecenia @code{diff}, @code{diff3}, @code{sdiff}
i @code{cmp} w wersji GNU, pokazujące różnice pomiędzy plikami tekstowymi
oraz polecenie @code{patch} do korzystania z ich wyników do aktualizacji
plików.

Copyright (C) 1992, 1993, 1994 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end ifinfo

@titlepage
@title Porównywanie i scalanie plików
@subtitle @code{diff}, @code{diff3}, @code{sdiff}, @code{cmp} i @code{patch}
@subtitle Wydanie 1.3, do @code{diff} 2.5 i @code{patch} 2.1
@subtitle wrzesień 1993
@author napisali: David MacKenzie, Paul Eggert i Richard Stallman

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1992, 1993, 1994 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end titlepage

@node Top, , , (dir)

@ifinfo
Plik ten dokumentuje polecenia @code{diff}, @code{diff3}, @code{sdiff}
i @code{cmp} w wersji GNU, pokazujące różnice pomiędzy plikami tekstowymi
oraz polecenie @code{patch} do korzystania z ich wyników do aktualizacji
plików.

@c HQ: w oryginale diff 2.4, inaczej niż wyżej !
To jest wydanie 1.3, do @code{diff} 2.5 i @code{patch} 2.1.
@end ifinfo

@menu
* Od tłumacza::		Parę słów od tłumacza.

* Ogólny opis::		Wstępne informacje.

* Porównanie::		Co to znaczy porównanie plików.
* Formaty wyjściowe::	Formaty zestawień różnic.
* Porównywanie katalogów::	Porównywanie plików i katalogów.
* Dostosowywanie wyjścia::	Upiększanie wyjścia @code{diff}.
* Wydajność diff::	Przyspieszanie i usprytnianie @code{diff}.
* Porównanie trzech plików::	Formaty raportów różnic trójstronnych.

* Scalanie diff3::	Scalanie według wspólnego przodka.
* Interaktywne scalanie::	Interaktywne scalanie za pomocą @code{sdiff}.
* Scalanie z patch::	Użycie @code{patch} do zmiany starych plików w nowe.
* Tworzenie łat::	Wskazówki, jak tworzyć rozsyłane łaty.

* Wywołanie cmp::	Sposób uruchamiania @code{cmp} i zestawienie opcji.
* Wywołanie diff::	Sposób uruchamiania @code{diff} i zestawienie opcji.
* Wywołanie diff3::	Sposób uruchamiania @code{diff3} i zestawienie opcji.
* Wywołanie patch::	Sposób uruchamiania @code{patch} i zestawienie opcji.
* Wywołanie sdiff::	Sposób uruchamiania @code{sdiff} i zestawienie opcji.

* Niekompletne linie::	Linie z brakującym zakończeniem znakiem nowej linii.
* Plany::		Jeśli sądzisz, że znalazłeś błąd lub niedociągnięcie.

* Indeks pojęć::	Skorowidz pojęć.
@end menu


@node Od tłumacza, Ogólny opis, , Top
@unnumbered Od tłumacza
Niniejszy przekład powstał
w ramach @uref{http://ptm.linux.pl/, Projektu Tłumaczenia Manuali}
z wykorzystaniem istniejących tłumaczeń stron podręcznika systemowego
man do programów @code{diff} i @code{patch}, które wykonali:
Przemek Borys (@email{pborys@@p-soft.silesia.linux.org.pl})
oraz Adam Byrtek (@email{alpha@@irc.pl}).

Wykorzystany fragment Księgi Drogi i Cnoty Lao-Tsy -- na podstawie przekładów
Tadeusza Żbikowskiego (@cite{Literatura na Świecie}, 1987, nr 1)
oraz anonimowego L.Z. (http://www.nnk.art.pl/kluseczka/tao_te_king.html).

Obecnie (@value{TRANSLATED}), zawarty w podręczniku systemowym man opis
GNU @code{patch} jest bardziej aktualny.  Do czasu aktualizacji niniejszego
dokumentu wszelkie wątpliwości związane ze szczegółami działania @code{patch}
najlepiej rozstrzygać zaglądając do podręcznika systemowego.

Zgłoszenia błędów, komentarze i sugestie
proszę przesyłać na listę dyskusyjną Projektu: @email{ptm@@amg.net.pl}.

W.Kotwica (@email{wkotwica@@post.pl})

@unnumberedsec Rozpowszechnianie
To jest nieoficjalne tłumaczenie warunków rozpowszechniania na język polski.
Nie zostało ono opublikowane przez Free Software Foundation
i pod względem prawnym nie stanowi warunków rozpowszechniania -- ustanawia
je wyłącznie oryginalny tekst angielski.  Jednak tłumacz ma nadzieję, że
pomoże ono lepiej zrozumieć warunki rozpowszechniania osobom mówiącym
po polsku.

This is an unofficial translation of the distribution terms into
Polish language. It was not published by the Free Software Foundation, and
does not legally state the distribution terms--only the original English text
does that. However, the translator hopes that it will help Polish language
speakers understand distribution terms better.

Zezwala się na tworzenie i rozpowszechnianie wiernych kopii
tego podręcznika, pod warunkiem, że na wszystkich kopiach zostanie zachowana
informacja o prawach autorskich i niniejsze zezwolenie.

Zezwala się na kopiowanie i rozpowszechnianie zmienionych wersji
tego podręcznika na warunkach jak dla wiernych kopii, pod warunkiem, że
cała praca pochodna będzie rozpowszechniana na warunkach zezwolenia
identycznego jak niniejsze.

Zezwala się na kopiowanie i rozpowszechnianie tłumaczeń tego
podręcznika na inny język, pod wyżej podanymi warunkami dla zmienionych
wersji, z wyjątkiem tego, że niniejsze zezwolenie może być ustanowione
w tłumaczeniu zaakceptowanym przez Fundację.

@node Ogólny opis, Porównanie, Od tłumacza , Top
@unnumbered Ogólny opis
@cindex ogólny opis @code{diff} i @code{patch}

Użytkownicy komputerów często mają powód, by pytać jak różnią się od siebie
dwa pliki.  Być może jeden z plików jest nowszą wersją drugiego.  Albo może
oba pochodzą od identycznych kopii, ale zostały zmienione przez różne osoby.

Do pokazania różnic pomiędzy dwoma plikami lub odpowiadającymi sobie plikami
w dwu katalogach korzystamy z polecenia @code{diff}.  Wypisuje ono
różnice pomiędzy plikami, wiersz po wierszu, w jednym z kilku dostępnych
formatów, które można wybrać opcjami wiersza poleceń.  Taki komplet różnic
jest często zwany @dfn{różnicą} (@dfn{diff}) lub @dfn{łatą} (@dfn{patch}).
Dla plików, które są identyczne normalnie @code{diff} nie tworzy żadnego
wyjścia; dla plików binarnych (nie-tekstowych), @code{diff} normalnie zgłasza
tylko, że są różne.

Do pokazania offsetów (pozycji w pliku) i numerów linii, gdzie dwa pliki się
różnią korzystamy z polecenia @code{cmp}.  Może ono także pokazać, jeden obok
drugiego, wszystkie znaki, którymi pliki się różnią.  Innym sposobem
porównania dwu plików znak po znaku jest polecenia Emacs-a
@kbd{M-x compare-windows}.
@xref{Other Window, , Other Window, emacs, The GNU Emacs Manual},
gdzie opisano je dokładniej.

Do pokazania różnic pomiędzy trzema plikami korzystamy z polecenia
@code{diff}.  Gdy dwie osoby niezależnie od siebie naniosły zmiany w tym
samym pierwowzorze, @code{diff3} potrafi zgłosić różnice pomiędzy oryginałem,
a zmienionymi wersjami i utworzyć scalony plik, zawierający poprawki obu
osób z ostrzeżeniami o konfliktach.

Do interaktywnego scalania dwu plików korzystamy z polecenia @code{sdiff}.

Zbiór różnic utworzony przez @code{diff} można wykorzystać do przekazania
aktualizacji plików tekstowych (jak np. kod źródłowy programów) innym osobom.
Metoda ta jest szczególnie przydatna gdy różnice są niewielkie w stosunku
do całości plików.  Mając wyjście polecenia @code{diff}, można skorzystać
z programu @code{patch} by uaktualnić, @dfn{załatać}, dany egzemplarz pliku.
Jeśli spojrzymy na @code{diff} jak na odejmowanie jednego pliku od drugiego
w celu uzyskania ich różnicy, to możemy traktować @code{patch} jak dodawanie
różnicy do jednego pliku by otrzymać drugi.

Ten podręcznik najpierw koncentruje się na tworzeniu różnic, a potem
pokazuje, jak użyć je do aktualizacji plików.

GNU @code{diff} napisali Mike Haertel, David Hayes, Richard
Stallman, Len Tower i Paul Eggert.  Wayne Davison zaprojektował
i zaimplementował zunifikowany format wyjściowy.  Podstawowy algorym opisano
w ``An O(ND) Difference Algorithm and its Variations'', Eugene W. Myers,
@cite{Algorithmica} Vol.@: 1 No.@: 2, 1986, pp.@: 251--266; oraz w ``A File
Comparison Program'', Webb Miller i Eugene W. Myers,
@cite{Software---Practice and Experience} Vol.@: 15 No.@: 11, 1985,
pp.@: 1025--1040.
@c From: "Gene Myers" <gene@cs.arizona.edu>
@c They are about the same basic algorithm; the Algorithmica
@c paper gives a rigorous treatment and the sub-algorithm for
@c delivering scripts and should be the primary reference, but
@c both should be mentioned.
Algorytm ten został niezależnie odkryty, jak opisano w
``Algorithms for Approximate String Matching'',
E. Ukkonen, @cite{Information and Control} Vol.@: 64, 1985, pp.@: 100--118.
@c From: "Gene Myers" <gene@cs.arizona.edu>
@c Date: Wed, 29 Sep 1993 08:27:55 MST
@c Ukkonen should be given credit for also discovering the algorithm used
@c in GNU diff.

GNU @code{diff3} jest napisał Randy Smith.  GNU @code{sdiff} napisał Thomas
Lord.  GNU @code{cmp} napisali Torbjorn Granlund i David MacKenzie.

@code{patch} został napisany głównie przez Larry'ego Wall;
rozszerzenia GNU napisali głównie Wayne Davison i David MacKenzie.
Części tego podręcznika zostały zaadaptowane z podręcznika systemowego man,
który napisał Larry Wall, za jego zgodą.

@node Porównanie, Formaty wyjściowe, Ogólny opis, Top
@chapter Co to znaczy porównanie
@cindex wprowadzenie

Różnice pomiędzy dwoma plikami można postrzegać na kilka sposobów.
Z pewnego punktu widzenia różnice są pewnym ciągiem linii, które usunięto,
wstawiono lub zmieniono w pliku, by otrzymać inny plik.  @code{diff}
porównuje pliki linia po linii, odnajduje grupy różniących się linii
i informuje o każdej takiej grupie.  Różniące się linie potrafi wyświetlić
w różnych formatach, do różnych zastosowań.

GNU @code{diff} może pokazać, czy pliki się różnią, bez wyszczególniania
różnic.  Umożliwia też pominięcie pewnych rodzajów różnic, które nie są dla
nas istotne.  Najczęściej takimi różnicami są zmiany liczby białych znaków
(odstępów) między słowami czy liniami.  @code{diff} pozwala też na
nieuwzględnianie różnic w wielkości liter czy zmian w liniach pasujących
do wskazanego wyrażenia regularnego.  Opcje te można sumować: na przykład,
możemy ignorować zarówno zmiany ilości białych znaków, jak i wielkości liter.

Z innego punktu widzenia różnice pomiędzy plikami to pewien ciąg par znaków,
które są albo identyczne albo różne od siebie.  @code{cmp} podaje różnice
między dwoma plikami znak po znaku, a nie linia po linii.  Wskutek tego, do
porównywania plików binarnych jest przydatniejszy niż @code{diff}.  Przy
plikach tekstowych przydaje się głównie wtedy, gdy chcemy wiedzieć tylko, czy
dwa pliki są identyczne czy nie.

Dla porównania skutków, jakie może mieć rozważanie zmian znak po znaku
w porównaniu z analizowaniem ich linia po linii, zastanówmy się, co się
stanie gdy na początku pliku dołożymy pojedynczy znak nowej linii.
Jeśli nasz plik porównamy następnie z plikiem, w którym nie ma tego znaku,
a który poza tym jest identyczny, @code{diff} poinformuje, że do pliku
została dodana pusta linia, podczas gdy @code{cmp} zamelduje, że prawie
wszystkie znaki obu plików się różnią.

@code{diff3} normalnie porównuje linia po linii trzy pliki wejściowe,
znajduje grupy linii, które się różnią i powiadamia o każdej takiej grupie.
Jego wyjście zaprojektowano tak, by łatwo było sprawdzić dwa różne zbiory
zmian wykonanych na tym samym pliku.

@menu
* Porcje::		Grupy różniących się linii.
* Odstępy::		Pomijanie różnic o odstępy.
* Puste linie::		Pomijanie różnic o puste linie.
* Wielkość liter::	Pomijanie różnic w wielkości liter.
* Pomijanie podanych::	Pomijanie różnic pasujących do wyrażenia regularnego.
* Krótko::		Podsumowywanie, które pliki się różnią.
* Binarnie::		Porównywanie plików binarnych lub wymuszanie
			porównań tekstowych.
@end menu

@node Porcje, Odstępy, , Porównanie
@section Porcje
@cindex porcje

Przy porównywaniu dwu plików @code{diff} znajduje ciągi linii wspólnych
obu plikom, poprzeplatane grupami linii różniących się zwanych kawałkami,
porcjami, fragmentami (@dfn{hunks}).    Porównanie dwu identycznych plików
zwraca jeden ciąg wspólnych linii i żadnych porcji, gdyż żadne linie
nie różnią się od siebie.  Porównanie dwu całkowicie odmiennych plików nie
daje w ogóle wspólnych linii tylko jedną wielką porcję, która zawiera
wszystkie linie obu plików.  Ogólnie, istnieje wiele sposobów dopasowywania
linii z danych dwu plików.  @code{diff} próbuje zminimalizować całkowity
rozmiar porcji odnajdując długie ciągi wspólnych linii przeplecione małymi
porcjami różnych linii.

Na przykład, załóżmy, że plik @file{F} zawiera trzy linie @samp{a}, @samp{b},
@samp{c}, a plik @file{G} zawiera te same trzy linie w odwrotnej kolejności
@samp{c}, @samp{b}, @samp{a}.  Jeśli @code{diff} jako wspólną linię
znajduje @samp{c}, to polecenie @samp{diff F G} daje w wyniku:

@example
1,2d0
< a
< b
3a2,3
> b
> a
@end example

@noindent
Jeśli natomiast, zamiast tego, @code{diff} zauważa, że wspólną linią
jest @samp{b}, to tworzy takie wyjście:

@example
1c1
< a
---
> c
3c3
< c
---
> a
@end example

@noindent
Możliwe jest też trafienie na @samp{a} jako wspólną linię.
@code{diff} nie zawsze znajduje optymalne dopasowanie między plikami --
idzie na skróty, by działać szybciej.  Jednak tworzone przezeń wyjście
jest zwykle bliskie najkrótszemu możliwemu.  Można wyrównać ten kompromis
opcją @samp{--minimal} (@pxref{Wydajność diff}).

@node Odstępy, Puste linie, Porcje, Porównanie
@section Pomijanie różnic w rozmieszczeniu odstępów
@cindex spacje i tabulacje, pomijanie różnic w odstępach
@cindex tabulacje i spacje, pomijanie różnic w odstępach
@cindex odstępy, pomijanie różnic

Opcje @samp{-b} i @samp{--ignore-space-change} ignorują białe znaki na końcu
linii i uważają wszystkie inne sekwencje jednego lub więcej białych znaków
(odstępów) za równoważne.  Uruchomiony z tymi opcjami @code{diff} uważa
poniższe dwie linie za równoważne (użyty tu @samp{$} oznacza koniec linii):

@example
Here lyeth  muche rychnesse  in lytell space.   -- John Heywood$
Here lyeth muche rychnesse in lytell space. -- John Heywood   $
@end example

Opcje @samp{-w} i @samp{--ignore-all-space} są mocniejsze niż @samp{-b}.
Ignorują różnicę nawet jeśli w jednym z plików jest odstęp w miejscu, gdzie
w drugim go nie ma.  @dfn{Białe znaki} obejmują tabulację, znak nowej linii,
tabulację pionową, wysuw strony, powrót karetki i spację.
Niektóre z definicji ustawień regionalnych (locale) mogą jako białe znaki
definiować inne dodatkowe znaki.
Uruchomiony z tymi opcjami @code{diff} uważa poniższe dwie linie za
równoważne (użyty tu @samp{$} oznacza koniec linii, a @samp{^M} - powrót
karetki):

@example
Here lyeth  muche  rychnesse in lytell space.--  John Heywood$
  He relyeth much erychnes  seinly tells pace.  --John Heywood   ^M$
@end example

@node Puste linie, Wielkość liter, Odstępy, Porównanie
@section Pomijanie różnic o puste linie
@cindex puste linie, pomijanie różnic

Opcje @samp{-B} i @samp{--ignore-blank-lines} ignorują wstawienia czy
usunięcia pustych linii.  Normalnie dotyczą tylko linii, które są całkiem
puste; nie mają wpływu na linie wyglądające na puste, lecz zawierające
znaki spacji czy tabulacji.  Z tymi opcjami, na przykład, plik zawierający
@example
1.  Punkt to to, co nie posiada części.

2.  Linia ma nieskończoną długość.
-- Euklides, Elementy, I
@end example
@noindent
jest uważany za identyczny z plikiem zawierającym
@example
1.  Punkt to to, co nie posiada części.
2.  Linia ma nieskończoną długość.


-- Euklides, Elementy, I
@end example

@node Wielkość liter, Pomijanie podanych, Puste linie, Porównanie
@section Pomijanie różnic w wielkości liter
@cindex wielkość liter, pomijanie różnic

GNU @code{diff} może traktować małe litery jako równoważne ich dużym
odpowiednikom, więc, na przykład, uważa wszystkie @samp{Funky Stuff},
@samp{funky STUFF} i @samp{fUNKy stuFf} za takie same.
Wymuszamy to stosując opcję @samp{-i} lub @samp{--ignore-case}.

@node Pomijanie podanych, Krótko, Wielkość liter, Porównanie
@section Pomijanie linii pasujących do wyrażenia regularnego.
@cindex wyrażenia regularne, pomijanie
@cindex regexp, pomijanie

Wstawienia i usunięcia linii pasujących do zadanego wyrażenia regularnego
ignorujemy korzystając z opcji @samp{-I @var{regexp}}
(lub @samp{--ignore-matching-lines=@var{regexp}}.  Wyrażenia, które zawierają
metaznaki powłoki powinny być cytowane, by uchronić je przed rozwinięciem
przez powłokę.  Na przykład, @samp{diff -I '^[0-9]'} pomija wszystkie zmiany
w liniach zaczynających się od cyfry.

Jednak @samp{-I} pomija wstawienia i usunięcia linii zawierających
dane wyrażenie regularne tylko wtedy jeśli każda ze zmienionych linii
w porcji -- każde wstawienie i każde usunięcie --  pasuje do tego wyrażenia.
Inaczej mówiąc, dla każdej nie dającej się zignorować zmiany @code{diff}
wypisuje pełny zbiór zmian w jej otoczeniu, łącznie z ignorowanymi.

Stosując więcej niż jedną opcję @samp{-I} możemy wskazać więcej niż jedno
wyrażenie regularne do ignorowania linii.  @code{diff} usiłuje dopasować
każdą linię do każdego wyrażenia, poczynając od ostatniego podanego.

@node Krótko, Binarnie, Pomijanie podanych, Porównanie
@section Podsumowywanie, które pliki się różnią
@cindex podsumowywanie, które pliki się różnią
@cindex krótkie zestawienia różnic

Gdy chcemy się tylko dowiedzieć, czy pliki są różne, a nie obchodzi nas,
jakie to są różnice, stosujemy podsumowujący, skrócony format wyjściowy.
W tym formacie, zamiast pokazywać różnice między plikami, @code{diff}
po prostu informuje, czy pliki się różnią czy nie.  Formaty sumaryczny
wybierają opcje @samp{-q} i @samp{--brief}.

Format podsumowujący jest szczególnie przydatny przy porównywaniu zawartości
dwu katalogów.  Jest też znacznie szybszy niż wykonywanie zwykłych porównań
linia po linii, ponieważ @code{diff} może przestać analizować plik jak tylko
zauważy jakąś różnicę.

Krótkie wskazanie czy dwa pliki się różnią można też uzyskać stosując
@code{cmp}.  Dla plików, które są identyczne @code{cmp} nie tworzy żadnego
wyjścia.  Gdy pliki się różnią, domyślnie, wypisuje offset bajtowy
i numer linii, gdzie występuje pierwsza różnica.  Do pominięcia tej
informacji można użyć opcji @samp{-s}.  Wówczas @code{cmp} nie tworzy żadnego
wyjścia, a informuje czy pliki się różnią wyłącznie za pomocą swego kodu
zakończenia (@pxref{Wywołanie cmp}).

@c Fix this.
W przeciwieństwie do @code{diff}, @code{cmp} nie potrafi porównywać
katalogów; umie tylko porównać dwa pliki.

@node Binarnie, , Krótko, Porównanie
@section Pliki binarne i wymuszanie porównań tekstowych
@cindex binarne pliki a diff
@cindex tekstowe a binarne, typ plików a diff

Jeśli @code{diff} stwierdzi, że któryś z dwu porównywanych plików jest
binarny (plik nie-tekstowy), normalnie traktuje taką parę plików tak samo,
jakby wybrano podsumowujący format wyjścia (@pxref{Krótko}), i zgłasza tylko,
że pliki binarne są różne.  Jest to spowodowane tym, że porównania linia po
linii dla plików binarnych nie mają zwykle sensu.

@code{diff} określa, czy plik jest tekstowy czy binarny przez sprawdzenie
pewnej ilości jego pierwszych bajtów; dokładna liczba badanych bajtów
zależy od systemu, ale typowo jest to kilka tysięcy.  Jeśli każdy bajt w tej
części pliku jest niezerowy (nie równy null), to @code{diff} uważa plik za
tekstowy, w przeciwnym razie - za binarny.

Czasami chcemy zmusić @code{diff}, by traktował pliki jako tekstowe.
Na przykład, być może porównujemy pliki tekstowe, które zawierają znaki null.
Wówczas @code{diff} błędnie zdecydowałby, że są one plikami nie-tekstowymi.
Albo porównujemy dokumenty zapisane w formacie stosowanym przez system
przetwarzania tekstu, który używa znaków null do wskazania specjalnego
formatowania.  Można zmusić @code{diff} do uważania wszystkich plików
za tekstowe i porównywania ich linia po linii stosując opcję @samp{-a}
lub @samp{--text}.  Jeżeli pliki, które porównujemy przy wykorzystaniu
tej opcji w rzeczywistości nie zawierają tekstu, to i tak prawdopodobnie
będą zawierać trochę znaków nowej linii, a wyjście z @code{diff} będzie
się składać z porcji pokazujących różnice pomiędzy długimi liniami jakichś
tam znaków zawartych w pliku.

Można też zmusić @code{diff}, by traktował pliki jako binarne i informował
tylko czy się różnią (ale nie jak).  Używamy do tego opcji @samp{--brief}.

W systemach operacyjnych rozróżniających pliki tekstowe i binarne @code{diff}
normalnie czyta i zapisuje wszystkie dane jako tekst.  Do wymuszenia odczytu
i zapisu binarnego służy opcja @samp{--binary}.  Ta opcja nie ma żadnego
efektu na systemach zgodnych z POSIX, jak GNU czy tradycyjne Uniksy.
Jednak wiele systemów operacyjnych komputerów osobistych oznacza koniec
linii dwuznakową sekwencją: znakiem powrotu karetki plus znak nowej linii.
Na takich systemach @code{diff} normalnie ignoruje powroty karetki na wejściu
i generuje je na końcu każdej linii wyjściowej, ale z opcją @samp{--binary}
traktuje powrót karetki jak każdy inny znak wejściowy i nie dokłada go na
końcu tworzonych linii.  Może to być przydatne do operowania na plikach
nie-tekstowych, które mają być wymieniane z systemami POSIX-owymi.

Chcąc porównać dwa pliki bajt po bajcie, korzystamy z programu @code{cmp}
z opcją @samp{-l}, pokazującą wartości wszystkich różniących się bajtów.
Stosując GNU @code{cmp} można również skorzystać z opcji @samp{-c},
pokazującej reprezentację ASCII tych bajtów.
@xref{Wywołanie cmp}, gdzie podano szczegóły.

Jeśli @code{diff3} sądzi, że któryś z porównywanych plików jest binarny
(nie-tekstowy), normalnie zgłasza błąd, gdyż porównania takie na ogół
są nieprzydatne.  @code{diff3} do rozstrzygnięcia, czy plik jest binarny
używa tego samego testu.  Tak jak w @code{diff}, jeśli pliki wejściowe
zawierają jakieś nie-tekstowe znaki, ale poza tym są plikami tekstowymi,
możemy za pomocą opcji @samp{-a} lub @samp{--text} zmusić @code{diff3},
by traktował wszystkie pliki jak tekstowe i porównywał je linia po linii.

@node Formaty wyjściowe, Porównywanie katalogów, Porównanie, Top
@chapter Formaty wyjściowe @code{diff}
@cindex wyjście, formaty
@cindex format wyjścia @code{diff}

@code{diff} ma kilka wzajemnie wykluczających się opcji sterujących formatem
wyjściowym.  W poniższych sekcjach opisano wszystkie formaty, ilustrując
jak @code{diff} raportuje różnice między dwoma przykładowymi plikami
wejściowymi.

@menu
* Przykładowe wejście diff::	Pliki wejściowe do przykładów @code{diff}.
* Normalny::			Pokazanie różnic bez okalającego tekstu.
* Kontekstowy::	 		Pokazanie różnic z okalającym je tekstem.
* Dwukolumnowy::        	Pokazanie różnic obok siebie, w dwu kolumnach.
* Skrypty::  			Generowanie skryptów dla innych programów.
* If-then-else::     		Scalanie plików z użyciem if-then-else.
@end menu

@node Przykładowe wejście diff, Normalny, , Formaty wyjściowe
@section Dwa przykładowe pliki wejściowe
@cindex @code{diff}, przykładowe wejście
@cindex przykładowe pliki wejściowe dla @code{diff}

Oto dwa przykładowe pliki, z których korzystamy w licznych przykładach
do pokazania wyjścia uzyskiwanego z @code{diff} i tego, jak zmienia się ono
w zależności od różnych opcji.

To jest plik @file{lao}:

@example
Tao, które można wyrazić słowami, nie jest prawdziwym tao.
Nazwa, którą można je określić, nie jest niezmienną nazwą.
Bezimienne jest początkiem nieba i ziemi,
Nazwane jest matką wszystkich rzeczy.
Przeto, kto trwale pozbawion jest pragnień wszelakich,
  potrafi dojrzeć subtelną istotę tao,
zaś, kto niezmiennie tkwi w pętach swych pragnień,
  może tylko ujrzeć zewnętrzną pozorność rzeczy.
Te dwie strony tao wywodzą się
ze wspólnego źródła,
  lecz noszą odmienne nazwy.
@end example

To jest plik @file{tsy}:

@example
Bezimienne jest początkiem nieba i ziemi,
nazwane jest matką wszystkich rzeczy.

Przeto, kto trwale pozbawion jest pragnień wszelakich,
  potrafi dojrzeć subtelną istotę tao,
zaś, kto niezmiennie tkwi w pętach swych pragnień,
  może tylko ujrzeć zewnętrzną pozorność rzeczy.
Te dwie strony tao wywodzą się
ze wspólnego źródła,
  lecz noszą odmienne nazwy.
To, co w nich wspólne, nazywamy wielką tajemnicą,
tajemnicą nad tajemnicami,
bramą do poznania wszelakich cudowności.
@end example

W tym przykładzie, pierwsza porcja składa się tylko z dwu pierwszych linii
@c              opposing the second
z @file{lao}, druga zawiera czwartą linię @file{lao} porównaną
z drugą i trzecią linią @file{tsy}, a ostatnia porcja - ostatnie trzy
linie @file{tsy}.

@node Normalny, Kontekstowy, Przykładowe wejście diff, Formaty wyjściowe
@section Pokazanie różnic bez kontekstu
@cindex normalny format wyjściowy
@cindex @samp{<}, format wyjściowy

``Normalny'' format wyjścia @code{diff} pokazuje każdą porcję różnic bez
otaczających ją linii kontekstu.  Czasem takie wyjście najczytelniej
pokazuje, jak się zmieniły linie, bez rozpraszających sąsiednich
niezmienionych linii (choć podobne rezultaty można osiągnąć z formatem
kontekstowym lub zunifikowanym stosując 0 linii kontekstu).  Format ten
jednakże przestał już być szeroko używany do rozsyłania łat; w tym
zastosowaniu przewyższa go format kontekstowy (@pxref{Format kontekstowy})
i format zunifikowany (@pxref{Format zunifikowany}).  Format normalny jest
formatem domyślnym z powodu zgodności ze starszymi wersjami @code{diff}
i standardem Posix.

@menu
* Szczegóły normalnego::   Szczegółowy opis normalnego formatu wyjściowego.
* Przykład normalnego::	   Przykładowe wyjście w formacie normalnym.
@end menu

@node Szczegóły normalnego, Przykład normalnego, , Normalny
@subsection Szczegółowy opis normalnego formatu wyjściowego

Normalny format wyjściowy składa się z co najmniej jednej porcji różnic.
Każda pokazuje jeden obszar, w którym pliki się różnią.  Porcje formatu
normalnego wyglądają tak:

@example
@var{polecenie-zmiany}
< @var{linia-pliku-źródłowego}
< @var{linia-pliku-źródłowego}@dots{}
---
> @var{linia-pliku-docelowego}
> @var{linia-pliku-docelowego}@dots{}
@end example

Występują trzy rodzaje poleceń zmiany.  Każde składa się z numeru linii
lub zakresu oddzielonych przecinkami linii z pierwszego pliku, pojedynczego
znaku wskazującego rodzaj zmiany, jaka powinna zostać wykonana, i numeru
linii lub zakresu oddzielonych przecinkami linii z drugiego pliku.
Wszystkie numery linii są numerami pierwotnych linii plików.
Typy poleceń zmiany:

@table @samp
@item @var{l}a@var{r}
Dodanie (add) linii z zakresu @var{r} drugiego pliku po linii @var{l}
pierwszego pliku.  Na przykład, @samp{8a12,15} oznacza dołączenie linii
12--15 pliku 2 po linii 8 pliku 1; albo, jeśli zmieniamy plik 2 na plik 1,
usunięcie linii 12--15 pliku 2.

@item @var{f}c@var{t}
Zastąpienie (change - zmiana) linii z zakresu @var{f} pierwszego pliku
liniami z zakresu @var{t} drugiego pliku.  Przypomina połączenie dodawania
z usuwaniem, lecz jest bardziej zwięzłe.  Na przykład, @samp{5,7c8,10}
@c               file 1 to read as lines 8--10
oznacza zmianę linii 5--7 pliku 1 na zawartość linii 8--10
pliku 2; albo, jeśli zmieniamy plik 2 na plik 1, zmiana linii 8--10 pliku 2
na treść linii 5--7 pliku 1.

@item @var{r}d@var{l}
Usunięcie (delete) linii z zakresu @var{r} z pierwszego pliku.  Linia @var{l}
wskazuje miejsce, gdzie pojawiłyby się one w drugim pliku, gdyby nie zostały
usunięte.  Na przykład, @samp{5,7d3} oznacza usunięcie linii 5--7 pliku 1;
albo, jeśli zmieniamy plik 2 na plik 1, dołączenie linii 5--7 pliku 1
po linii 3 pliku 2.
@end table

@node Przykład normalnego, , Szczegóły normalnego, Normalny
@subsection Przykład formatu normalnego

Oto wynik działania polecenia @samp{diff lao tsy}
(@pxref{Przykładowe wejście diff}, gdzie podano pełną postać użytych plików).
Zauważ, że pokazuje ono tylko te linie, które są różne w obu plikach.

@example
1,2d0
< Tao, które można wyrazić słowami, nie jest prawdziwym tao.
< Nazwa, którą można je określić, nie jest niezmienną nazwą.
4c2,3
< Nazwane jest matką wszystkich rzeczy.
---
> nazwane jest matką wszystkich rzeczy.
> 
11a11,13
> To, co w nich wspólne, nazywamy wielką tajemnicą,
> tajemnicą nad tajemnicami,
> bramą do poznania wszelakich cudowności.
@end example

@node Kontekstowy, Dwukolumnowy, Normalny, Formaty wyjściowe
@section Pokazanie różnic wewnątrz ich kontekstu
@cindex context, format wyjściowy
@cindex kontekstowy, format wyjściowy
@cindex @samp{!}, format wyjściowy

Zazwyczaj, gdy oglądamy różnice między plikami, chcemy też widzieć
części plików w pobliżu różniących się linii. Pomaga to zrozumieć dokładnie,
co się zmieniło.  Części plików sąsiadujące z danymi liniami nazywane są
@dfn{kontekstem} @dfn{context}.

GNU @code{diff} obsługuje dwa formaty wyjściowe pokazujące kontekst wokół
różniących się linii: @dfn{format kontekstowy} (@dfn{context format})
i @dfn{format zunifikowany} (@dfn{unified format}).  Opcjonalnie może
pokazać, w jakiej funkcji lub sekcji pliku znaleziono różniące się linie.

Do rozpowszechniania nowych wersji plików w postaci wyjścia z @code{diff}
powinniśmy używać jednego z formatów pokazujących kontekst, by odbiorcy
mogli zaaplikować różnice nawet jeśli poczynili w swoich własnych plikach
niewielkie zmiany.  W tym przypadku @code{patch} nakłada łatę szukając
w plikach linii kontekstu wokół linii różnic. Jeśli linie kontekstu są
faktycznie nieco dalej, niż wskazuje plik różnicowy, to @code{patch} umie
dopasować odpowiednio numery linii i nadal poprawnie zastosować łatę.
@xref{Niedoskonałe}, gdzie szerzej opisano wykorzystanie @code{patch} do
@c                      imperfect diffs.
nakładania niedokładnie pasujących łat.

@menu
* Format kontekstowy::	Format wyjściowy pokazujący otaczające linie.
* Format zunifikowany::	Bardziej skondensowany format wyjściowy z kontekstem.
* Sekcje::		Pokazanie, w których sekcjach plików są różnice.
* Nazwy zastępcze::	Pokazanie w nagłówkach kontekstowych zastępczych
			nazw plików.
@end menu

@node Format kontekstowy, Format zunifikowany, , Kontekstowy
@subsection Format kontekstowy

Kontekstowy format wyjścia pokazuje wokół linii, które się różnią kilka
linii kontekstu.  Jest to standardowy format do dystrybucji uaktualnień
kodu źródłowego.
Wybiera się go za pomocą opcji @samp{-C @var{linie}},
@samp{--context@r{[}=@var{linie}@r{]}} lub @samp{-c}.  Argument @var{linie},
pobierany przez część z nich, wskazuje, ile linii kontekstu ma być pokazane.
Jeśli nie podamy @var{linie}, zostanie użyta wartość domyślna - trzy.
Do prawidłowego działania @code{patch} potrzebuje na ogół co najmniej dwu
linii kontekstu.

@menu
* Szczegóły kontekstowego::	Szczegółowy opis formatu kontekstowego.
* Przykład kontekstowego::	Przykładowe wyjście w formacie kontekstowym.
* Mniej kontekstu::		Inny przykład z mniejszym kontekstem.
@end menu

@node Szczegóły kontekstowego, Przykład kontekstowego, , Format kontekstowy
@subsubsection Szczegółowy opis formatu kontekstowego

Format kontekstowy zaczyna się od dwulinijkowego nagłówka, który wygląda tak:

@example
*** @var{plik-źródłowy} @var{czas-modyfikacji-pliku-źródłowego}
--- @var{plik-docelowy} @var{czas-modyfikacji-pliku-docelowego}
@end example

@noindent
Zawartość nagłówka zmieniamy opcją @samp{-L @var{etykieta}} lub
@samp{--label=@var{etykieta}}; zob. @ref{Nazwy zastępcze}.

Dalej następuje przynajmniej jedna porcja różnic; każda z nich pokazuje
jeden obszar, w którym pliki się różnią.  Porcje w formacie kontekstowym
wyglądają tak:

@example
***************
*** @var{zakres-linii-pliku-źródłowego} ****
  @var{linia-pliku-źródłowego}
  @var{linia-pliku-źródłowego}@dots{}
--- @var{zakres-linii-pliku-docelowego} ----
  @var{linia-pliku-docelowego}
  @var{linia-pliku-docelowego}@dots{}
@end example

Linie kontekstu wokół linii, którymi różnią się pliki zaczynają się dwiema
spacjami.  Linie, którymi różnią się pliki zaczynają się jednym z poniższych
znaczników, po którym następuje znak spacji:

@table @samp
@item !
Linia, będąca częścią grupy linii, które się zmieniły między oboma plikami.
W tej samej porcji istnieje grupa odpowiadających im linii drugiego pliku,
także oznaczonych wykrzyknikiem @samp{!}.

@item +
``Wstawiona'' linia w drugim pliku, która nie ma odpowiednika w pierwszym
pliku.

@item -
``Usunięta'' linia w pierwszym pliku, która nie ma odpowiednika w drugim
pliku.
@end table

Jeśli wszystkie zmiany w porcji są wstawieniami, linie pliku
@var{pliku-źródłowego} są pomijane.  Jeśli wszystkie zmiany są usunięciami,
pomijane są linie @var{pliku-docelowego}.

@node Przykład kontekstowego, Mniej kontekstu, Szczegóły kontekstowego, Format kontekstowy
@subsubsection Przykład formatu kontekstowego

Oto wynik działania polecenia @samp{diff -c lao tsy}
(@pxref{Przykładowe wejście diff}, gdzie podano pełną postać użytych plików).
Zauważ, że przed i po każdej różniącej się linii pokazane są trzy
(co najwyżej) linie z nią sąsiadujące.  Są to linie kontekstu.
Zauważ też, że pierwsze dwie porcje idą razem, gdyż ich zawartość się
nakłada.

@example
*** lao	Sat Jan 26 23:30:39 1991
--- tsy	Sat Jan 26 23:30:50 1991
***************
*** 1,7 ****
- Tao, które można wyrazić słowami, nie jest prawdziwym tao.
- Nazwa, którą można je określić, nie jest niezmienną nazwą.
  Bezimienne jest początkiem nieba i ziemi,
! Nazwane jest matką wszystkich rzeczy.
  Przeto, kto trwale pozbawion jest pragnień wszelakich,
    potrafi dojrzeć subtelną istotę tao,
  zaś, kto niezmiennie tkwi w pętach swych pragnień,
--- 1,6 ----
  Bezimienne jest początkiem nieba i ziemi,
! nazwane jest matką wszystkich rzeczy.
! 
  Przeto, kto trwale pozbawion jest pragnień wszelakich,
    potrafi dojrzeć subtelną istotę tao,
  zaś, kto niezmiennie tkwi w pętach swych pragnień,
***************
*** 9,11 ****
--- 8,13 ----
  Te dwie strony tao wywodzą się
  ze wspólnego źródła,
    lecz noszą odmienne nazwy.
+  To, co w nich wspólne, nazywamy wielką tajemnicą,
+  tajemnicą nad tajemnicami,
+  bramą do poznania wszelakich cudowności.
@end example

@node Mniej kontekstu, , Przykład kontekstowego, Format kontekstowy
@subsubsection Przykład formatu kontekstowego z mniejszym kontekstem

Oto wynik działania polecenia @samp{diff --context=1 lao tsy}
(@pxref{Przykładowe wejście diff}, gdzie podano pełną postać użytych plików).
Zauważ, że tutaj zgłaszana jest co najwyżej jedna linia kontekstu.

@example
*** lao	Sat Jan 26 23:30:39 1991
--- tsy	Sat Jan 26 23:30:50 1991
***************
*** 1,5 ****
- Tao, które można wyrazić słowami, nie jest prawdziwym tao.
- Nazwa, którą można je określić, nie jest niezmienną nazwą.
  Bezimienne jest początkiem nieba i ziemi,
! Nazwane jest matką wszystkich rzeczy.
  Przeto, kto trwale pozbawion jest pragnień wszelakich,
--- 1,4 ----
  Bezimienne jest początkiem nieba i ziemi,
! nazwane jest matką wszystkich rzeczy.
! 
  Przeto, kto trwale pozbawion jest pragnień wszelakich,
***************
*** 11 ****
--- 10,13 ----
    lecz noszą odmienne nazwy.
+  To, co w nich wspólne, nazywamy wielką tajemnicą,
+  tajemnicą nad tajemnicami,
+  bramą do poznania wszelakich cudowności.
@end example

@node Format zunifikowany, Sekcje, Format kontekstowy, Kontekstowy
@subsection Format zunifikowany
@cindex zunifikowany format wyjściowy
@cindex @samp{+-}, format wyjściowy

Zunifikowany format wyjściowy jest odmianą formatu kontekstowego, bardziej
zwartą, gdyż pomija zbyteczne linie kontekstu.
Wybiera się go za pomocą opcji @samp{-U @var{linie}},
@samp{--unified@r{[}=@var{linie}@r{]}} lub @samp{-u}.  Argument @var{linie},
pobierany przez część z nich, wskazuje, ile linii kontekstu ma być pokazane.
Jeśli nie podamy @var{linie}, zostanie użyta wartość domyślna - trzy.

Obecnie tylko GNU @code{diff} potrafi utworzyć taki format i tylko GNU
@code{patch} umie automatycznie stosować łaty tego formatu.  Do poprawnego
działania @code{patch} zwykle potrzebuje przynajmniej dwu linii kontekstu.

@menu
* Szczegóły zunifikowanego::	Szczegółowy opis formatu zunifikowanego.
* Przykład zunifikowanego::	Przykładowe wyjście w formacie zunifikowanym.
@end menu

@node Szczegóły zunifikowanego, Przykład zunifikowanego, , Format zunifikowany
@subsubsection Szczegółowy opis formatu zunifikowanego

Format zunifikowany zaczyna się od dwulinijkowego nagłówka, który wygląda 
tak:

@example
--- @var{plik-źródłowy} @var{czas-modyfikacji-pliku-źródłowego}
+++ @var{plik-docelowy} @var{czas-modyfikacji-pliku-docelowego}
@end example

@noindent
Zawartość nagłówka zmieniamy opcją @samp{-L @var{etykieta}} lub
@samp{--label=@var{etykieta}}; zob. @ref{Nazwy zastępcze}.

Dalej następuje co najmniej jedna porcja różnic; każda z nich pokazuje
jeden obszar, w którym pliki się różnią.  Porcje w formacie zunifikowanym
wyglądają tak:

@example
@@@@ @var{zakres-linii-pliku-źródłowego} @var{zakres-linii-pliku-
docelowego} @@@@
 @var{linia-z-jednego-z-plików}
 @var{linia-z-jednego-z-plików}@dots{}
@end example

Linie wspólne obu plikom zaczynają się od znaku spacji.  Linie, które
faktycznie odróżniają od siebie pliki mają w lewej kolumnie jeden
z poniższych znaczników:

@table @samp
@item +
Linia została tu dodana do pierwszego pliku.

@item -
Linia została tu usunięta a pierwszego pliku.
@end table

@node Przykład zunifikowanego, , Szczegóły zunifikowanego, Format zunifikowany
@subsubsection Przykład formatu zunifikowanego

Oto wynik działania polecenia @samp{diff -u lao tsy}
(@pxref{Przykładowe wejście diff}, gdzie podano pełną postać użytych plików):

@example
--- lao	Sat Jan 26 23:30:39 1991
+++ tsy	Sat Jan 26 23:30:50 1991
@@@@ -1,7 +1,6 @@@@
-Tao, które można wyrazić słowami, nie jest prawdziwym tao.
-Nazwa, którą można je określić, nie jest niezmienną nazwą.
 Bezimienne jest początkiem nieba i ziemi,
-Nazwane jest matką wszystkich rzeczy.
+nazwane jest matką wszystkich rzeczy.
+
 Przeto, kto trwale pozbawion jest pragnień wszelakich,
   potrafi dojrzeć subtelną istotę tao,
 zaś, kto niezmiennie tkwi w pętach swych pragnień,
@@@@ -9,3 +8,6 @@@@
 Te dwie strony tao wywodzą się
 ze wspólnego źródła,
   lecz noszą odmienne nazwy.
+To, co w nich wspólne, nazywamy wielką tajemnicą,
+tajemnicą nad tajemnicami,
+bramą do poznania wszelakich cudowności.
@end example

@node Sekcje, Nazwy zastępcze, Format zunifikowany, Kontekstowy
@subsection Pokazanie, w których sekcjach plików są różnice
@cindex nagłówki sekcji
@cindex sekcje, nagłówki

Czasem chcielibyśmy wiedzieć, w której części pliku wypadła każda ze zmian.
Jeśli pliki są kodem źródłowym, możemy przez to rozumieć, która funkcja się
zmieniła.  Jeśli pliki są dokumentami, możemy mieć na myśli, który rozdział
czy dodatek się zmienił.  GNU @code{diff} potrafi to pokazać wyświetlając
najbliższą linię nagłówka sekcji poprzedzającą linie różnic.
Jakie linie są ``nagłówkami sekcji'' określa się za pomocą wyrażenia
regularnego.

@menu
* Podane nagłówki::    Pokazanie nagłówków pasujących do wyrażenia regularnego.
* Nagłówki funkcji C:: Pokazanie nagłówków funkcji C.
@end menu

@node Podane nagłówki, Nagłówki funkcji C, , Sekcje
@subsubsection Pokazanie linii pasujących do wyrażenia regularnego.
@cindex podawanie nagłówków
@cindex wyrażenie regularne dopasowujące nagłówki
@cindex regexp dopasowujące nagłówki

W celu wskazania, w których sekcjach plików, nie będących kodem źródłowym C
czy podobnych języków, występują różnice korzystamy z opcji
@samp{-F @var{regexp}} lub @samp{--show-function-line=@var{regexp}}.
@code{diff} uważa linie pasujące do argumentu @var{regexp} za początek
kolejnej sekcji pliku.  Oto sugerowane wyrażenia regularne dla kilku
popularnych języków programowania:

@c Please add to this list, e.g. Fortran, Pascal.
@table @samp
@item ^[A-Za-z_]
C, C++, Prolog
@item ^(
Lisp
@item ^@@\(chapter\|appendix\|unnumbered\|chapheading\)
Texinfo
@end table

Opcja dopasowywania nagłówka nie wybiera automatycznie formatu wyjściowego.
By z niej skorzystać, trzeba wybrać format kontekstowy
(@pxref{Format kontekstowy}) lub zunifikowany (@pxref{Format zunifikowany}).
Użyta przy innych formatach wyjściowych nie ma żadnych skutków.

Opcje @samp{-F} i @samp{--show-function-line} dla każdej z porcji różnic
szukają najbliższej niezmienionej linii, która ją poprzedza i pasuje
do zadanego wyrażenia regularnego.  Następnie dodają tę linię na koniec linii
gwiazdek w formacie kontekstowym lub linii z @samp{@@@@} w zunifikowanym.
Jeśli nie istnieje pasująca linia, to wyjście wyprowadzane dla tej porcji
pozostaje bez zmian.  Jeśli linia ma ponad 40 znaków, to wypisywane jest
tylko 40 początkowych znaków.  Dla takich linii można podać więcej niż jedno
wyrażenie regularne.  @code{diff} usiłuje dopasować każdą linię do każdego
wyrażenia, poczynając od ostatniego podanego.  To znaczy, że można stosować
równocześnie opcje @samp{-p} i @samp{-F}.

@node Nagłówki funkcji C, , Podane nagłówki, Sekcje
@subsubsection Pokazanie nagłówków funkcji C
@cindex nagłówki funkcji C
@cindex C, nagłówki funkcji
@cindex funkcje C, nagłówki

W celu wskazania, w których funkcjach C czy podobnych języków,
występują różnice korzystamy z opcji @samp{-p} lub
@samp{--show-c-function}.  Ta opcja, inaczej niż @samp{-F}, automatycznie
domyślnie stosuje kontekstowy format wyjściowy (@pxref{Format kontekstowy}),
z domyślną liczbą linii kontekstu.  Liczbę tę można przesłonić własną
wartością za pomocą @samp{-C @var{linie}} w innym miejscu wiersza poleceń.
Można też zastąpić zarówno domyślny format, jak i ilość linii kontekstu,
stosując w wierszu poleceń dodatkowo @samp{-U @var{linie}}.

Opcje @samp{-p} i @samp{--show-c-function} są równoważne
@samp{-F'^[_a-zA-Z$]'} jeśli podano format zunifikowany lub
@samp{-c -F'^[_a-zA-Z$]'} w przeciwnym razie  (@pxref{Podane nagłówki}).
GNU @code{diff} udostępnia je ze względu na wygodę używania.

@node Nazwy zastępcze, , Sekcje, Kontekstowy
@subsection Pokazanie zastępczych nazw plików
@cindex zastępcze nazwy plików
@cindex nazwy plików, zastępcze

Porównując dwa pliki o nic nie mówiących lub niewiele mówiących nazwach
zapewne chcielibyśmy, by @code{diff} w nagłówku formatu kontekstowego czy
zunifikowanego pokazał jakieś ich nazwy zastępcze.
Służy do tego opcja @samp{-L @var{etykieta}} lub
@samp{--label=@var{etykieta}}.  Przy pierwszym podaniu tej opcji, jej
argument zastępuje w nagłówku nazwę i datę pierwszego pliku.  Drugie użycie
opcji zastępuje argumentem nazwę i datę drugiego pliku.  Jeśli opcję podamy
więcej niż dwa razy, @code{diff} zgłosi błąd.  Opcja @samp{-L} nie ma wpływu
na nazwy plików w nagłówku @code{pr} (tworzonym gdy korzystamy z opcji
@samp{-l} lub @samp{--paginate} (@pxref{Stronicowanie}).

Oto dwie pierwsze linie wyjścia polecenia @samp{diff -C2 -Lpierwotny
-Lzmieniony lao tsy}:

@example
*** pierwotny
--- zmieniony
@end example

@node Dwukolumnowy, Skrypty, Kontekstowy, Formaty wyjściowe
@section Pokazanie różnic obok siebie
@cindex obok siebie
@cindex dwukolumnowe, wyjście
@cindex kolumnowe, wyjście

@code{diff} potrafi utworzyć wykaz różnic umieszczonych obok siebie.
Pliki są wypisywane w dwu kolumnach, z odstępem międzykolumnowym.
@c                             the gutter
Odstęp między kolumnami zawiera jeden z poniższych znaczników:

@table @asis
@item biały znak
Odpowiednie linie są wspólne.  To znaczy, albo linie są identyczne, albo
różnica jest ignorowana z powodu jednej z opcji @samp{--ignore}
(@pxref{Odstępy}).

@item @samp{|}
Odpowiednie linie różnią się i są albo obie kompletne albo obie niekompletne.

@item @samp{<}
Pliki się różnią i tylko pierwszy z nich zawiera tę linię.

@item @samp{>}
Pliki się różnią i tylko drugi z nich zawiera tę linię.

@item @samp{(}
Tylko pierwszy plik zawiera tę linię, ale różnica jest ignorowana.

@item @samp{)}
Tylko drugi plik zawiera tę linię, ale różnica jest ignorowana.

@item @samp{\}
Odpowiednie linie różnią się, a tylko pierwsza linia jest niekompletna.

@item @samp{/}
Odpowiednie linie różnią się, a tylko druga linia jest niekompletna.
@end table

Normalnie, linia wyjściowa jest niekompletna wtedy i tylko wtedy gdy linie,
z jakich się składa są niekompletne @xref{Niekompletne linie}.  Jednak, gdy
linia wyjściowa reprezentuje dwie różniące się linie, jedna z nich może być
niekompletna, a druga nie.  W tym przypadku linia wyjściowa jest kompletna,
ale odstęp między jej kolumnami jest oznakowany @samp{\} jeśli niekompletna
jest pierwsza linia lub @samp{/} jeśli druga.

Format dwukolumnowy jest czasem łatwiejszy w czytaniu, ale ma ograniczenia.
Tworzy duże szersze wyjście niż zwykle i obcina linie, które się nie
@c                               relies on lining up output 
mieszczą.  Ponadto, znacznie bardziej niż zwykłe formaty, opiera się
na wyrównywaniu wyjścia, przez co wyniki wyglądają szczególnie źle gdy
korzystamy z czcionek zmiennej szerokości, niestandardowych tabulatorów czy
znaków niedrukowalnych.

Do interaktywnego scalania różnic pokazanych obok siebie używa się programu
@code{sdiff}.  @xref{Interaktywne scalanie}, gdzie bliżej opisano scalanie
plików.

@menu
* Format dwukolumnowy::		Sterowanie wyjściem formatu dwukolumnowego.
* Przykład dwukolumnowy::	Przykład wyjścia dwukolumnowego.
@end menu

@node Format dwukolumnowy, Przykład dwukolumnowy, , Dwukolumnowy
@section Sterowanie formatem dwukolumnowym
@cindex side-by-side, format wyjściowy
@cindex dwukolumnowy format wyjściowy
@cindex kolumnowy format wyjściowy

Format o liniach obok siebie wybierany jest opcją @samp{-y} lub
@samp{--side-by-side}.  Ponieważ linie wyjściowe zawierają dwie linie wejścia
obok siebie, są szersze niż zwykle.  Normalnie mają 130 kolumn, co powinno
się zmieścić w tradycyjnej linii drukarki.  Długość linii wyjściowych ustawia
się opcją @samp{-W @var{kolumny}} lub @samp{--width=@var{kolumny}}.
Linia wyjściowa podzielona jest na dwie połówki jednakowej długości,
rozdzielone niewielką przestrzenią do zaznaczania różnic.  Prawa połówka
wyrównana jest do tabulatora, tak, że tabulacje są wyrównane.  Linie
wejściowe, które są zbyt długie, by zmieścić się w połówce linii wyjściowej
są w wyniku obcinane.

Opcja @samp{--left-column} dla dwu wspólnych linii wypisuje tylko lewą
kolumnę.  Opcja @samp{--suppress-common-lines} całkowicie eliminuje wspólne
linie.

@node Przykład dwukolumnowy, , Format dwukolumnowy, Dwukolumnowy
@subsection Przykład formatu dwukolumnowego

Oto wynik działania polecenia @samp{diff -y -W 72 lao tsy}
(@pxref{Przykładowe wejście diff}, gdzie podano pełną postać użytych plików).

@example
Tao, które można wyrazić słowami   <
Nazwa, którą można je określić,    <
Bezimienne jest początkiem nieba        Bezimienne jest początkiem nieba
Nazwane jest matką wszystkich rz   |    nazwane jest matką wszystkich rz
                                   >
Przeto, kto trwale pozbawion jes        Przeto, kto trwale pozbawion jes
  potrafi dojrzeć subtelną istot          potrafi dojrzeć subtelną istot
zaś, kto niezmiennie tkwi w pęta        zaś, kto niezmiennie tkwi w pęta
  może tylko ujrzeć zewnętrzną p          może tylko ujrzeć zewnętrzną p
Te dwie strony tao wywodzą się          Te dwie strony tao wywodzą się
ze wspólnego źródła,                    ze wspólnego źródła,
  lecz noszą odmienne nazwy.              lecz noszą odmienne nazwy.
                                   >    To, co w nich wspólne, nazywamy
                                   >      tajemnicą nad tajemnicami,
                                   >    bramą do poznania wszelakich cud
@end example

@node Skrypty, If-then-else, Dwukolumnowy, Formaty wyjściowe
@section Tworzenie skryptów edycyjnych
@cindex formaty wyjściowe tworzące skrypty
@cindex skryptowe formaty wyjściowe

Kilka trybów wyprowadzania wyjścia tworzy skrypty poleceń redagujące
@var{plik-źródłowy} tak, by otrzymać @var{plik-docelowy}.

@menu
* Skrypty ed::	Stosowanie @code{diff} do tworzenie poleceń dla @code{ed}.
* Forward ed::	Tworzenie skryptów @code{ed} skierowanych w przód.
* RCS::	      	Specjalny format wyjścia @code{diff} używany przez RCS.
@end menu

@node Skrypty ed, Forward ed, , Skrypty
@subsection Skrypty @code{ed}
@cindex skrypt @code{ed}, format wyjściowy
@cindex @code{ed}, skryptowy format wyjściowy

@code{diff} może tworzyć polecenia, które kierują edytorem tekstu @code{ed}
tak, aby przekształcił pierwszy plik w drugi.  Dawno temu był to jedyny tryb
wyjściowy nadający się do automatycznej zmiany jednego pliku w drugi.
Obecnie, z @code{patch}, jest on niemal przestarzały.  Do wyboru tego
formatu wyjściowego służy opcja @samp{-e} lub @samp{--ed}.

Podobnie jak format normalny (@pxref{Normalny}), ten format wyjściowy nie
pokazuje kontekstu.  Inaczej niż format normalny, nie zawiera
informacji niezbędnych do odwrotnego zastosowania różnicy (do utworzenia
pierwszego pliku jeśli mamy tylko drugi plik i różnicę).

Jeśli plik  @file{d} zawiera wyjście polecenia @samp{diff -e stary nowy},
to polecenia @samp{(cat d && echo w) | ed - stary} modyfikuje @file{stary}
tak, by zrobić z niego kopię @file{nowego}.  Bardziej ogólnie: jeśli
@file{d1}, @file{d2}, @dots{}, @file{dN} zawierają, odpowiednio, wyniki z
@samp{diff -e stary nowy1}, @samp{diff -e nowy1 nowy2}, @dots{},
@samp{diff -e nowyN-1 nowyN}, to polecenie @samp{(cat d1 d2 @dots{}
dN && echo w) | ed - stary} modyfikuje @file{stary} tak, by zrobić z niego
kopię @file{nowyN}.

@menu
* Szczegóły ed::	Szczegółowy opis formatu @code{ed}.
* Przykład ed::		Przykładowy skrypt @code{ed}.
@end menu

@node Szczegóły ed, Przykład ed, , Skrypty ed
@subsubsection Szczegółowy opis formatu @code{ed}

Format wyjściowy @code{ed} składa się z co najmniej jednej porcji różnic.
Zmiany najbliższe końca pliku występują jako pierwsze, tak że polecenia
zmieniające ilość linii nie mają wpływu na sposób interpretacji przez
@code{ed} numerów następnych poleceń.  W formacie @code{ed} porcje wyglądają
tak:

@example
@var{polecenie-zmiany}
@var{linia-pliku-docelowego}
@var{linia-pliku-docelowego}@dots{}
.
@end example

Ponieważ @code{ed} używa pojedynczej kropki w linii do wskazania końca
wejścia, GNU @code{diff} chroni linie zmian zawierające pojedynczą kropkę.
Wpisuje zamiast niej dwie kropki, a następnie dodaje kolejne polecenie
@code{ed} zmieniające dwie kropki w jedną.  Format @code{ed} nie potrafi
przedstawić niekompletnej linii, więc jeśli drugi plik kończy się zmienioną
niekompletną linią, @code{diff} zgłasza błąd, a następnie udaje, że dodano
znak nowej linii.

Istnieją trzy typy poleceń zmiany.  Każde składa się z numeru linii
(lub zakresu oddzielonych przecinkami linii) w pierwszym pliku i pojedynczego
znaku wskazującego na rodzaj zmian do wykonania.  Wszystkie numery linii
są pierwotnymi numerami linii pliku.  Typy poleceń zmiany:

@table @samp
@item @var{l}a
Dodanie (add) tekstu z drugiego pliku po linii numer @var{l} w pierwszym
pliku.  Na przykład, @samp{8a} oznacza dodanie wymienionych niżej linii
po ósmej linii pliku 1.

@item @var{r}c
Zastąpienie (change - zmiana) linii z zakresu @var{r} pierwszego pliku
liniami wymienionymi niżej.  Przypomina połączenie dodawania z usuwaniem,
lecz jest bardziej zwięzłe.  Na przykład, @samp{5,7c} oznacza zmianę linii
5--7 pliku 1 tak, by były równe tekstowi z pliku 2.

@item @var{r}d
Usunięcie (delete) linii z zakresu @var{r} z pierwszego pliku.  Na przykład,
@samp{5,7d} oznacza usunięcie linii 5--7 pliku 1.
@end table

@node Przykład ed, , Szczegóły ed, Skrypty ed
@subsubsection Przykład skryptu @code{ed}

Oto wynik działania polecenia @samp{diff -e lao tsy}
(@pxref{Przykładowe wejście diff}, gdzie podano pełną postać użytych plików):

@example
11a
To, co w nich wspólne, nazywamy wielką tajemnicą,
tajemnicą nad tajemnicami,
bramą do poznania wszelakich cudowności.
.
4c
nazwane jest matką wszystkich rzeczy.

.
1,2d
@end example

@node Forward ed, RCS, Skrypty ed, Skrypty
@subsection Skrypty @code{ed} skierowane w przód (forward @code{ed})
@cindex skrypt @code{ed} w przód, format wyjściowy
@cindex @code{ed} w przód, skryptowy format wyjściowy
@cindex forward @code{ed}, skryptowy format wyjściowy

@code{diff} może tworzyć wyjście podobne do skryptu @code{ed}, ale z porcjami
uporządkowanymi w przód (od początku pliku ku końcowi).  Format poleceń jest
nieco zmieniony: znaki poleceń występują przed liniami, których dotyczą,
w zakresach numery linii są oddzielane spacjami, w porcjach nie próbuje się
usuwać niejednoznaczności linii składających się z pojedynczej kropki.
Podobnie jak format @code{ed}, format @code{ed} uporządkowany w przód
(forward) nie potrafi przedstawić niekompletnych linii.

Wyjście typu forward @code{ed} jest niezbyt przydatne, gdyż ani @code{ed}
ani @code{patch} nie potrafią nakładać łat w tym formacie.
Istnieje on głównie z uwagi na zgodność ze starszymi wersjami @code{diff}.
Do wyboru tego formatu wyjściowego służy opcja @samp{-f}
lub @samp{--forward-ed}.


@node RCS, , Forward ed, Skrypty
@subsection Skrypty RCS
@cindex skrypt RCS, format wyjściowy
@cindex RCS, skryptowy format wyjściowy

Format wyjściowy RCS zaprojektowano specjalnie do stosowania z systemem
kontroli wersji RCS (Revision Control System), będącym zestawem wolnych
programów używanych do organizacji i zarządzania różnymi wersjami plików.
Do wyboru tego formatu wyjściowego służy opcja @samp{-n} lub @samp{--rcs}.
Przypomina format forward @code{ed} (@pxref{Forward ed}), ale potrafi
przedstawić dowolne zmiany zawartości pliku, gdyż unika problemów tamtego
formatu (z niekompletnymi liniami i liniami składającymi się z jednej
kropki).  Zamiast kończyć partie tekstu linią złożoną z pojedynczej kropki,
każde z poleceń określa liczbę linii, których dotyczy: zamiast poleceń
@samp{c} używane są kombinacje @samp{a} i @samp{d}.  Oprócz tego, jeśli
drugi plik kończy się zmienioną niekompletną linią, to wyjście również
kończy się niekompletną linią.

Oto wynik działania polecenia @samp{diff -n lao tsy}
(@pxref{Przykładowe wejście diff}, gdzie podano pełną postać użytych plików):

@example
d1 2
d4 1
a4 2
nazwane jest matką wszystkich rzeczy.

a11 3
To, co w nich wspólne, nazywamy wielką tajemnicą,
tajemnicą nad tajemnicami,
bramą do poznania wszelakich cudowności.
@end example

@node If-then-else, , Skrypty, Formaty wyjściowe
@section Scalanie plików za pomocą If-then-else
@cindex scalający format wyjściowy
@cindex if-then-else, format wyjściowy
@cindex C if-then-else, format wyjściowy
@cindex @code{ifdef}, format wyjściowy

@code{diff} można wykorzystać do scalenia dwu plików z kodem źródłowym C.
Wyjście w tym formacie zawiera wszystkie linie obu plików.  Linie wspólne
obu plikom są wypisywane tylko raz; części różniące pliki są rozdzielane
dyrektywami preprocesora C @code{#ifdef @var{nazwa}} lub
@code{#ifndef @var{nazwa}}, @code{#else}, and @code{#endif}.
Podczas kompilacji takiego wyjścia pożądaną wersję wybieramy albo definiując
albo pozostawiając niezdefiniowane makro @var{nazwa}.

Do scalania plików wywołuje się @code{diff} z opcją @samp{-D @var{nazwa}}
lub @samp{--ifdef=@var{nazwa}}.  Argument @var{nazwa} jest identyfikatorem C,
jaki ma zostać użyty w dyrektywach @code{#ifdef} i @code{#ifndef}.

Na przykład, jeśli zmienimy wystąpienie @code{wait (&s)} na
@code{waitpid (-1, &s, 0)}, a następnie scalimy stary i nowy plik za pomocą
opcji @samp{--ifdef=HAVE_WAITPID}, to część kodu objęta zmianami może
wyglądać mniej więcej tak:

@example
    do @{
#ifndef HAVE_WAITPID
        if ((w = wait (&s)) < 0  &&  errno != EINTR)
#else /* HAVE_WAITPID */
        if ((w = waitpid (-1, &s, 0)) < 0  &&  errno != EINTR)
#endif /* HAVE_WAITPID */
            return w;
    @} while (w != child);
@end example

Można też określać formaty dla języków innych niż C, stosując formaty
grup linii i formaty linii, jak opisano w kolejnych sekcjach.

@menu
* Formaty grup linii::		Formaty ogólne grup linii if-then-else.
* Formaty linii::		Formaty poszczególnych linii w grupie.
* Szczegóły If-then-else::	Szczegółowy opis formatu if-then-else.
* Przykładowy If-then-else::	Przykładowy format wyjściowy if-then-else.
@end menu

@node Formaty grup linii, Formaty linii, , If-then-else
@subsection Formaty grup linii
@cindex formaty grup linii
@cindex formaty dla grup linii if-then-else

Formaty grup linii pozwalają na podanie formatów stosownych dla wielu
aplikacji, które dopuszczają wejście typu if-then-else, łącznie z językami
programowania i językami formatowania tekstu.
Format grup linii określa format wyjściowy dla ciągłej grupy podobnych linii.

Na przykład, poniższe polecenie porównuje TeX-owe pliki @file{stary}
i @file{nowy} i wypisuje scalony plik, w którym stare miejsca ujęte są
pomiędzy linie @samp{\begin@{em@}}-@samp{\end@{em@}}, a nowe między linie
@samp{\begin@{bf@}}-@samp{\end@{bf@}}.

@example
diff \
   --old-group-format='\begin@{em@}
%<\end@{em@}
' \
   --new-group-format='\begin@{bf@}
%>\end@{bf@}
' \
   stary nowy
@end example

Poniższe polecenie jest równoważne powyższemu przykładowi, ale trochę
@c        it spells out the default line group formats.
rozwleklejsze, gdyż przytacza dla jasności domyślne formaty grup linii.

@example
diff \
   --old-group-format='\begin@{em@}
%<\end@{em@}
' \
   --new-group-format='\begin@{bf@}
%>\end@{bf@}
' \
   --unchanged-group-format='%=' \
   --changed-group-format='\begin@{em@}
%<\end@{em@}
\begin@{bf@}
%>\end@{bf@}
' \
   stary nowy
@end example

Oto bardziej rozbudowany przykład, w którym wypisywana jest lista różnic
z nagłówkami zawierającymi numery linii i opisy w ``zwykłym angielskim''.
[tłum.: bardziej skomplikowana polszczyzna nie daje się wtłoczyć w tak
proste konstrukcje]

@example
diff \
   --unchanged-group-format='' \
   --old-group-format='-------- %dn line%(n=1?:s) deleted at %df:
%<' \
   --new-group-format='-------- %dN line%(N=1?:s) added after %de:
%>' \
   --changed-group-format='-------- %dn line%(n=1?:s) changed at %df:
%<-------- to:
%>' \
   old new
@end example

Do podania formatu grupy linii używa się @code{diff} z jedną z wymienionych
niżej opcji.  Można podać do czterech formatów grup linii, po jednym dla
każdego rodzaju grup.  @var{format} powinien być cytowany, gdyż zwykle
zawiera metaznaki powłoki.

@table @samp
@item --old-group-format=@var{format}
Te grupy to porcje zawierające linie tylko z pierwszego pliku.
Domyślny format grup starych linii jest taki sam, jak format grup
linii zmienionych, jeśli takowy został podany; w przeciwnym razie format
ten wypisuje grupę linii dosłownie, bez zmian czy dodatków.

@item --new-group-format=@var{format}
Te grupy to porcje zawierające linie tylko z drugiego pliku.
Domyślny format grup nowych linii jest taki sam, jak format grup
linii zmienionych, jeśli takowy został podany; w przeciwnym razie format
ten wypisuje grupę linii dosłownie, bez zmian czy dodatków.

@item --changed-group-format=@var{format}
Te grupy są porcjami zawierającymi linie z obu plików.
Domyślny format grup zmienionych linii jest złączeniem (konkatenacją)
formatów grup nowych i starych linii.

@item --unchanged-group-format=@var{format}
Te grupy zawierają składają się z linii wspólnych obu plikom.
Domyślnym formatem grup niezmienionych linii jest format wypisujący
grupę linii dosłownie.
@end table

W formatach określających sposób wypisania grupy linii zwykłe znaki oznaczają
same siebie; specyfikacje konwersji zaczynają się od znaku procentu @samp{%}
i mają jedną z poniższych postaci:

@table @samp
@item %<
oznacza linie z pierwszego pliku, łącznie z końcowym znakiem nowej linii.
Każda linia jest formatowana zgodnie z formatem starych linii
(@pxref{Formaty linii}).

@item %>
oznacza linie z drugiego pliku, łącznie z końcowym znakiem nowej linii.
Każda linia jest formatowana zgodnie z formatem nowych linii

@item %=
oznacza linie wspólne dla obu plików, łącznie z końcowym znakiem nowej linii.
Każda linia jest formatowana zgodnie z formatem linii niezmienionych.

@item %%
oznacza pojedynczy dosłowny znak procentu @samp{%}.

@item %c'@var{C}'
gdzie @var{C} jest pojedynczym znakiem, oznacza @var{C}.
Nie może to być odwrotny ukośnik ani apostrof.
Na przykład, @samp{%c':'} oznacza dwukropek,, nawet wewnątrz części then
formatu if-then-else, którą dwukropek normalnie kończy.

@item %c'\@var{O}'
gdzie @var{O} jest łańcuchem 1, 2 lub 3 cyfr ósemkowych, oznacza znak
o kodzie ósemkowym @var{O}.
Na przykład, @samp{%c'\0'} oznacza znak null.

@item @var{F}@var{n}
gdzie @var{F} jest specyfikacją konwersji @code{printf}, a @var{n} jest
jedną z niżej wymienionych liter, oznacza wartość określoną przez @var{n}
sformatowaną za pomocą @var{F}.

@table @samp
@item e
Numer linii dla linii bezpośrednio poprzedzającej daną grupę w starym pliku.

@item f
Numer linii dla pierwszej linii w grupie w starym pliku.
Równy @var{e} + 1.

@item l
Numer linii dla ostatniej linii w grupie w starym pliku.

@item m
Numer linii dla linii występującej bezpośrednio po grupie w starym pliku.
Równy @var{l} + 1.

@item n
Liczba linii w grupie w starym pliku.
Równy @var{l} - @var{f} + 1.

@item E, F, L, M, N
Podobnie, dla linii w nowym pliku.

@end table

Specyfikacją konwersji @code{printf} może być @samp{%d}, @samp{%o},
@samp{%x} lub @samp{%X}, określające odpowiednio: wyjście dziesiętne,
ósemkowe, szesnastkowe małymi literami lub szesnastkowe dużymi literami.
Po znaku procentu @samp{%} mogą się pojawić kolejno następujące opcje:
@samp{-} określający wyrównanie do lewej, liczba całkowita podająca
minimalną szerokość pola i kropka z następującą po niej opcjonalną liczbą
całkowitą podającą minimalną ilość cyfr [ułamkowych].
Na przykład, @samp{%5dN} wypisuje liczbę nowych linii w danej grupie
w polu o szerokości z znaków, stosując używany przez @code{printf}
format @code{"%5d"}.

@item (@var{A}=@var{B}?@var{T}:@var{E})
Jeżeli @var{A} jest równe @var{B}, to @var{T}, w przeciwnym razie @var{E}.
@var{A} i @var{B} są albo obie stałymi podanymi dziesiętnie albo pojedynczymi
literami, interpretowanymi jak wyżej.
Ta specyfikacja formatu jest równoważna @var{T} jeśli wartość @var{A} jest
równa wartości @var{B}; w przeciwnym razie jest równoważna @var{E}.

Na przykład, @samp{%(N=0?no:%dN) line%(N=1?:s)} jest równoważne formatowi
@samp{no lines} jeśli @var{N} (liczba linii w grupie w nowym pliku)
@c          Błąd oryginału:  in the group in the the
jest równe 0, formatowi @samp{1 line} jeśli @var{N} jest równe 1,
a formatowi @samp{%dN lines} w pozostałych przypadkach.
@end table

@node Formaty linii, Szczegóły If-then-else, Formaty grup linii, If-then-else
@subsection Formaty linii
@cindex formaty linii

Formaty linii regulują, w jaki sposób każda z linii pobranych z pliku
wejściowego zostanie wypisana jako część grupy linii w formacie if-then-else.

Na przykład, poniższej polecenie wypisuje tekst z umieszczonym po lewej
jednokolumnowym wskaźnikiem zmian.  I tak: pierwsza kolumną wyjścia jest
@samp{-} dla linii usuniętych, @samp{|} dla dodanych, a spacja dla
niezmienionych.  Formaty zawierają znaki nowej linii tam, gdzie są one
pożądane w wyjściu.

@example
diff \
   --old-line-format='-%l
' \
   --new-line-format='|%l
' \
   --unchanged-line-format=' %l
' \
   stary nowy
@end example

Do podania formatu linii używa się jednej z poniższych opcji.  Wskazany
@var{format} powinien być cytowany, gdyż często zawiera metaznaki powłoki.

@table @samp
@item --old-line-format=@var{format}
formatuje linie tylko z pierwszego pliku.

@item --new-line-format=@var{format}
formatuje linie tylko z drugiego pliku.

@item --unchanged-line-format=@var{format}
formatuje linie wspólne obu plikom.

@item --line-format=@var{format}
formatuje wszystkie linie; w efekcie nadaje wartość równocześnie
wszystkim trzem powyższym opcjom.
@end table

W formacie określającym sposób wypisania linii zwykłe znaki oznaczają
same siebie;
specyfikacje konwersji zaczynają się od znaku procentu @samp{%} i mają jedną
z poniższych postaci:

@table @samp
@item %l
oznacza zawartość danej linii, bez kończącego ją znaku nowej linii
(jeśli jest takowy).  Ten format ignoruje czy linia jest niekompletna czy
poprawnie zakończona.
@xref{Niekompletne linie}.

@item %L
oznacza zawartość danej linii, łącznie z kończącym ją znakiem nowej linii
(jeśli jest takowy).  Jeżeli linia jest niekompletna, to zachowuje tę
niekompletność.

@item %%
oznacza dosłowny znak procentu @samp{%}.

@item %c'@var{C}'
gdzie @var{C} jest pojedynczym znakiem, oznacza @var{C}.
@var{C} nie może być odwrotnym ukośnikiem ani apostrofem.
Na przykład, @samp{%c':'} oznacza dwukropek.

@item %c'\@var{O}'
gdzie @var{O} jest łańcuchem 1, 2 lub 3 cyfr ósemkowych, oznacza znak
o kodzie ósemkowym @var{O}.
Na przykład, @samp{%c'\0'} oznacza znak null.

@item @var{F}n
gdzie @var{F} jest specyfikacją konwersji @code{printf},
oznacza numer linii sformatowany za pomocą @var{F}.
Na przykład, @samp{%.5dn} wypisuje numer linii używając formatu
@code{"%.5d"} dla @code{printf}.
@xref{Formaty grup linii}, gdzie bliżej omówiono specyfikacje konwersji
printf.

@end table

Domyślnym formatem linii jest @samp{%l}, po którym występuje znak nowej
linii.

Jeżeli wejście zawiera znaki tabulacji i jest istotne, by w wyjściu były
one odpowiednio wyrównane, powinniśmy upewnić się, że @samp{%l} lub @samp{%L}
w formacie linii występuje bezpośrednio po tabulatorze (np.@: poprzedzając
@samp{%l} czy @samp{%L} tabulacją) albo użyć opcji @samp{-t} lub
@samp{--expand-tabs}.

Razem wzięte, formaty linii i formaty grup linii pozwalają na określenie
wielu różnych formatów.  Na przykład, poniższe polecenie korzysta z formatu
zbliżonego do normalnego formatu @code{diff}.  Można je sobie dostosować,
by uzyskać precyzyjną kontrolę nad wyjściem produkowanym przez @code{diff}.

@example
diff \
   --old-line-format='< %l
' \
   --new-line-format='> %l
' \
   --old-group-format='%df%(f=l?:,%dl)d%dE
%<' \
   --new-group-format='%dea%dF%(F=L?:,%dL)
%>' \
   --changed-group-format='%df%(f=l?:,%dl)c%dF%(F=L?:,%dL)
%<---
%>' \
   --unchanged-group-format='' \
   old new
@end example

@node Szczegóły If-then-else, Przykładowy If-then-else, Formaty linii, If-then-else
@subsection Szczegółowy opis formatu If-then-else

Do linii wspólnych dla obu plików, @code{diff} stosuje format niezmienionych
grup linii.  Dla każdej porcji różnic w formacie scalonego wyjścia, jeśli
porcja zawiera tylko linie z pierwszego pliku, @code{diff} stosuje format
grup starych linii; jeśli porcja zawiera tylko linie z drugiego pliku,
@code{diff} stosuje format grup nowych linii; w pozostałych przypadkach
stosowany jest format grup zmienionych.

Formaty starych, nowych i zmienionych linii określają, odpowiednio, format
wyjściowy linii z pierwszego pliku, linii z drugiego pliku i linii wspólnych
dla obu plików.

Opcja @samp{--ifdef=@var{nazwa}} jest równoważna następującej sekwencji
opcji zapisanej w składni powłoki:

@example
--old-group-format='#ifndef @var{nazwa}
%<#endif /* not @var{nazwa} */
' \
--new-group-format='#ifdef @var{nazwa}
%>#endif /* @var{nazwa} */
' \
--unchanged-group-format='%=' \
--changed-group-format='#ifndef @var{nazwa}
%<#else /* @var{nazwa} */
%>#endif /* @var{nazwa} */
'
@end example

Należy uważnie sprawdzić wyjście utworzone przez @code{diff} pod
kątem poprawności zagnieżdżeń.  Na przykład, stosując opcję
@c              HQ: Błąd oryginału:  using the the @samp{-D @var{name}}
@samp{-D @var{nazwa}} lub @samp{--ifdef=@var{nazwa}}, powinno się sprawdzić,
że jeśli różniące się linie zawierają którąś z dyrektyw preprocesora C:
@samp{#ifdef}, @samp{#ifndef}, @samp{#else}, @samp{#elif} lub @samp{#endif},
to są dyrektywy te poprawnie zagnieżdżone i powiązane.  Jeśli tak nie jest,
poprawki muszą być dokonane ręcznie.  Tak czy owak warto uważnie sprawdzać
powstały kod, by upewnić się, że faktycznie robi to, czego chcemy.
W zależności od sposobu utworzenia plików wejściowych, wyjście może zawierać
powielony lub w inny sposób niepoprawny kod.

Występująca w @code{patch} opcja @samp{-D @var{nazwa}} zachowuje się tak,
jak opcja @samp{-D @var{nazwa}} programu @code{diff}, z wyjątkiem tego, że
działa na pliku i łacie, by utworzyć scalony plik.  @xref{Opcje patch}.

@node Przykładowy If-then-else, , Szczegóły If-then-else, If-then-else
@subsection Przykład formatu If-then-else

Oto wynik działania polecenia @samp{diff -DDWA lao tsy}
(@pxref{Przykładowe wejście diff}, gdzie podano pełną postać użytych plików):

@example
#ifndef DWA
Tao, które można wyrazić słowami, nie jest prawdziwym tao.
Nazwa, którą można je określić, nie jest niezmienną nazwą.
#endif /* not DWA */
Bezimienne jest początkiem nieba i ziemi,
#ifndef DWA
Nazwane jest matką wszystkich rzeczy.
#else /* DWA */
nazwane jest matką wszystkich rzeczy.

#endif /* DWA */
Przeto, kto trwale pozbawion jest pragnień wszelakich,
  potrafi dojrzeć subtelną istotę tao,
zaś, kto niezmiennie tkwi w pętach swych pragnień,
  może tylko ujrzeć zewnętrzną pozorność rzeczy.
Te dwie strony tao wywodzą się
ze wspólnego źródła,
  lecz noszą odmienne nazwy.
#ifdef DWA
To, co w nich wspólne, nazywamy wielką tajemnicą,
tajemnicą nad tajemnicami,
bramą do poznania wszelakich cudowności.
#endif /* DWA */
@end example

@node Porównywanie katalogów, Dostosowywanie wyjścia, Formaty wyjściowe, Top
@chapter Porównywanie katalogów

@code{diff} można wykorzystać do porównania niektórych lub wszystkich plików
z zadanych dwu drzew katalogowych.  Gdy oba argumenty programu określające
nazwy plików są katalogami, porównuje on każdy z plików, który zawierają
oba katalogi.  Nazwy plików są badane w kolejności alfabetycznej.
Normalnie @code{diff} milczy, jeśli dana para plików nie różni się, ale
jeśli posłużymy się opcją @samp{-s} lub @samp{--report-identical-files},
to pary plików identycznych będą sygnalizowane.  Normalnie @code{diff}
zgłasza tylko podkatalogi wspólne dla obu zadanych katalogów bez porównywania
plików z podkatalogów, ale jeśli posłużymy się opcją @samp{-r} lub
@samp{--recursive}, to będą porównywane wszystkie odpowiadające sobie
pary plików w drzewach katalogowych, tyle poziomów w głąb, ile zawierają.

Dla plików, które istnieją tylko w jednym z katalogów, @code{diff}
normalnie nie pokazuje zawartości pliku: zgłasza tylko, że plik istnieje
w danym katalogu, a nie istnieje w drugim.  Można sprawić by program działał
tak, jakby plik w drugim katalogu istniał, ale był pusty, po to, żeby została
wypisana cała zawartość istniejącego pliku.  (Zostanie wypisany albo jako
wstawienie albo jako usunięcie, w zależności od tego czy jest w pierwszym
czy w drugim z podanych katalogów.)  Używa się w tym celu opcji @samp{-N}
lub @samp{--new-file}.

Jeśli starszy katalog zawiera jakieś wielkie pliki, których nie ma w nowszym
katalogu, można zmniejszyć łatę zamiast opcji @samp{-N} wykorzystując
@samp{-P} lub @samp{--unidirectional-new-file}.  Działa podobnie jak
@samp{-N}, ale wstawia tylko zawartość plików, które występują w drugim
katalogu, lecz nie w pierwszym (to znaczy, plików, które zostały dołożone).
Na początku pliku łaty powinno się dopisać instrukcje dla użytkownika, który
będzie nakładał łatę, by przez jej użyciem skasował usunięte w starej wersji
pliki.  @xref{Tworzenie łat}, gdzie dokładniej omówiono tworzenie łat
w celu rozpowszechniania.

Do ignorowania niektórych plików podczas porównywania katalogów służy opcja
@samp{-x @var{wzorzec}} lub @samp{--exclude=@var{wzorzec}}.  Ignoruje ona
wszystkie pliki i podkatalogi, których główna część nazwy pasuje do wzorca
powłoki @var{wzorzec}.  Inaczej niż w powłoce, kropka na początku głównej
części nazwy pasuje do maski na początku wzorca.  @var{wzorzec} powinien
być ujęty w znaki cytowania, żeby powłoka go nie rozwinęła.  Na przykład,
opcja @samp{-x '*.[ao]'} ignoruje wszystkie pliki o nazwach kończących
się na @samp{.a} lub @samp{.o}.

Jeśli podamy ją więcej niż raz, działanie tej opcji kumuluje się.
Na przykład, użycie opcji @samp{-x 'RCS' -x '*,v'} powoduje ignorowanie
plików i podkatalogów o nazwie @samp{RCS} lub nazwie kończącej się
na @samp{,v}.

Jeśli chcemy podać tę opcję wielokrotnie, wygodniej jest zamiast tego
zapisać wzorce w pliku, po jednym w linii, i skorzystać z opcji
@samp{-X @var{plik}} lub @samp{--exclude-from=@var{plik}}.

Jeśli porównywaliśmy dwa katalogi i przerwaliśmy sprawdzanie w trakcie
pracy, możemy później kontynuować je od miejsca, w którym je porzuciliśmy.
Robi się to stosując opcję @samp{-S @var{plik}} lub
@samp{--starting-file=@var{plik}}.  Porównuje ona tylko @var{plik}
i wszystkie alfabetycznie występujące po nim pliki z katalogu najwyższego
poziomu.

@node Dostosowywanie wyjścia, Wydajność diff, Porównywanie katalogów, Top
@chapter Upiększanie wyjścia @code{diff}

@code{diff} dostarcza kilku sposobów dostosowania wyglądu tworzonego wyjścia.
Można je stosować do dowolnego formatu wyjściowego.

@menu
* Tabulatory::		Zachowywanie wyrównania tabulatorów.
* Stronicowanie::	Numerowanie stron i datowanie wyjścia @code{diff}.
@end menu

@node Tabulatory, Stronicowanie, , Dostosowywanie wyjścia
@section Zachowywanie wyrównania do tabulatorów
@cindex tabulatory, wyrównywanie
@cindex wyrównywanie tabulatorów

W niektórych formatach wyjściowych @code{diff} linie tekstu poprzedzone są
jednym bądź dwoma znakami, wskazującymi czy tekst został wstawiony, usunięty
czy zmieniony.  Dołożenie tych znaków może spowodować, że tabulacje przesuną
@c                        throwing off the alignment of columns
się na następną pozycję tabulacyjną, burząc wyrównanie kolumn w linii. 
GNU @code{diff} zapewnia dwie metody uzyskania poprawnego ustawienia
kolumn wyrównanych tabulacjami.

Pierwszy sposób polega na konwersji, przed ich wypisaniem, wszystkich znaków
tabulacji na poprawną liczbę spacji.  Metodę tę wybiera się opcją @samp{-t}
lub @samp{--expand-tabs}.  Program zakłada, że pozycje tabulacyjne
(tabulatory) ustawione są co 8 kolumn.  Chcąc użyć tej postaci wyjścia
z @code{patch}, trzeba podać mu opcję @samp{-l}
lub @samp{--ignore-white-space}
(@pxref{Zmienione odstępy}, gdzie podano szczegóły).

Inną metodą poprawnego ustawienia tabulacji jest dodanie na początku linii,
po znaku wskazującym rodzaj zmiany, znaku tabulacji zamiast spacji.
Dzięki temu wszystkie następne tabulacje będą na pewno w tym samym
położeniu względem tabulatorów, w którym były w pierwotnych plikach,
zatem wyjście będzie poprawnie wyrównane.  Wadą tego rozwiązania jest to,
że niekiedy z długich linii powstają linie zbyt długie, by zmieściły się
w pojedynczym wierszu ekranu czy na papierze.  Poza tym, nie działa ono
z formatem zunifikowanym, w którym nie ma spacji po znaku wskazującym typ
zmiany.  Metodę tę wybiera się opcją @samp{-T} lub @samp{--initial-tab}.

@node Stronicowanie, , Tabulatory, Dostosowywanie wyjścia
@section Stronicowanie wyjścia @code{diff}
@cindex stronicowanie wyjścia @code{diff}

W długim pliku wyjściowym wygodnie mieć numerację stron i datę utworzenia.
Robią to opcje @samp{-l} i @samp{--paginate}, przepuszczając wyjście
z @code{diff} przez program @code{pr}.  Tak mógłby wyglądać nagłówek strony
dla @samp{diff -lc lao tsy}:

@example
Mar 11 13:37 1991  diff -lc lao tsy Page 1
@end example

@node Wydajność diff, Porównanie trzech plików, Dostosowywanie wyjścia, Top
@chapter Kompromisy wydajności @code{diff}
@cindex wydajność @code{diff}

GNU @code{diff} pracuje całkiem wydajnie; jednak, w pewnych warunkach
można spowodować, by działał szybciej lub tworzył zbiór zmian o mniejszych
rozmiarach.  Są dwie metody wpływania na wydajność GNU @code{diff} przez
zmianę sposobu, w jaki porównuje pliki.

Wydajność można rozpatrywać z różnych punktów widzenia.  Te opcje poprawiają
jeden aspekt wydajności kosztem innego lub poprawiają wydajność w pewnych
przypadkach choć szkodzą jej w innych.

Sposób, w jaki GNU @code{diff} określa, które linie się zmieniły, zawsze
prowadzi do zbioru różnic bliskiego minimalnemu.  Do celów praktycznych
to zwykle wystarcza.
Jeśli otrzymane wyjście jest bardzo duże, można spowodować, by program
użył zmodyfikowanego algorytmu, który czasem daje mniejszy zbiór różnic.
Wykonuje to opcja @samp{-d} lub @samp{--minimal}.  Może ona jednak
spowodować także, że @code{diff} będzie pracować wolniej niz zwykle,
więc nie jest to zachowanie domyślne.

Gdy porównywane pliki są duże, a mają małe grupy zmian rozrzucone
po całej zawartości, używa się opcji @samp{-H} lub
@samp{--speed-large-files}, wprowadzającej inną zmianę do algorytmu
używanego przez @code{diff}.  Jeśli pliki wejściowe mają stałe małe
zagęszczenie zmian, to opcja ta przyspiesza porównania, nie zmieniając
tworzonego wyjścia.
Jeśli nie, to program może utworzyć większy zbiór różnic;
jednak wyjście będzie nadal poprawne.

Normalnie @code{diff} odrzuca przedrostek i przyrostek wspólny obu plikom
przed próbą znalezienia minimalnego zbioru różnic.  Dzięki temu program
działa szybciej, ale sporadycznie może tworzyć wyjście, które nie jest
minimalne.  Opcja @samp{--horizon-lines=@var{linie}} przeciwdziała odrzucaniu
przez @code{diff} ostatnich @var{linie} linii przedrostka i pierwszych
@var{lines} linii przyrostka pliku.  Daje to programowi dodatkowe okazje
do znalezienia minimalnego wyjścia.

@node Porównanie trzech plików, Scalanie diff3, Wydajność diff, Top
@chapter Porównanie trzech plików
@cindex porównywanie trzech plików
@cindex format wyjścia @code{diff3}

Program @code{diff3} stosuje się do porównywania trzech plików i pokazania
różnic między nimi.  (Może też scalać pliki -- zob. @ref{Scalanie diff3}).

``Normalny'' format wyjściowy @code{diff3} pokazuje każdą porcję różnic bez
otaczającego ją kontekstu.  Porcje są oznaczone zależnie od tego, czy są
dwu- czy trójstronne, a linie opatrzone komentarzem wskazującym ich
położenie w plikach wejściowych.

@xref{Wywołanie diff3}, gdzie bliżej opisano sposób uruchamiania @code{diff3}.

@menu
* Przykładowe wejście diff3::	Plik wejściowy do przykładów @code{diff3}.
* Szczegóły normalnego diff3::	Szczegółowy opis normalnego formatu wyjściowego..
* Porcje diff3::   		Format normalnego wyjścia diff3.
* Przykładowy normalny diff3::	Przykładowe wyjście w formacie normalnym.
@end menu

@node Przykładowe wejście diff3, Szczegóły normalnego diff3, , Porównanie trzech plików
@section Trzeci przykładowy plik wejściowy
@cindex @code{diff3}, przykładowe wejście
@cindex przykładowe pliki wejściowe dla @code{diff3}

Oto trzeci przykładowy plik wejściowy, który będzie używany w przykładach
do pokazania wyjścia uzyskiwanego z @code{diff3} i tego, jak zmienia się ono
w zależności od różnych opcji.  Pierwsze dwa pliki to te same, których
używaliśmy przy omawianiu @code{diff} (@pxref{Przykładowe wejście diff}).
A to trzeci plik przykładowy, o nazwie @file{tao}:

@example
Tao, które można wyrazić słowami, nie jest prawdziwym tao.
Nazwa, którą można je określić, nie jest niezmienną nazwą.
Bezimienne jest początkiem nieba i ziemi,
nazwane jest matką wszystkich rzeczy.

Przeto, kto trwale pozbawion jest pragnień wszelakich,
  potrafi dojrzeć subtelną istotę tao,
zaś, kto niezmiennie tkwi w pętach swych pragnień,
  może tylko ujrzeć skończoność rzeczy.
Te dwie strony tao wywodzą się
ze wspólnego źródła,
  lecz noszą odmienne nazwy.

  -- Lao-tsy, Tao-te-king (Księga Drogi i Cnoty)
@end example

@node Szczegóły normalnego diff3, Porcje diff3, Przykładowe wejście diff3, Porównanie trzech plików
@section Szczegółowy opis normalnego formatu wyjściowego @code{diff3}

Każda porcja zaczyna się od linii oznaczonej @samp{====}.  Porcje
trójstronne mają zwykłe linie @samp{====}, a dwustronne -- z dołączonym
@samp{1}, @samp{2} lub @samp{3}, określającym, które z trzech plików
wejściowych różnią się w tej porcji.  Porcje składają się z kopii dwu lub
trzech zbiorów linii wejściowych, z których każdy poprzedzony jest jednym
lub dwoma poleceniami identyfikującymi pochodzenie linii.

Normalnie, każdą kopię linii wejściowej poprzedzają dwie spacje,
do odróżnienia jej od poleceń.  Ale z opcją @samp{-T} lub
@samp{--initial-tab}, @code{diff3} używa tabulacji zamiast dwu spacji;
wyrównuje to poprawnie tabulacje.
@xref{Tabulatory}, gdzie podano szczegóły.

Polecenia przyjmują poniższą postać:

@table @samp
@item @var{plik}:@var{l}a
Ta porcja pojawia się po linii @var{l} pliku @var{plik} i nie zawiera
żadnych linii tego pliku.  Zmieniając ten plik, by zawierał to, co pozostałe
pliki, należy dopisać doń linie porcji (wzięte z tych plików).
Na przykład, @samp{1:11a} oznacza, że dana porcja występuje po linii 11
pierwszego pliku i nie zawiera linii z tego pliku.

@item @var{plik}:@var{r}c
Ta porcja składa się z linii z zakresu @var{r} pliku @var{plik}.
Zakres @var{r} jest parą rozdzielonych przecinkiem numerów linii lub
pojedynczym numerem jeśli zakres zawiera jedną linię.  Zmieniając ten plik,
by zawierał to, co pozostałe pliki, należy zmienić wskazane linie tak, by
były liniami wziętymi z tych plików.
Na przykład, @samp{2:11,13c} oznacza, że dane porcja zawiera linie
od 11 do 13 z drugiego pliku.
@end table

Jeśli ostatnia linia zbioru linii wejściowych jest niekompletna
(@pxref{Niekompletne linie}), to w tworzonym wyjściu jest ona wyróżniona,
w stosunku pełnej linii, przez następną linię, która zaczyna się od @samp{\}.

@node Porcje diff3, Przykładowy normalny diff3, Szczegóły normalnego diff3, Porównanie trzech plików
@section Porcje @code{diff3}
@cindex porcje @code{diff3}
@cindex @code{diff3}, porcje

Grupy linii, które się różnią w dwu lub trzech plikach wejściowych są zwane
@dfn{porcjami diff3} (@dfn{diff3 hunks}), przez analogię do porcji
@code{diff} (@pxref{Porcje}).  Jeżeli w porcji @code{diff3} wszystkie trzy
pliki wejściowe różnią się od siebie, to porcję taką nazywamy @dfn{porcją
trójstronną} (@dfn{three-way hunk}); jeśli różnią się tylko dwa pliki,
to jest to @dfn{porcja dwustronna} (@dfn{two-way hunk}).

Tak jak w @code{diff}, możliwe jest kilka rozwiązań.  Przy porównywaniu
plików @samp{A}, @samp{B} i @samp{C}, @code{diff3} normalnie tworzy
porcje @code{diff3} scalając porcje dwustronne wypisywane przez dwa
polecenia: @samp{diff A B} i @samp{diff A C}.  Niekoniecznie minimalizuje
to rozmiar wyjścia, lecz wyjątki powinny występować rzadko.

Na przykład, załóżmy, że @file{F} składa się z trzech linii: @samp{a},
@samp{b}, @samp{f}, @file{G} składa się z @samp{g}, @samp{b}, @samp{g},
zaś @file{H} -- z @samp{a}, @samp{b}, @samp{h}.
Wynik działania @samp{diff3 F G H} wygląda tak:

@example
====2
1:1c
3:1c
  a
2:1c
  g
====
1:3c
  f
2:3c
  g
3:3c
  h
@end example

@noindent
ponieważ znaleziono dwustronną porcję zawierającą @samp{a} w pierwszym
i trzecim pliku, a @samp{g} w drugim pliku, potem pojedynczą linię
@samp{b} wspólną dla wszystkich plików, a następnie trójstronną porcję
zawierającą ostatnią linię z każdego z plików.

@node Przykładowy normalny diff3, , Porcje diff3, Porównanie trzech plików
@section Przykład normalnego formatu wyjściowego @code{diff3}

Oto wynik działania polecenia @samp{diff3 lao tsy tao}
(@pxref{Przykładowe wejście diff3}, gdzie podano pełną postać użytych plików).
Zauważ, że pokazuje ono tylko te linie, które są różne w obu plikach.

@example
====2
1:1,2c
3:1,2c
  Tao, które można wyrazić słowami, nie jest prawdziwym tao.
  Nazwa, którą można je określić, nie jest niezmienną nazwą.
2:0a
====1
1:4c
  Nazwane jest matką wszystkich rzeczy.
2:2,3c
3:4,5c
  nazwane jest matką wszystkich rzeczy.
  
====3
1:8c
2:7c
    może tylko ujrzeć zewnętrzną pozorność rzeczy.
3:9c
    może tylko ujrzeć skończoność rzeczy.
====
1:11a
2:11,13c
  To, co w nich wspólne, nazywamy wielką tajemnicą,
  tajemnicą nad tajemnicami,
  bramą do poznania wszelakich cudowności.
3:13,14c
  
    -- Lao-tsy, Tao-te-king (Księga Drogi i Cnoty)
@end example

@node Scalanie diff3, Interaktywne scalanie, Porównanie trzech plików, Top
@chapter Scalanie według wspólnego przodka
@cindex scalanie według wspólnego przodka

Gdy dwie osoby wprowadziły zmiany na kopiach tego samego pliku, @code{diff3}
potrafi utworzyć scalone wyjście, które zawiera oba zestawy poprawek razem
z ostrzeżeniami o konfliktach.

Można sobie wyobrazić programy o nazwach typu @code{diff4} i @code{diff5}
do porównywania więcej niż trzech plików równocześnie, ale w praktyce rzadko
pojawia się taka potrzeba.  Do połączenia więcej niż dwu zestawów zmian
danego pliku można użyć @code{diff3}, scalając po dwa zestawy zmian na raz.

@code{diff3} potrafi wcielić zmiany z dwu zmienionych wersji do wspólnej
pierwotnej wersji.  Pozwala to na scalanie zestawów zmian reprezentowanych
przez dwa nowsze pliki.  Podaje się wówczas wspólną, pierwotną wersję jako
drugi argument, a dwie nowsze -- jako pierwszy i trzeci, w ten sposób:

@example
diff3 @var{mój} @var{starszy} @var{twój}
@end example

@noindent
Kolejność argumentów łatwo zapamiętać gdy zauważymy, że występują
w kolejności alfabetycznej.

@cindex konflikt
@cindex zakładka
@cindex nakładanie się
Możemy to interpretować jako odejmowanie @var{starszego} od @var{twojego}
i dodanie wyniku do @var{mojego}, albo jako ujęcie w @var{moim} zmian,
które przekształciłyby @var{starszy} w @var{twój}.  Takie scalanie jest
precyzyjnie zdefiniowane dopóki @var{mój} i @var{twój} pasują do siebie
w sąsiedztwie takiej zmiany.  Nie sprawdza się jednak gdy wszystkie trzy
pliki różnią się od siebie lub gdy różni się tylko @var{starszy};
mówimy wówczas o @dfn{konflikcie}.  Kiedy wszystkie trzy pliki są różne,
konflikt taki nazywamy @dfn{zakładką} (@dfn{overlap}).

@code{diff3} dostarcza kilku sposobów obsługi zakładek i konfliktów.
Można je pominąć, wybrać tylko zakładki albo oznaczyć konflikty specjalnymi
liniami @samp{<<<<<<<} i @samp{>>>>>>>}.

@code{diff3} potrafi wypisać wyniki scalania w postaci skryptu @code{ed},
który można zastosować do pierwszego pliku, by uzyskać scalone wyjście.
Jednak zwykle jest lepiej, gdy @code{diff3} bezpośrednio tworzy scalone
wyjście.  Obchodzimy wówczas pewne problemy z @code{ed}.

@menu
* Jakie zmiany::		Wybór zmian do wcielenia.
* Oznaczanie konfliktów::	Oznaczanie konfliktów.
* Pomijanie ed::		Bezpośrednie tworzenie scalonego wyjścia.
* Scalanie niekompletnych linii::  Jak @code{diff3} scala niekompletne linie.
* Zachowywanie zmienionego pliku:: Emulowanie zachowania System V.
@end menu

@node Jakie zmiany, Oznaczanie konfliktów, , Scalanie diff3
@section Wybór zmian, jakie mają zostać wcielone
@cindex nakładająca się zmiana, wybór
@cindex zakładka, wybór
@cindex niescalona zmiana
@cindex niedołączona zmiana

Za pomocą opcji @samp{-e} lub @samp{--ed} wybieramy do scalania
w @var{moim} wszystkie niescalone zmiany między @var{starszym} a @var{twoim}.
Opcją @samp{-3} lub @samp{--easy-only} wybieramy scalanie tylko
nienakładających się niescalonych zmian, a opcją @samp{-x} lub
@samp{--overlap-only} tylko zmian, które się nakładają.

W opcjach @samp{-e}, @samp{-3} i @samp{-x} wybierane są tylko
@dfn{niescalone zmiany}, tj.@: zmiany, gdzie różnią się @var{mój} i @var{twój};
ignorowane są zmiany między @var{starszym} a @var{twoim}, gdzie @var{mój}
i @var{twój} są identyczne, gdyż zakłada się, że takie zmiany zostały już
@c                 assumption
scalone.  Jeżeli takie założenie nie jest bezpieczne, powinniśmy użyć opcji
@samp{-A} lub @samp{--show-all} (@pxref{Oznaczanie konfliktów}).

Oto wyjście polecenia @code{diff3} z każdą z tych trzech opcji

(@pxref{Przykładowe wejście diff3}, gdzie podano pełną postać użytych plików).
Zauważ, że @samp{-e} daje sumę rozłącznych zbiorów zmian wypisywanych
przez @samp{-3} i @samp{-x}.

Wynik działania @samp{diff3 -e lao tsy tao}:
@example
11a

  -- Lao-tsy, Tao-te-king (Księga Drogi i Cnoty)
.
8c
  może tylko ujrzeć skończoność rzeczy.
.
@end example

Wynik działania @samp{diff3 -3 lao tsy tao}:
@example
8c
  może tylko ujrzeć skończoność rzeczy.
.
@end example

Wynik działania @samp{diff3 -x lao tsy tao}:
@example
11a

  -- Lao-tsy, Tao-te-king (Księga Drogi i Cnoty)
.
@end example

@node Oznaczanie konfliktów, Pomijanie ed, Jakie zmiany, Scalanie diff3
@section Oznaczanie konfliktów
@cindex oznaczanie konfliktów
@cindex konflikty, oznaczanie
@cindex @samp{<<<<<<<} do oznaczania konfliktów

@code{diff3} może zaznaczać konflikty w scalonym wyjściu, ujmując je między
specjalne linie znacznikowe.  Konflikt pomiędzy dwoma plikami @var{A}
a @var{B} oznaczany jest tak:

@example
<<<<<<< @var{A}
@r{linie z @var{A}}
=======
@r{linie z @var{B}}
>>>>>>> @var{B}
@end example

Konflikt między trzema plikami @var{A}, @var{B} i @var{C} jest oznaczany tak:

@example
<<<<<<< @var{A}
@r{linie z @var{A}}
||||||| @var{B}
@r{linie z @var{B}}
=======
@r{linie z @var{C}}
>>>>>>> @var{C}
@end example

Opcja @samp{-A} lub @samp{--show-all} działa tak, jak opcja @samp{-e},
z wyjątkiem tego, że ujmuje konflikty między linie znacznikowe i wypisuje
wszystkie zmiany między @var{starszym} a @var{twoim}, a nie tylko zmiany
niescalone.  Zatem, przy przykładowych plikach wejściowych
(@pxref{Przykładowe wejście diff3}), @samp{diff3 -A lao tsy tao} wstawia nawiasy
ostrokątne wokół konfliktów, gdzie różni się tylko @file{tsy}:

@example
<<<<<<< tsy
=======
Tao, które można wyrazić słowami, nie jest prawdziwym tao.
Nazwa, którą można je określić, nie jest niezmienną nazwą.
>>>>>>> tao
@end example

A konflikty trójstronne wypisuje tak:

@example
<<<<<<< lao
||||||| tsy
To, co w nich wspólne, nazywamy wielką tajemnicą,
tajemnicą nad tajemnicami,
bramą do poznania wszelakich cudowności.
=======

  -- Lao-tsy, Tao-te-king (Księga Drogi i Cnoty)
>>>>>>> tao
@end example

Opcja @samp{-E} lub @samp{--show-overlap} wypisuje mniej informacji niż
@samp{-A} (@samp{--show-all}), gdyż podaje tylko zmiany niescalone, a nigdy
nie wypisuje zawartości drugiego pliku.  Stąd też @samp{-E} działa jak
@samp{-e}, prócz tego, że ujmuje w znaczniki pierwszy i trzeci plik
z trójstronnych nakładających się zmian.  Podobnie, @samp{-X} działa
jak @samp{-x}, poza tym, że ujmuje w znaczniki wszystkie (niekoniecznie
nakładające się) zmiany.  Na przykład, dla powyższej trójstronnej
nakładającej się zmiany, opcje @samp{-E} i @samp{-X} wypiszą:

@example
<<<<<<< lao
=======

  -- Lao-tsy, Tao-te-king (Księga Drogi i Cnoty)
>>>>>>> tao
@end example

Porównując dwa pliki o nic nie mówiących lub niewiele mówiących nazwach,
zapewne chcielibyśmy, by @code{diff3} w nawiasach @samp{<<<<<<<},
@samp{|||||||} i @samp{>>>>>>>} pokazał jakieś ich nazwy zastępcze.
Służy do tego opcja @samp{-L @var{etykieta}} lub
@samp{--label=@var{etykieta}}. Może zostać podana do trzech razy, po jednym
na każdy plik wejściowy.   Zatem @samp{diff3 -A -L X -L Y -L Z A B C}
działa tak, jak @samp{diff3 -A A B C}, poza tym, że wyjście wygląda, jakby
zostało otrzymane z plików o nazwach @samp{X}, @samp{Y} i @samp{Z}, a nie
@samp{A}, @samp{B} i @samp{C}.

@node Pomijanie ed, Scalanie niekompletnych linii, Oznaczanie konfliktów, Scalanie diff3
@section Bezpośrednie tworzenie scalonego wyjścia
@cindex scalający format @code{diff3}

Z opcją @samp{-m} lub @samp{--merge} @code{diff3} wprost wypisuje scalony
plik.  Jest to efektywniejsze niż stosowanie do jego utworzenia programu
@code{ed} i działa nawet z plikami nie-tekstowymi, które @code{ed} by
odrzucił.  Jeśli podamy @samp{-m} bez opcji skryptu @code{ed}, to przyjmowane
jest @samp{-A} (@samp{--show-all}).

Na przykład, polecenie @samp{diff3 -m lao tsy tao}
(@pxref{Przykładowe wejście diff3}, gdzie pokazano pliki wejściowe) wypisze:

@example
<<<<<<< tsy
=======
Tao, które można wyrazić słowami, nie jest prawdziwym tao.
Nazwa, którą można je określić, nie jest niezmienną nazwą.
>>>>>>> tao
Bezimienne jest początkiem nieba i ziemi,
Nazwane jest matką wszystkich rzeczy.
Przeto, kto trwale pozbawion jest pragnień wszelakich,
  potrafi dojrzeć subtelną istotę tao,
zaś, kto niezmiennie tkwi w pętach swych pragnień,
  może tylko ujrzeć skończoność rzeczy.
Te dwie strony tao wywodzą się
ze wspólnego źródła,
  lecz noszą odmienne nazwy.
<<<<<<< lao
||||||| tsy
To, co w nich wspólne, nazywamy wielką tajemnicą,
tajemnicą nad tajemnicami,
bramą do poznania wszelakich cudowności.
=======

  -- Lao-tsy, Tao-te-king (Księga Drogi i Cnoty)
>>>>>>> tao
@end example

@node Scalanie niekompletnych linii, Zachowywanie zmienionego pliku, Pomijanie ed, Scalanie diff3
@section Jak @code{diff3} scala niekompletne linie
@cindex scalanie niekompletnych linii
@cindex niekompletne linie, scalanie

Z @samp{-m}, niekompletne linie (@pxref{Niekompletne linie}) są po prostu
kopiowane na wyjście, tak jak je zastano. Jeśli scalane wyjście kończy się
konfliktem, a jeden z plików wejściowych kończy się niekompletną linią,
to następujące po niej znaczniki @samp{|||||||}, @samp{=======} lub
@samp{>>>>>>>} pojawią się gdzieś indziej niż na początku linii, gdyż
zostaną dopisane do niekompletnej linii.

Bez @samp{-m}, jeśli podano opcję skryptu @code{ed} a została napotkana
niekompletna linia, @code{diff3} generuje ostrzeżenie i działa tak, jakby
znak nowej linii był obecny.

@node Zachowywanie zmienionego pliku, , Scalanie niekompletnych linii, Scalanie diff3
@section Zachowywanie zmienionego pliku
@cindex zgodność @code{diff3} z System V
@cindex System V, zgodność @code{diff3}

Tradycyjny uniksowy @code{diff3} tworzy skrypt @code{ed} bez końcowych
@c      HQ: błąd oryginału:   trailing @samp{w} and and @samp{q}
poleceń @samp{w} i @samp{q}, które zapisują zmiany pliku.
@code{diff3} z System V generuje te dodatkowe polecenia.  GNU @code{diff3}
normalnie zachowuje się tak, jak tradycyjna uniksowa wersja, ale z opcją
@samp{-i} działa jak @code{diff3} z System V i dokłada @samp{w} i @samp{q}.

Opcja @samp{-i} wymaga jednej z opcji tworzących skrypt @code{ed}:
@samp{-AeExX3}, i jest nie współpracuje z opcją scalania wyjścia @samp{-m}.

@node Interaktywne scalanie, Scalanie z patch, Scalanie diff3, Top
@chapter Interaktywne scalanie za pomocą @code{sdiff}
@cindex różnice, scalanie
@cindex scalanie różnic
@cindex interaktywne scalanie

Za pomocą @code{sdiff}, można interaktywnie scalić dwa pliki, na podstawie
ich porównania w formacie dwukolumnowym @samp{-y} (@pxref{Dwukolumnowy}).
Do podania, gdzie ma zostać umieszczony scalony tekst używamy opcji
@samp{-o @var{plik}} lub @samp{--output=@var{plik}}.
@xref{Wywołanie sdiff}, gdzie szczegółowo opisano opcje @code{sdiff}.

Inną metodą interaktywnego scalania plików jest użycie pakietu @code{emerge}
dla Emacs Lisp.
@xref{emerge, , emerge, emacs, The GNU Emacs Manual}, gdzie podano szczegóły.

@menu
* Zestawienie opcji sdiff::	Zestawienie opcji @code{sdiff}.
* Polecenia scalania::	 	Interaktywne scalanie dwu plików.
@end menu

@node Zestawienie opcji sdiff, Polecenia scalania, , Interaktywne scalanie
@section Podawanie opcji @code{diff} dla @code{sdiff}
@cindex format wyjścia @code{sdiff}

Poniższe opcje @code{sdiff} mają to samo znaczenie, co w @code{diff}.
@xref{Opcje diff}, gdzie podano ich zastosowanie.

@example
-a -b -d -i -t -v
-B -H -I @var{regexp}

--ignore-blank-lines  --ignore-case
--ignore-matching-lines=@var{regexp}  --ignore-space-change
--left-column  --minimal  --speed-large-files
--suppress-common-lines  --expand-tabs
--text  --version  --width=@var{columns}
@end example

Z powodów historycznych @code{sdiff} dla niektórych opcji posiada nazwy
alternatywne.  Opcja @samp{-l} jest równoważna @samp{--left-column}.
Podobnie, @samp{-s} jest równoważne @samp{--suppress-common-lines}.
Znaczenie opcji @samp{-w} i @samp{-W} jest w @code{sdiff} zamienione
w stosunku do @code{diff}: dla @code{sdiff}, @samp{-w @var{kolumny}} jest
równoważnikiem @samp{--width=@var{kolumny}}, a @samp{-W} -- równoważnikiem
@samp{--ignore-all-space}.  @code{sdiff} bez opcji @samp{-o} jest równoważne
@code{diff} z opcją @samp{-y} lub @samp{--side-by-side}
(@pxref{Dwukolumnowy}).

@node Polecenia scalania, , Zestawienie opcji sdiff, Interaktywne scalanie
@section Polecenia scalania
@cindex scalanie, polecenia
@cindex polecenia scalania
@cindex scalanie interaktywne

Grupy wspólnych linii (pokazywanych z pustym miejscem między kolumnami)
kopiowane są z pierwszego pliku na wyjście.  Po każdej grupie
różniących się linii, @code{sdiff} wypisuje znak zachęty @samp{%}
i oczekuje na jedno z poniższych poleceń.  Po każdym z nich należy
nacisnąć @key{RET}.

@table @samp
@item e
Odrzucenie obu wersji.
Wywołuje edytor tekstów z pustym plikiem tymczasowym, a następnie kopiuje
powstały plik na wyjście.

@item eb
Skleja obie wersje, przesyła wynik do edycji w pliku tymczasowym,
następnie kopiuje zmieniony wynik na wyjście.

@item el
Podaje do edycji kopię lewej wersji, następnie kopiuje wynik na wyjście.

@item er
Podaje do edycji kopię prawej wersji, następnie kopiuje wynik na wyjście.

@item l
Kopiuje lewą wersję na wyjście.

@item q
Kończy działanie programu.

@item r
Kopiuje prawą wersję na wyjście.

@item s
Kopiuje wspólnie linie bez powiadamiania.

@item v
Kopiuje wspólne linie komunikując o tym.  Zachowanie domyślne.
@end table

Wywoływany edytor tekstów określony jest zmienną środowiska @code{EDITOR},
jeśli jest ustawiona.  Domyślny edytor zależy od systemu.

@node Scalanie z patch, Tworzenie łat, Interaktywne scalanie, Top
@chapter Scalanie za pomocą @code{patch}

@code{patch} pobiera wyjście z porównania dokonanego przez @code{diff}
i wprowadza różnice do kopii oryginalnego pliku, tworząc załataną wersję.
Za pomocą @code{patch} można dystrybuować tylko zmiany jakiegoś zestawu
plików, zamiast rozpowszechniania całości plików.  Odbiorcy mogą zastosować
@code{łatę} do aktualizacji swoich egzemplarzy plików do naszych zmian.
@code{patch} automatycznie rozpoznaje typ pliku różnicy, pomija ewentualne
początkowe i końcowe nagłówki i korzysta z nagłówka do stwierdzenia, który
plik należy załatać.  Umożliwia to naszym odbiorcom podawanie artykułów czy
wiadomości zawierających listing różnic wprost do @code{patch}.

@code{patch} wykrywa typowe problemy, jak np. łaty odwrócone, i ostrzega
o nich.  Zachowuje oryginalne wersje łatanych plików i zapisuje wszystkie
łaty, których nie dało się nałożyć.  Potrafi także prowadzić plik
@c            błąd oryginału??: file to ensures that your correspondents
@code{patchlevel.h}, by zagwarantować, że odbiorcy zastosują łaty w poprawnej
kolejności.

@code{patch} przyjmuje ze swego standardowego wejścia ciąg różnic, zwykle
rozdzielonych nagłówkami, podającymi jaki plik ma być załatany.  Stosuje
porcje @code{diff} (@pxref{Porcje}) jedną po drugiej.  Jeśli porcja nie pasuje
dokładnie do oryginalnego pliku, wówczas, starając się jak najlepiej
go załatać, stosuje algorytm heurystyczny.  Jeśli nie uda się znaleźć
przybliżonego dopasowania, program odrzuca tę porcję i przechodzi
do następnej.  Normalnie @code{patch} każdy łatany plik @var{f} zastępuje
jego nową wersją, pierwotną zachowuje w @samp{@var{f}.orig}, zaś odrzucone
porcje (jeśli wystąpiły) w @samp{@var{f}.rej}.

@xref{Wywołanie patch}, gdzie podano szczegółowy opis opcji @code{patch}.
@xref{Kopie zapasowe}, gdzie dokładniej opisano, w jaki sposób @code{patch} nazywa
pliki kopii zapasowych.  @xref{Odrzucenia}, gdzie dokładniej opisano, gdzie
@code{patch} umieszcza odrzucone porcje.

@menu
* Wejście patch::	Wybór typu wejścia @code{patch}.
* Niedoskonałe::     	Praca z niedoskonałymi łatami.
* Puste pliki::		Usuwanie pustych plików po załataniu.
* Wielokrotne łaty::	Specjalna obsługa wielu łat w pliku.
* Komunikaty patch::	Komunikaty i pytania tworzone przez @code{patch}.
@end menu

@node Wejście patch, Niedoskonałe, , Scalanie z patch
@section Wybór formatu wejściowego @code{patch}
@cindex format wejścia @code{patch}

@code{patch} normalnie ustala, którego formatu @code{diff} używa plik łaty
badając jego zawartość.  Dla plików łat zawierających szczególnie mylący
tekst początkowy do wymuszenia poprawnej interpretacji formatu różnicy
może zajść potrzeba użycia jednej z niżej wymienionych opcji.  Podane tu
formaty wyjściowe są jedynymi, jakie potrafi rozpoznać @code{patch}.

@table @samp
@item -c
@itemx --context
różnica kontekstowa.

@item -e
@itemx --ed
skrypt @code{ed}.

@item -n
@itemx --normal
normalny format różnicowy.

@item -u
@itemx --unified
różnica zunifikowana.
@end table

@node Niedoskonałe, Puste pliki, Wejście patch, Scalanie z patch
@section Nakładanie niedoskonałych łat
@c                @cindex imperfect patch application
@c                 niepełnych ???  - uwaga!! -niżej też!!
@cindex nakładanie niedoskonałych łat
@cindex niedoskonałe łaty, nakładanie

@code{patch} usiłuje pominąć ewentualny tekst początkowy z pliku łaty,
nałożyć różnicę, a następnie pominąć tekst końcowy.  Dzięki temu można
przekazać artykuł z grupy dyskusyjnej czy wiadomość pocztową wprost
do @code{patch}, i powinno to działać.  Jeśli całość różnicy jest wcięta
o stałą ilość białych znaków, wcięcie jest ignorowane automatycznie.

Jednak pewne inne rodzaje niedoskonałości wejścia wymagają interwencji
użytkownika.

@menu
* Zmienione odstępy::	Gdy tabulacje i spacje nie pasują dokładnie.
* Odwrócone łaty::	Poprawne nakładanie odwróconych łat.
* Niedokładne::		Pomoc @code{patch} w znalezieniu lepszych dopasowań.
@end menu

@node Zmienione odstępy, Odwrócone łaty, , Niedoskonałe
@subsection Nakładanie łat przy zmienionych odstępach
@cindex białe znaki w łatach

Czasami programy pocztowe, edytory czy inne programy wymieniają spacje
na tabulacje lub odwrotnie.  Jeśli zdarzy się to plikowi łaty albo
wejściowemu, to mogą one wyglądać tak samo jak wcześniej, ale @code{patch}
nie będzie mógł ich poprawnie dopasować.  Jeśli pojawi się taki problem,
należy zastosować opcję @samp{-l} lub @samp{--ignore-white-space}, która
@c                                      loosely
powoduje, że program mniej rygorystycznie porównuje białe znaki, tak że
dowolny ciąg białych znaków z pliku łaty pasuje do dowolnego ciągu białych
znaków pliku wejściowego.  Znaki nie będące białymi znakami w dalszym ciągu
muszą pasować dokładnie.  Każda linia kontekstu musi nadal odpowiadać
odpowiedniej linii w pliku wejściowym.

@node Odwrócone łaty, Niedokładne, Zmienione odstępy, Niedoskonałe
@subsection Nakładanie odwróconych łat
@cindex łaty odwrócone
@cindex odwrócone łaty

Zdarza się, że ludzie uruchamiają @code{diff} z nowym plikiem jako pierwszym
parametrem, zamiast jako drugim.  Tworzy to łatę, która jest ``odwrócona''
(``reversed'').  W celu nałożenia takiej łaty należy podać @code{patch}
opcję @samp{-R} lub @samp{--reverse}.  Program próbuje wówczas zamienić
@c                     to swap each hunk around 
znaczenie każdej porcji przed jej nałożeniem.  Odrzucenia wychodzą
w formacie zamienionym.  Opcja @samp{-R} nie działa ze skryptami @code{ed},
gdyż zawierają zbyt mało danych do zrekonstruowania operacji odwrotnej.

Często @code{patch} potrafi się domyśleć, że łata jest odwrócona.  Jeśli
pierwszej porcji z łaty nie udaje się nałożyć, program odwraca tę porcję,
by sprawdzić, czy da się jej użyć w ten sposób.  Jeśli tak, to pyta
użytkownika, czy chce on uaktywnienia opcji @samp{-R}.  Jeżeli się nie
da -- łata będzie nakładana dalej w normalny sposób.  Ta metoda nie jest
w stanie wykryć łaty odwróconej jeśli różnica ma format normalny,
a pierwszym poleceniem jest dopisanie (a powinno to być usunięcie).
Jest tak dlatego, że dopisanie zawsze działa, gdyż pusty kontekst pasuje
wszędzie. Szczęśliwym trafem, wiele łat raczej dodaje lub zmienia linie
niż je usuwa, więc większość odwróconych różnic typu normal zaczyna się
od usunięcia, które się nie udaje, dzięki czemu @code{patch} może zauważyć
odwrócenie.

Jeśli nakładamy łatę, która już wcześniej została nałożona, @code{patch}
sądzi, że jest to łata odwrócona i proponuje jej zdjęcie.  Można to
interpretować jako zaplanowaną cechę programu.  Jeżeli zrobiliśmy to
niechcący i nie chcemy zdejmować łaty, wystarczy odpowiedzieć @samp{n}
na tę propozycję i następujące po niej pytanie ``nałożyć mimo to''
(``apply anyway'') -- lub nacisnąć @kbd{C-c}, by przerwać proces
@code{patch}.

@node Niedokładne, , Odwrócone łaty, Niedoskonałe
@subsection Pomoc @code{patch} w znalezieniu niedokładnych dopasowań
@c                  inexact patches
@cindex niedokładne łaty
@cindex łaty, niedokładne
@cindex współczynnik rozmycia przy łataniu
@cindex fuzz factor, łatanie

Dla różnic kontekstowych, i w mniejszym stopniu normalnych, @code{patch}
potrafi wykryć wystąpienie w łacie niepoprawnych numerów linii i próbuje
znaleźć właściwe miejsca do nałożenia poszczególnych porcji.  Jako pierwszą
próbę bierze linię o numerze podanym w łacie plus lub minus ewentualne
przesunięcie zastosowane przy nakładaniu poprzedniej porcji.  Jeśli nie trafi
w poprawne miejsce, to przegląda plik w przód i wstecz szukając zestawu
linii pasujących do kontekstu podanego w porcji.

@code{patch} początkowo szuka miejsca, do którego pasują wszystkie linie
kontekstu.  Jeśli nie może go znaleźć i ma do czynienia z różnicą kontekstową
lub zunifikowaną, zaś maksymalny współczynnik rozmycia ma wartość co
najmniej 1, to wykonuje kolejne wyszukiwanie ignorując pierwszą i ostatnią
linię kontekstu.  Jeśli się i to zawiedzie, a maksymalny współczynnik
rozmycia jest równy co najmniej 2, to wykonuje następne wyszukiwanie,
tym razem ignorując dwie pierwsze i dwie ostatnie linie kontekstu.
Dalej postępuje podobnie jeśli współczynnik rozmycia jest większy.

Opcja @samp{-F @var{linie}} lub @samp{--fuzz=@var{linie}} nadaje maksymalnemu
współczynnikowi rozmycia wartość @var{linie}.  Opcja ta ma zastosowanie tylko
różnic kontekstowych i zunifikowanych.  Powoduje ignorowanie do @var{linie}
linii podczas szukania miejsca do zainstalowania porcji.  Należy pamiętać,
że większy współczynnik rozmycia podnosi ryzyko błędnego załatania.
Domyślnie współczynnik rozmycia wynosi 2. Nie można mu przypisać wartości
większej niż ilość linii kontekstu w pliku różnicy, zwykle 3.

Jeżeli @code{patch} nie może znaleźć miejsca, w którym powinien zainstalować
porcję łaty, zapisuje taką porcję do pliku odrzuceń (@pxref{Odrzucenia},
gdzie dokładniej opisano, jak nazywane są pliku odrzuceń).  Odrzucone porcje
zapisywane są w formacie kontekstowym, niezależnie od postaci łaty
wejściowej.
Jeśli ma ona format normalny lub skryptu @code{ed}, wiele kontekstów będzie
po prostu pustych.  Numery linii w pliku odrzuceń mogą być inne niż w łacie.
Pokazują przybliżone miejsca w nowym pliku, do których, jak przypuszcza
@code{patch}, należą wadliwe porcje.  Numery linii nie odnoszą się do
położenia w starym pliku.

Po zakończeniu obróbki każdej porcji, @code{patch} informuje, czy udało się
ją zaaplikować czy nie. A jeśli nie, to w której linii (w nowym pliku)
powinna się ona, według niego, znaleźć.  Jeśli numer tej linii jest inny
niż numer linii podany w pliku różnicy, pokazywane jest przesunięcie
(offset).  Pojedyncze duże przesunięcie @emph{może} wskazywać na to,
że @code{patch} zainstalował porcję w złym miejscu.  Jeśli do dopasowania
program skorzystał ze współczynnika rozmycia, to również o tym powiadamia,
gdyż wówczas także powinniśmy być troszkę podejrzliwi.

@code{patch} nie umie stwierdzić, czy w skrypcie @code{ed} wyłączono numery
linii.  Potrafi wykryć błędne numery linii w różnicy normalnej tylko wtedy,
gdy znajdzie polecenie zmiany lub usunięcia.  Może mieć takie same kłopoty
z różnicą kontekstową stosując współczynnik rozmycia równy liczbie linii
kontekstu pokazanych w różnicy (standardowo 3) lub większy.
W tych przypadkach powinno się zapewne obejrzeć różnicę kontekstową
między oryginalnym plikiem wejściowym a załatanym, by stwierdzić czy zmiany
mają sens.  Bezbłędna kompilacja pliku jest całkiem dobrą wskazówką, że
łatę nałożono poprawnie, ale nie daje gwarancji.

@code{patch} zwykle tworzy poprawne wyniki, nawet jeśli musi wielokrotnie
@c              make many guesses.
korzystać z szacunków.  Jednak wyniki są na pewno dobre tylko wtedy,
gdy łata jest nakładana na dokładną kopię pliku, z którego została
wygenerowana.

@node Puste pliki, Wielokrotne łaty, Niedoskonałe, Scalanie z patch
@section Usuwanie pustych plików
@cindex puste pliki, usuwanie
@cindex usuwanie pustych plików

Czasem podczas porównywania dwu katalogów zdarza się, że pierwszy
z nich zawiera plik, którego nie ma w drugim.  Jeśli podamy @code{diff}
opcję @samp{-N} lub @samp{--new-file}, to wypisze różnicę, która usuwa
zawartość tego pliku.  Domyślnie, @code{patch} po przetworzeniu takiej
różnicy pozostawia pusty plik.  Użycie @code{patch} z opcją @samp{-E} lub
@samp{--remove-empty-files} powoduje usunięcie plików wyjściowych, które
po nałożeniu łaty są puste.

@node Wielokrotne łaty, Komunikaty patch, Puste pliki, Scalanie z patch
@section Wiele łat w pliku
@cindex wielokrotne łaty

Jeżeli plik łaty zawiera więcej niż jedną łatę, to @code{patch} usiłuje
zastosować każdą z nich tak, jakby pochodziły z osobnych plików łat.
Oznacza to, że program określa nazwę pliku do załatania osobno dla każdej
łaty i bada tekst przed każdą z nich szukając nazw plików i wymaganych
wstępnie numerów wersji (@pxref{Tworzenie łat}, gdzie jest więcej
na ten temat).

Dla drugiej i kolejnych łat w pliku można podać opcje i zastępczą nazwę
oryginalnego pliku oddzielając ich listy argumentów znakiem plus @samp{+}.
Lista argumentów dla drugiej i następnych łat nie może jednak wskazywać
nowego pliku łaty, gdyż nie ma to sensu.

Na przykład, chcąc nakazać @code{patch} wycięcie pierwszych trzech ukośników
z nazwy pierwszej łaty w pliku, a niewycinanie ich w ogóle z kolejnych, oraz
użycie @file{code.c} jako pierwszego pliku wejściowego, stosujemy:

@example
patch -p3 code.c + -p0 < plikłaty
@end example

Opcja @samp{-S} lub @samp{--skip} powoduje, że program ignoruje aktualnie
rozpatrywaną łatę, ale dalej szuka kolejnej łaty w pliku.
Zatem, do zignorowania pierwszej i trzeciej łaty w pliku łat używamy:

@example
patch -S + + -S + < plikłaty
@end example

@node Komunikaty patch, , Wielokrotne łaty, Scalanie z patch
@section Komunikaty i pytania programu @code{patch}
@cindex komunikaty i pytania programu @code{patch}
@cindex diagnostyka programu @code{patch}
@cindex komunikaty @code{patch}

@code{patch} może dawać rozmaite komunikaty, szczególnie, jeśli ma kłopoty
@c                      In a few situations
z odczytaniem i zrozumieniem podanego mu wejścia.  W nielicznych sytuacjach,
gdy nie jest pewien, jak postąpić, normalnie prosi o podanie z klawiatury
dodatkowych informacji.  Istnieją opcje wyłączające wypisywanie komunikatów
(jeśli błędy nie są krytyczne) i oczekiwanie na dane z klawiatury.

Komunikat @samp{Hmm...} wskazuje, że @code{patch} właśnie czyta tekst z pliku
łatającego, usiłując stwierdzić, czy jest w nim łata, a jeśli tak, to jakiego
rodzaju.

Opcja @samp{-s}, @samp{--quiet} lub @samp{--silent} zakazuje wysyłania
na terminal wszelkiego wyjścia, chyba że pojawi się błąd.

Są dwa sposoby powstrzymania @code{patch} od zadawania pytań.
Opcja opcją @samp{-f} lub @samp{--force} wymusza założenie, że użytkownik
dokładnie wie co robi.  Program działa wówczas według poniższych reguł:

@itemize @bullet
@item
pomija łaty, które nie zawierają w nagłówkach nazw plików;

@item
łata pliki nawet mimo tego, że mają złą wersję w stosunku do
wyznaczonej linią @samp{Prereq:} łaty;

@item
zakłada, że łaty nie są odwrócone, nawet jeśli na takowe wyglądają.
@end itemize

Opcja @samp{-t} lub @samp{--batch} jest podobna do @samp{-f}, gdyż
również eliminuje pytania, ale powoduje przyjęcie nieco innych założeń:

@itemize @bullet
@item
pomija łaty, które nie zawierają w nagłówkach nazw plików
(tak samo, jak @samp{-f});

@item
pomija łaty dla plików ze złymi wersjami @samp{Prereq:};

@item
zakłada, że łaty są odwrócone, jeśli na takie wyglądają.
@end itemize

@code{patch} kończy działanie z niezerowym kodem zakończenia jeśli
utworzył jakieś pliki odrzuceń.  Nakładając w pętli zestaw łat,
powinno się sprawdzać kod zakończenia, by nie nałożyć późniejszej łaty
na plik tylko częściowo załatany.

@node Tworzenie łat, Wywołanie cmp, Scalanie z patch, Top
@chapter Wskazówki, jak tworzyć rozsyłane łaty
@cindex tworzenie łat, wskazówki
@cindex wskazówki, tworzenie łat

Oto kilka rzeczy, o których powinieneś pamiętać, jeśli zamierzasz
rozsyłać łaty aktualizujące jakiś pakiet oprogramowania.

Upewnij się, że poprawnie podałeś nazwy plików, albo w nagłówku różnicy
kontekstowej, albo linią @samp{Index:}.  Jeśli łatasz pliki w podkatalogu,
upewnij się, że powiadomiłeś użytkownika, by podał opcję @samp{-p} lub
@samp{--strip}.  Uważaj by nie wysyłać łat odwrotnych, gdyż powoduje to,
że ludzie zastanawiają się czy już nałożyli łatę.

Możesz oszczędzić ludziom wielu problemów związanych z nałożeniem łaty,
która powinna być zastosowana po innych, wcześniejszych łatach.
Wystarczy, że pierwsza różnica w wysyłanym pliku będzie aktualizować
plik o nazwie typu @file{patchlevel.h}, zawierający poziom łaty
(patch level).
Jeśli plik wejściowy będzie zawierał nieodpowiedni numer, @code{patch}
natychmiast zaprotestuje.

@c An even clearer way to prevent this
Znacznie czystszą metodą zapobieżenia temu problemowi jest wstawienie
przed różnicą linii z napisem @samp{Prereq:}.  Jeśli początkowy tekst
w pliku zawiera linię zaczynającą się od @samp{Prereq:}, to @code{patch}
pobiera z tej linii następne słowo (zwykle numer wersji).  Następnie
sprawdza, czy następny plik wejściowy je zawiera, przy czym przed tym
słowem i po nim powinien występować albo biały znak albo znak nowej linii.
Jeśli program nie znajdzie tego słowa w łatanym pliku, to przed
kontynuacją działania prosi o potwierdzenie.  Utrudnia to przypadkowe
nałożenie łat w złej kolejności.

Ponieważ @code{patch} nie obsługuje poprawnie niekompletnych linii,
przy każdym wypuszczeniu nowej wersji upewniaj się, że wszystkie pliki
źródłowe twojego programu kończą się znakiem nowej linii.

Tworzenie łaty zmieniającej starszą wersję pakietu w nowszą zacznij
od utworzenia kopii starszej wersji w jakimś katalogu tymczasowym.
Zwykle robi się to rozpakowując archiwum @code{tar} lub @code{shar}
tej wersji.

Czasem można zredukować rozmiar łaty przemianowując lub przesuwając
niektóre pliki przed jej utworzeniem.  Jeśli starsza wersja pakietu
zawiera jakieś pliki, których nie ma w nowszej, lub jeśli pomiędzy
obiema wersjami zmieniono nazwy jakichś plików, powinieneś przygotować
dla użytkownika listę poleceń @code{rm} lub @code{mv}, które powinien
wykonać w katalogu starej wersji przed nałożeniem łaty.  Następnie
w katalogu tymczasowym uruchom je sam.

Jeśli masz jakieś pliki, których nie musisz włączać do łaty, gdyż łatwo
można je odtworzyć z innych (na przykład, @file{TAGS} czy wyjście z
@code{yacc} bądź @code{makeinfo}), zastąp ich wersje w tymczasowym katalogu
nowszymi, za pomocą @code{rm} i @code{ln} lub @code{cp}.

Teraz możesz utworzyć łatę. Standardem de-facto formatu @code{diff}
stosowanym w dystrybucji łat jest format kontekstowy o dwu liniach
kontekstu, tworzony przez podanie @code{diff} opcji @samp{-C 2}.
Nie stosuj mniej niż dwu linii kontekstu, gdyż @code{patch} na ogół
do poprawnego działania potrzebuje co najmniej dwu.  Wywołując @code{diff}
użyj opcji @samp{-P} na wypadek, gdyby nowsza wersja pakietu zawierała
pliki, których nie było w starszej.  Upewnij się, że jako pierwszy
podajesz tymczasowy katalog, a nowszy jako drugi.

Na początku łaty dodaj objaśnienie dla użytkownika, jakie polecenia
@code{rm} czy @code{mv} powinien uruchomić przed jej użyciem. Teraz
już możesz usunąć tymczasowy katalog.

@node Wywołanie cmp, Wywołanie diff, Tworzenie łat, Top
@chapter Wywołanie @code{cmp}
@cindex wywołanie @code{cmp}
@cindex @code{cmp}, wywołanie

Polecenie @code{cmp} porównuje dwa pliki i, jeśli się różnią, wskazuje
numer bajtu i linii, gdzie występuje pierwsza różnica.
Posiada następujące argumenty:

@example
cmp @var{opcje}@dots{} @var{plik1} @r{[}@var{plik2}@var{]}
@end example

Nazwa pliku @samp{-} oznacza zawsze standardowe wejście.
@code{cmp} używa też standardowego wejścia jeśli pominięto jedną
z nazw plików.

Zwracany kod zakończenia 0 oznacza, że nie odnaleziono różnic,
1 napotkanie różnic, a 2 kłopoty.

@menu
* Opcje cmp::		Zestawienie opcji @code{cmp}.
@end menu

@node Opcje cmp, , , Wywołanie cmp
@section Opcje @code{cmp}
@cindex @code{cmp}, opcje
@cindex opcje @code{cmp}

Poniżej znajduje się podsumowanie wszystkich opcji akceptowanych przez
GNU @code{cmp}.  Większość opcji posiada dwie równoważne formy, jedną
z nich jest pojedyncza litera poprzedzona kreską @samp{-}, a drugą pełna
nazwa poprzedzona przez @samp{--}.  Wiele pojedynczych liter opcji (pod
warunkiem, że nie wymagają argumentu) można połączyć w pojedyncze słowo:
@samp{-cl} jest równoważne @samp{-c -l}.

@table @samp
@item -c
@itemx --print-chars
Wypisuje różniące się znaki.  Znaki sterujące pokazywane są w postaci
@samp{^} plus litera, a znaki z ustawionym bardziej znaczącym bitem (high bit)
poprzedzane są przedrostkiem @samp{M-} (oznaczającym ``meta'').

@item -i @var{ile}
@item --ignore-initial=@var{ile}
Ignoruje wszelkie różnice w @var{ile} początkowych bajtach każdego z plików.
Traktuje pliki zawierające mniej niż @var{ile} bajtów jakby były puste.

@item -l
@itemx --verbose
Dla każdej różnicy wypisuje numer bajtu (dziesiętnie) i wartości różniących
się bajtów (ósemkowo).

@item --quiet
@itemx -s
@itemx --silent
Nic nie wypisuje.  Zwraca tylko kod zakończenia wskazujący, czy pliki
się różnią.

@item -v
@item --version
Wypisuje numer wersji @code{cmp}.
@end table

@node Wywołanie diff, Wywołanie diff3, Wywołanie cmp, Top
@chapter Wywołanie @code{diff}
@cindex wywołanie @code{diff}
@cindex @code{diff}, wywołanie

Format uruchomienia polecenia @code{diff}:

@example
diff @var{opcje}@dots{} @var{plik1} @var{plik2}
@end example

W najprostszym przypadku @code{diff} porównuje zawartość dwóch plików,
@var{plik1} i @var{plik2}.  Nazwa pliku @samp{-} oznacza tekst odczytywany
ze standardowego wejścia.  W specjalnym przypadku: @samp{diff --} porównuje
kopię standardowego wyjścia ze samym sobą.

Jeśli @var{plik1} jest katalogiem a @var{plik2} nie, @code{diff} porównuje
plik z katalogu @var{plik1}, którego nazwa jest taka sama, jak @var{plik2},
i odwrotnie.  Plik nie będący katalogiem nie może być @samp{-}.

Jeśli zarówno @var{plik1} jak i @var{plik2} są katalogami, @code{diff}
porównuje odpowiednie pliki w obu katalogach, w kolejności alfabetycznej.
To porównanie nie jest rekurencyjne, chyba że podano opcję @samp{-r} lub
@samp{--recursive}.  @code{diff} nigdy nie porównuje zawartości katalogu
tak, jakby był on plikiem.  Podany plik nie może być standardowym wejściem,
ponieważ standardowe wejście nie ma nazwy i nie dotyczy go zapis ``plik
o tej samej nazwie''.

Opcje @code{diff} na ogół zaczynają się od @samp{-}, więc zwykle nazwy
plików @var{plik1} oraz @var{plik2} nie mogą zaczynać się od @samp{-},
jednak argument @samp{--} traktuje pozostałe argumenty jako nazwy plików,
nawet jeśli zaczynają się one od @samp{-}.

Zwracany kod zakończenia 0 oznacza, że nie odnaleziono różnic,
1 napotkanie różnic, a 2 kłopoty.

@menu
* Opcje diff::	Zestawienie opcji @code{diff}.
@end menu

@node Opcje diff, , , Wywołanie diff
@section Opcje @code{diff}
@cindex @code{diff}, opcje
@cindex opcje @code{diff}

Poniżej znajduje się podsumowanie wszystkich opcji akceptowanych przez
GNU @code{diff}.  Większość opcji posiada dwie równoważne formy, jedną
z nich jest pojedyncza litera poprzedzona kreską @samp{-}, a drugą pełna
nazwa poprzedzona przez @samp{--}.  Wiele pojedynczych liter opcji (pod
warunkiem, że nie wymagają argumentu) można połączyć w pojedyncze słowo:
@samp{-ac} jest równoważne @samp{-a -c}.  Opcje w formie pełnej nazwy mogą
być skracane do dowolnego unikalnego przedrostka.
Nawiasy kwadratowe (@samp{[} i @samp{]}) oznaczają, że opcja pobiera
opcjonalny argument.

@table @samp
@item -@var{linie}
Wypisuje ilość linii kontekstu podaną w @var{linie} (wartość całkowita).
Ta opcja nie ustala formatu wyjściowego.  Nie ma żadnego efektu jeśli
występuje bez opcji @samp{-c} (@pxref{Format kontekstowy}) lub @samp{-u}
(@pxref{Format zunifikowany}).  Ta opcja jest przestarzała.  Do prawidłowego
działania @code{patch} standardowo potrzebuje co najmniej dwóch linii
kontekstu.

@item -a
@itemx --text
Traktuje wszystkie pliki jak tekstowe i porównuje je linia po linii,
nawet jeśli nie wyglądają one na pliki tekstowe.  @xref{Binarnie}.

@item -b
@itemx --ignore-space-change
Ignoruje zmiany w ilości odstępów (białych znaków).  @xref{Odstępy}.

@item -B
@itemx --ignore-blank-lines
Ignoruje zmiany, które jedynie wstawiają lub usuwają puste linie.
@xref{Puste linie}.

@item --binary
Czyta i zapisuje dane w trybie binarnym.  @xref{Binarnie}.

@item -q
@itemx --brief
Informuje jedynie o tym, czy pliki się różnią, bez podawania szczegółów
na temat różnic.  @xref{Krótko}.

@item -c
Używa kontekstowego formatu wyjściowego.  @xref{Format kontekstowy}.

@item -C @var{linie}
@itemx --context@r{[}=@var{linie}@r{]}
Używa kontekstowego formatu wyjściowego, pokazując @var{linie} (wartość
całkowita) linii kontekstu, lub trzy jeśli nie podano liczby @var{linii}.
Do prawidłowego działania @code{patch} potrzebuje co najmniej dwóch linii
kontekstu.

@item --changed-group-format=@var{format}
Używa formatu wyjściowego @var{format} do wypisania grupy linii
zawierających różniące się linie z obu plików.
Pomocne w tworzeniu plików wynikowych o konstrukcji typu if-then-else.
@xref{Formaty grup linii}.

@item -d
@itemx --minimal
Zmienia algorytm na taki, który może czasami znaleźć mniejszą liczbę zmian.
Spowalnia to działania @code{diff} (czasami bardzo znacznie).
@xref{Wydajność diff}.

@item -D @var{nazwa}
@itemx --ifdef=@var{nazwa}
Tworzy połączone wyjście w formacie @samp{#ifdef}, zależnym od makra
preprocesora @var{nazwa}.  @xref{If-then-else}.

@item -e
@itemx --ed
Tworzy wyjście, które jest poprawnym skryptem @code{ed}.  @xref{Skrypty ed}.

@item -x @var{wzorzec}
@itemx --exclude=@var{wzorzec}
Podczas porównywania katalogów ignoruje pliki i podkatalogi, których
nazwy pasują do wzorca @var{wzorzec}.  @xref{Porównywanie katalogów}.

@item -X @var{plik}
@itemx --exclude-from=@var{plik}
Podczas porównywania katalogów ignoruje pliki i podkatalogi, których
nazwa pasuje do jednego z wzorców podanych w @var{pliku}.
@xref{Porównywanie katalogów}.

@item -t
@itemx --expand-tabs
Rozszerza tabulatory do spacji na wyjściu, aby zachować oryginalne
wyrównanie tabulatorów pliku wejściowego.  @xref{Tabulatory}.

@item -f
@itemx --forward-ed
Tworzy wyjście, które wygląda prawie tak jak skrypt @code{ed}, ale
zawiera modyfikacje w kolejności pojawiania się zmian w pliku.
@xref{Forward ed}.

@item -F @var{regexp}
@itemx --show-function-line= regexp
W formacie kontekstowym lub zunifikowanym dla każdej porcji różnic pokazuje
ostatnią poprzedzającą linię, która pasuje do wyrażenia regularnego
@var{regexp}.  @xref{Podane nagłówki}.

@item -h
Ta opcja aktualnie nie ma żadnego efektu, ale istnieje dla zgodności
z systemem Unix.

@item -H
@itemx --speed-large-files
Używa algorytmów heurystycznych aby przyspieszyć przeszukiwanie dużych
plików ze znaczną liczbą rozrzuconych małych zmian.
@xref{Wydajność diff}.

@item --horizon-lines=@var{linie}
Nie odrzuca ostatnich @var{linie} linii wspólnego przedrostka oraz
pierwszych @var{linie} linii wspólnego przyrostka.  @xref{Wydajność diff}.

@item -i
@itemx --ignore-case
Ignoruje zmiany zmian w wielkości liter, duże i małe litery są uznawane
za równoważne.  @xref{Wielkość liter}.

@item -I @var{regexp}
@itemx --ignore-matching-lines=@var{regexp}
Ignoruje zmiany, które jedynie wstawiają lub usuwają linie pasujące do
wyrażenia regularnego @var{regexp}.  @xref{Pomijanie podanych}.

@item -w
@itemx --ignore-all-space
Ignoruje wszystkie odstępy (białe znaki) przy porównywaniu plików.
@xref{Odstępy}.

@item -T
@itemx --initial-tab
Wyprowadza tabulator zamiast spacji przed tekstem linii w formacie
normalnym lub kontekstowym. Powoduje to normalny wygląd tabulatorów w linii.
@xref{Tabulatory}.

@item -l
@itemx --paginate
Przesyła wyjście przez @code{pr}, aby podzielić je na strony.
@xref{Stronicowanie}.

@item -L @var{etykieta}
@itemx --label=@var{etykieta}
Używa tekstu @var{etykieta} w miejsce nazwy plików w nagłówku formatu
kontekstowego (@pxref{Format kontekstowy}) i zunifikowanego
(@pxref{Format zunifikowany}).  @xref{RCS}.

@item --left-column
Wyświetla jedynie lewą kolumnę z dwóch wspólnych w formacie jedna obok
drugiej.  @xref{Format dwukolumnowy}.

@item --line-format=@var{format}
Używa formatu @var{format} do wyprowadzenia wszystkich linii.
To samo, co równoczesne użycie wszystkich opcji formatowania linii
(@samp{--old-line-format}, @samp{--new-line-format},
@samp{--unchanged-line-format}) z tym samym formatem.
Pomocne w tworzeniu plików wynikowych o konstrukcji typu if-then-else.
@xref{Formaty linii}.

@item -n
@itemx --rcs
Wyprowadza różnice w formacie RCS, tak jak @samp{-f}, z tym wyjątkiem,
że każda komenda wyszczególnia numer linii, której dotyczy.  @xref{RCS}.

@item -N
@itemx --new-file
Jeśli podczas porównywania katalogów plik istnieje jedynie w jednym
z katalogów, będzie traktowany tak, jakby był obecny w drugim katalogu,
ale pusty.  @xref{Porównywanie katalogów}.

@item --new-group-format=@var{format}
Używa formatu @var{format} do wyprowadzenia grupy linii wziętej jedynie
z drugiego pliku.  Pomocne w tworzeniu plików wynikowych o konstrukcji
typu if-then-else.  @xref{Formaty grup linii}.

@item --new-line-format=@var{format}
Używa formatu @var{format} do wyprowadzenia linii wziętej jedynie
z drugiego pliku.  Pomocne w tworzeniu plików wynikowych o konstrukcji
typu if-then-else.  @xref{Formaty linii}.

@item --old-group-format=@var{format}
Używa formatu @var{format} do wyprowadzenia grupy linii wziętej jedynie
z pierwszego pliku.  Pomocne w tworzeniu plików wynikowych o konstrukcji
typu if-then-else.  @xref{Formaty grup linii}.

@item --old-line-format=@var{format}
Używa formatu @var{format} do wyprowadzenia linii wziętej jedynie
z pierwszego pliku.  Pomocne w tworzeniu plików wynikowych o konstrukcji
typu if-then-else.  @xref{Formaty linii}.

@item -p
@itemx --show-c-function
Pokazuje, do jakiej funkcji C należy każda ze zmian.
@xref{Nagłówki funkcji C}.

@item -P
@itemx --unidirectional-new-file
Jeśli podczas porównywania katalogów plik istnieje jedynie w drugim katalogu,
będzie traktowany tak, jakby był obecny w pierwszym katalogu, ale pusty.
@xref{Porównywanie katalogów}.

@item -r
.B \-\-recursive
Rekurencyjnie porównuje wszystkie podkatalogi, jeśli porównywane
są katalogi.  @xref{Porównywanie katalogów}.

@item -s
@itemx --report-identical-files
Informuje, jeśli oba pliki są identyczne.
@xref{Porównywanie katalogów}.

@item -S @var{plik}
@itemx --starting-file= plik
Podczas porównywania katalogów rozpoczyna od pliku @var{plik}.
Opcja ta jest użyteczna podczas wznawiania przerwanego porównania.
@xref{Porównywanie katalogów}.

@item --sdiff-merge-assist
Wyświetla dodatkowe informacji pomocne dla @code{sdiff}.  @code{sdiff}
korzysta z tej opcji gdy uruchamia @code{diff}. Użytkownicy nie powinni
korzystać z tej opcji bezpośrednio.

@item -y
@itemx --side-by-side
Używa formatu wyjściowego jeden obok drugiego.  @xref{Format dwukolumnowy}.

@item --suppress-common-lines
Nie wypisuje wspólnych linii w formacie jedna obok drugiej.
@xref{Format dwukolumnowy}.

@item -u
Używa zunifikowanego formatu wyjściowego.  @xref{Format zunifikowany}.

@item --unchanged-group-format=@var{format}
Używa formatu @var{format} do wyprowadzenia grupy wspólnych linii, wziętych
z obu plików.  Pomocne w tworzeniu plików wynikowych o konstrukcji typu
if-then-else.  @xref{Formaty grup linii}.

@item --unchanged-line-format=@var{format}
Użycie formatu @var{format} do wyprowadzenia linii wspólnej dla obu plików.
Pomocne w tworzeniu plików wynikowych o konstrukcji typu
if-then-else.  @xref{Formaty linii}.

@item -U @var{linie}
@itemx --unified@r{[}=@var{linie}@r{]}
Używa zunifikowanego formatu wyjściowego, wypisując @var{linie} (wartość
całkowita) linii kontekstu , lub trzy jeśli nie podano @var{linii}.
Do prawidłowego działania @code{patch} potrzebuje co najmniej

@item -v
@itemx --version
Wypisuje numer wersji @code{diff}.

@item -w
@itemx --ignore-all-space
Ignoruje wszystkie odstępy (białe znaki) przy porównywaniu plików.
@xref{Odstępy}.

@item -W @var{kolumny}
@itemx --width=@var{kolumny}
Używa szerokości wyjścia @var{kolumny} w formacie jedna obok drugiej.
@xref{Format dwukolumnowy}.
@end table

@node Wywołanie diff3, Wywołanie patch, Wywołanie diff, Top
@chapter Wywołanie @code{diff3}
@cindex wywołanie @code{diff3}
@cindex @code{diff3}, wywołanie

Polecenie @code{diff3} porównuje trzy pliki i podaje opisy różnic pomiędzy
nimi.  Posiada następujące argumenty:

@example
diff3 @var{opcje}@dots{} @var{mój} @var{starszy} @var{twój}
@end example

Porównywanymi plikami są @var{mój}, @var{starszy} i @var{twój}.
Co najwyżej jedną z tych trzech nazw może być @samp{-},
mówiąca @code{diff3} by zamiast tego pliku czytał standardowe wejście.

Zwracany kod zakończenia 0 oznacza pomyślnie ukończoną pracę @code{diff3},
1 napotkanie konfliktów, a 2 kłopoty.

@menu
* Opcje diff3::		Zestawienie opcji @code{diff3}.
@end menu

@node Opcje diff3, , , Wywołanie diff3
@section Opcje @code{diff3}
@cindex @code{diff3}, opcje
@cindex opcje @code{diff3}

Poniżej podano podsumowanie wszystkich opcji akceptowanych przez
GNU @code{diff3}.  Można łączyć kilka opcji jednoliterowych (chyba
że pobierają argument) w pojedynczy argument wiersza poleceń.

@table @samp
@item -a
@itemx --text
Traktuje wszystkie pliki jak tekstowe i porównuje je linia po linii,
nawet jeśli nie wyglądają na tekstowe.  @xref{Binarnie}.

@item -A
@itemx --show-all
Nanosi wszystkie zmiany powstałe między @var{starszy} a @var{twój}
do pliku @var{mój}, ujmując wynikłe konflikty pomiędzy linie zawierające
ciągi nawiasów ostrych (@samp{>}, @samp{<}).  @xref{Oznaczanie konfliktów}.

@item -e
@itemx --ed
Tworzy skrypt programu @code{ed}, który nanosi zmiany pomiędzy
@var{starszy} a @var{twój} do pliku @var{mój}.  @xref{Jakie zmiany}.

@item -E
@itemx --show-overlap
Jak @samp{-e}, ale dodatkowo obejmuje nakładające się zmiany parami linii
nawiasów ostrych.  @xref{Oznaczanie konfliktów}.
Z opcją @samp{-E}, nakładająca się zmiana wygląda tak:

@example
<<<<<<< @var{mój}
@r{linie z @var{mój}}
=======
@r{linie z @var{twój}}
>>>>>>> @var{twój}
@end example

@item -3
@itemx --easy-only
Jak @samp{-e}, z wyjątkiem tego, że wypisuje tylko zmiany nienakładające się.
@xref{Jakie zmiany}.

@item -i
Na końcu skryptu @code{ed} generuje polecenia @samp{w} i @samp{q},
by był zgodny z System V.  Opcja ta musi być użyta z jedną z opcji
@samp{-AeExX3}, a nie może być łączona z @samp{-m}.
@xref{Zachowywanie zmienionego pliku}.

@item -T
@itemx --initial-tab
Zamiast dwu spacji przed tekstem linii normalnego formatu wypisuje
tabulację.  Powoduje to, że wyrównanie tabulacji w linii wygląda normalnie.
@xref{Tabulatory}.

@item -L @var{etykieta}
@itemx --label=@var{etykieta}
W liniach nawiasów ostrych wypisywanych przez opcje
@samp{-A}, @samp{-E} i @samp{-X} używa etykiety @var{etykieta} w miejscu
nazwy pliku.  Opcję tę można podać do trzech razy, po jednym dla każdego
pliku wejściowego.  Domyślne etykiety są nazwami plików wejściowych.
Zatem @samp{diff3 -L X -L Y -L Z -m A B C} działa jak @samp{diff3 -m A B C},
z wyjątkiem tego, że wynik wygląda jakby pochodził z plików o nazwach
@samp{X}, @samp{Y} i @samp{Z}, a nie z plików nazywających się @samp{A},
@samp{B} i @samp{C}.  @xref{Oznaczanie konfliktów}.

@item -m
@itemx --merge
Za pośrednictwem skryptu edycyjnego wprowadza zmiany do pierwszego pliku
i wysyła wynik na standardowe wyjście.  W przeciwieństwie do przesyłania
potokiem wyjścia z @code{diff3} do @code{ed}, działa nawet z plikami
binarnymi i niekompletnymi liniami.  Jeśli nie podano żadnej z opcji
skryptu edycyjnego, to przyjmowana jest @samp{-A}.  @xref{Pomijanie ed}.

@item -x
@itemx --overlap-only
Jak @samp{-e}, ale wypisuje tylko zmiany nakładające się.
@xref{Jakie zmiany}.

@item -X
Jak @samp{-E}, ale wypisuje tylko zmiany, które się nakładają.
Inaczej mówiąc, jak @samp{-x}, tylko obejmuje zmiany w nawiasy ostre,
jak w @samp{-E}.  @xref{Oznaczanie konfliktów}.

@item -v
@itemx --version
Wypisuje numer wersji @code{diff3}.
@end table

@node Wywołanie patch, Wywołanie sdiff, Wywołanie diff3, Top
@chapter Wywołanie @code{patch}
@cindex wywołanie @code{patch}
@cindex @code{patch}, wywołanie

Normalnie @code{patch} jest wywoływany tak:

@example
patch <@var{plikłatający}
@end example

Pełny format wywołania @code{patch} jest następujący:

@example
patch @var{opcje}@dots{} @r{[}@var{plikoryginalny}
@r{[}@var{plikłatający}@r{]}@r{]} @r{[}+ @var{opcje}@dots{}
@r{[}@var{plikoryginalny}@r{]}@r{]}@dots{}
@end example

Jeśli @var{plikłatający} jest pominięty lub jest myślnikiem @samp{-}, to
łata (czyli wyjście @code{diff}) będzie czytana ze standardowego wejścia.

Jako argumenty @var{plikoryginalny} można podać kilka plików pierwotnych.
Wówczas każdy z nich, wraz z opcjami do jego interpretacji, oddzielany jest
od pozostałych znakiem plus @samp{+}.  @xref{Wielokrotne łaty}, gdzie
podano szczegóły.

Jeżeli w wierszu poleceń nie zostanie podany plik wejściowy, to @code{patch}
usiłuje wydedukować, który plik zmieniać, z @dfn{poprzedzającego tekstu}
(tekstu, jaki ewentualnie występuje w łacie przed wyjściem @code{diff}).
W nagłówku różnicy kontekstowej bądź zunifikowanej szuka w liniach
zaczynających się od @samp{***}, @samp{---} lub @samp{+++}; wybiera z nich
najkrótszą nazwę istniejącego pliku.  W pozostałych przypadkach, jeśli
w poprzedzającym różnice tekście istnieje linia @samp{Index:}, to usiłuje
użyć nazwy pliku z tej linii.  Jeżeli @code{patch} nie potrafi wydedukować
nazwy istniejącego pliku z poprzedzającego tekstu, to prosi użytkownika
o podanie nazwy pliku do załatania.

Jeśli plik wejściowy nie istnieje lub jest przeznaczony tylko dla odczytu,
a istnieją odpowiednie pliki RCS lub SCCS, to program usiłuje pobrać (get)
lub zaktualizować (check out) plik przed przetwarzaniem.

Domyślnie, @code{patch} wersja załatana jest podstawiana na miejsce
oryginału, po uprzednim przemianowaniu go na plik kopii zapasowej
(@pxref{Kopie zapasowe}, gdzie opisano, jak @code{patch} nazywa kopie zapasowe).
Można też określić, gdzie powinien być umieszczony wynik łatania.
Robi się to opcją @samp{-o @var{plik-wyjściowy}}
lub @samp{--output=@var{plik-wyjściowy}}.

@menu
* Katalogi patch::	Zmiana katalogu i ucinanie nazw katalogów.
* Kopie zapasowe::	Nazwy plików kopii zapasowych.
* Odrzucenia::		Nazwy plików odrzuceń.
* Opcje patch::		Sumaryczne zestawieni opcji @code{patch}.
@end menu

@node Katalogi patch, Kopie zapasowe, , Wywołanie patch
@section Nakładanie łat w innych katalogach
@cindex katalogi i łatanie
@cindex łatanie katalogów

Opcja @samp{-d @var{katalog}} lub @samp{--directory=@var{katalog}}
polecenia @code{patch} powoduje, że podany @var{katalog} jest traktowany
jak katalog bieżący przy interpretacji zarówno nazw plików w pliku łaty,
jak i nazw plików podanych jako argumenty innych opcji (jak @samp{-B} czy
@samp{-o}).  Na przykład, podczas pracy z czytnikiem grup dyskusyjnych można
załatać plik w katalogu @file{/usr/src/emacs} wprost z artykułu zawierającego
łatę, w ten sposób:

@example
| patch -d /usr/src/emacs
@end example

Czasami nazwy plików podane w łacie zawierają na początku katalogi, ale
przechowujemy swoje pliki w katalogu innym niż ten, który podano w łacie.
W takiej sytuacji można posłużyć się opcją @samp{-p@r{[}@var{liczba}@r{]}}
lub @samp{--strip@r{[}=@var{liczba}@r{]}}, do ustalenia liczby ukośników
obcinanych z nazw plików.  Liczba ta podaje programowi, ile ukośników, razem
z nazwami katalogów między nimi, powinien odciąć z początku nazwy pliku.
@samp{-p} bez podania @var{liczby} jest równoważne @samp{-p0}.  Domyślnie,
@code{patch} ucina wszystkie początkowe katalogi, pozostawiając tylko
główną nazwę pliku, z wyjątkiem sytuacji, gdy w łacie podano względną nazwę
pliku a wszystkie jej początkowe katalogi już istnieją.  Wówczas występujące
na początku nazwy katalogi nie są odcinane.
(@dfn{Względna} nazwa pliku to taka, która nie rozpoczyna się od ukośnika.)

Po odcięciu ewentualnych ukośników, @code{patch} szuka pliku w bieżącym
katalogu albo, jeśli użyto opcji @samp{-d @var{katalog}}, w katalogu przez
nią wskazanym.

Na przykład, załóżmy nazwą pliku w łacie jest @file{/gnu/src/emacs/etc/NEWS}.
Użycie opcji @samp{-p} lub @samp{-p0} daje niezmienioną nazwę, @samp{-p1}
daje @file{gnu/src/emacs/etc/NEWS} (bez początkowego ukośnika), @samp{-p4}
daje @file{etc/NEWS}, a niepodanie @samp{-p} w ogóle -- @file{NEWS}.

@node Kopie zapasowe, Odrzucenia, Katalogi patch, Wywołanie patch
@section Nazwy plików kopii zapasowych
@cindex kopie zapasowe, nazwy

Normalnie @code{patch} przemianowuje pierwotny plik wejściowy na kopię
zapasową dopisując do jego nazwy rozszerzenie @samp{.orig} (lub @samp{~}
w systemach nie obsługujących długich nazw plików).  Opcja @samp{-b
@var{przyrostek-kopii}} lub @samp{--suffix=@var{przyrostek-kopii}} używa
zamiast nich @var{przyrostka-kopii}, jako rozszerzenia kopii zapasowej.

Przyrostek kopii można też określić za pomocą zmiennej środowiska
@code{SIMPLE_BACKUP_SUFFIX}, która jest przesłaniana przez te opcje.

@code{patch} może też tworzyć kopie numerowane, tak jak robi to GNU Emacs.
W tej metodzie, zamiast posiadania pojedynczej kopii dla każdego pliku,
@code{patch} tworzy nowy plik kopii bezpieczeństwa za każdym razem gdy łata
plik.  Na przykład, kopie pliku o nazwie @file{sink} będą się nazywać,
kolejno, @file{sink.~1~}, @file{sink.~2~}, @file{sink.~3~}, itd.

Opcja @samp{-V @var{metoda}} lub @samp{--version-control=@var{metoda}}
jako argument przyjmuje metodę tworzenia nazw plików zapasowych.
Rodzaje robionych kopii zapasowych można również podać w zmiennej
środowiskowej @code{PATCH_VERSION_CONTROL} (lub, jeśli nie jest ustawiona,
zmienną @code{VERSION_CONTROL}), która jest przesłaniana przez tę opcję.
Wartość @var{metody} jest podobna jak zmiennej @code{version-control}
GNU Emacsa (@pxref{Backups, , Backups, emacs, The GNU Emacs Manual}, gdzie bliżej
omówiono wersje kopii w Emacsie).  Oba te programy rozpoznają też
ich bardziej opisowe synonimy.  Poprawne wartości to (przyjmowane są
rozróżnialne skróty):

@table @samp
@item t
@itemx numbered
Tworzy zawsze numerowane kopie zapasowe.

@item nil
@itemx existing
Tworzy numerowane kopie zapasowe plików, które już je mają, a zwykłe kopie
dla pozostałych. Tak jest domyślnie.

@item never
@itemx simple
Zawsze robi zwykłe kopie zapasowe.
@end table

Można także nakazać @code{patch} użycie przedrostka, jak na przykład
nazwy katalogu, do tworzenia nazw plików zapasowych.  Opcja @samp{-B
@var{przedrostek-kopii}} lub @samp{--prefix=@var{przedrostek-kopii}} tworzy
pliki zapasowe poprzedzając ich nazwy @var{przedrostkiem-kopii}.
jeśli zostanie ona użyta, to @code{patch} ignoruje podaną równocześnie
opcję @samp{-b}.

Jeżeli plik kopii już istnieje, program tworzy nową nazwę pliku zapasowego
zmieniając pierwszą zmieniając pierwszą małą literę ostatniej składowej
nazwy pliku na dużą.  Jeśli nie ma już więcej małych liter, usuwa
pierwszy znak z nazwy.  Proces ten jest powtarzany, aż nie znajdzie się
nazwa pliku, który jeszcze nie istnieje.

Jeśli opcją @samp{-o} zostanie podana nazwa pliku wyjściowego, to tworzona
jest kopia zapasowa tego pliku, a nie pliku wejściowego.

@node Odrzucenia, Opcje patch, Kopie zapasowe, Wywołanie patch
@section Nazwy plików odrzuceń
@cindex odrzucenia, nazwy plików

Nazwy plików odrzuceń (plików zawierających łaty, dla których @code{patch}
nie znalazł miejsca do nałożenia) są normalnie nazwami odpowiedniego pliku
wyjściowego z dopisaną końcówką @samp{.rej} (lub @samp{#} w systemach, które
nie obsługują długich nazw plików).

Można także nakazać @code{patch}, by umieścił wszystkie odrzucone łaty
w jednym pliku.  Opcja @samp{-r @var{plik-odrzuceń}} lub
@samp{--reject-file=@var{plik-odrzuceń}} umieszcza wszystkie odrzucone
różnice w @var{pliku-odrzuceń}, a nie w domyślnych plikach odrzuceń.

@node Opcje patch, , Odrzucenia, Wywołanie patch
@section Opcje @code{patch}
@cindex @code{patch}, opcje
@cindex opcje @code{patch}

Oto zestawienie wszystkich opcji akceptowanych przez @code{patch}.
Starsze wersje @code{patch} nie przyjmują opcji o pełnej nazwie
(zaczynających się od @samp{--}) ani opcji @samp{-t}, @samp{-E}
lub @samp{-V}.

Kilka opcji jednoliterowych, które nie pobierają argumentu można łączyć
w pojedynczy argument wiersza poleceń (z jednym tylko myślnikiem).
Nawiasy kwadratowe (@samp{[} i @samp{]}) oznaczają, że opcja pobiera
opcjonalny argument.

@table @samp
@item -b @var{przyrostek-kopii}
@itemx --suffix=@var{przyrostek-kopii}
Używa @var{przyrostka-kopii} jako rozszerzenia kopii zapasowych zamiast
@samp{.orig} lub @samp{~}.  @xref{Kopie zapasowe}.

@item -B @var{przedrostek-kopii}
@itemx --prefix=@var{przedrostek-kopii}
Używa @var{przedrostka-kopii} jako przedrostka nazwy pliku zapasowego.
Jeśli podano tę opcję, to opcja @samp{-b} jest ignorowana.  @xref{Kopie zapasowe}.

@item -t
@itemx --batch
Nie zadaje żadnych pytań.  @xref{Komunikaty patch}.

@item -c
@itemx --context
Interpretuje plik łaty jako różnicę kontekstową.  @xref{Wejście patch}.

@item -d @var{katalog}
@itemx --directory=@var{katalog}
Powoduje, że podany @var{katalog} jest traktowany jak katalog bieżący
przy interpretacji zarówno nazw plików w pliku łaty, jak i nazw plików
podanych jako argumenty innych opcji.  @xref{Katalogi patch}.

@item -D @var{nazwa}
@itemx --ifdef=@var{nazwa}
@c  Make merged if-then-else output using @var{format} HQ: ??? 
Tworzy scalone wyjście, ze zmianami oznaczonymi przez @samp{#ifdef...#endif}.
@var{nazwa} będzie symbolem różnicującym.  @xref{If-then-else}.

@item --debug=@var{liczba}
@itemx -x @var{liczba}
Ustawia wewnętrzne flagi debuggowe. Ma to znaczenie tylko dla łataczy
programu @code{patch}.

@item -e
@itemx --ed
Wymusza interpretację pliku z łatą jako skryptu @code{ed}.
@xref{Wejście patch}.

@item -E
@itemx --remove-empty-files
Powoduje, że usuwane są pliki wyjściowe, które po zaaplikowaniu łat są puste.
@xref{Puste pliki}.

@item -f
@itemx --force
Wymusza założenie, że użytkownik dokładnie wie co robi i powoduje
niezadawanie pytań.  @xref{Komunikaty patch}.

@item -F @var{linie}
@itemx --fuzz=@var{linie}
Ustawia współczynnik maksymalnego rozmycia na @var{linie} linii.
@xref{Niedokładne}.

@item -N
@itemx --forward
Powoduje ignorowanie łat, które wydają się być odwrócone lub już
zaaplikowane.  Zobacz też @samp{-R}.  @xref{Odwrócone łaty}.

@item -l
@itemx --ignore-white-space
Powoduje, że dowolny ciąg białych znaków w pliku łaty pasuje do dowolnego
ciągu białych znaków w pliku wejściowym.  @xref{Zmienione odstępy}.

@item -n
@itemx --normal
Powoduje, że plik z łatą jest interpretowany jak różnica typu `normal'.
@xref{Wejście patch}.

@item -o @var{pliku-wyjściowego}
@itemx --output=@var{pliku-wyjściowego}
Używa @var{pliku-wyjściowego} jako nazwy pliku wyjściowego.
@xref{Opcje patch}.

@item -p@r{[}@var{liczba}@r{]}
@itemx --strip@r{[}=@var{liczba}@r{]}
Wyznacza @var{liczbę} początkowych ukośników odcinanych z nazwy pliku.
@xref{Katalogi patch}.

@item -s
@itemx --quiet
@itemx --silent
Powoduje, że @code{patch} działa cicho, chyba że pojawi się błąd.
@xref{Komunikaty patch}.

@item -r @var{plik-odrzuceń}
@itemx --reject-file=@var{plik-odrzuceń}
Używa @var{pliku-odrzuceń} jako nazwy dla pliku odrzuconych poprawek.
@xref{Odrzucenia}.

@item -R
@itemx --reverse
Zakłada, że dana łata została utworzona przy zamienionych miejscami
plikach: starym i nowym.  @xref{Odwrócone łaty}.

@item -S
@itemx --skip
Powoduje ignorowanie tej łaty z pliku z łatą, lecz kontynuowanie
szukania następnej.  @xref{Wielokrotne łaty}.

@item -u
@itemx --unified
Wymusza interpretację łaty jako zunifikowanej różnicy kontekstowej.
@xref{Wejście patch}.

@item -V @var{metoda}
@itemx --version=control=@var{metoda}
Określa rodzaj tworzonych kopii zapasowych.  @xref{Kopie zapasowe}.

@item --help
Wypisuje listę rozpoznawanych przez @code{patch} opcji, po czym
kończy działanie.

@item -v
@itemx --version
Wypisuje numer wersji programu @code{patch}.
@end table

@node Wywołanie sdiff, Niekompletne linie, Wywołanie patch, Top
@chapter Wywołanie @code{sdiff}
@cindex wywołanie @code{sdiff}
@cindex @code{sdiff}, wywołanie

Polecenie @code{sdiff} scala dwa pliki i interaktywnie wypisuje wynik.
Ma następujące argumenty:

@example
sdiff -o @var{plik-wyjściowy} @var{opcje}@dots{} @var{plik1} @var{plik2}
@end example

Scala to @var{plik1} z @var{plik2}, umieszczając wynik
w @var{pliku-wyjściowym}. Jeśli @var{plik1} jest katalogiem a @var{plik2}
nie, to @code{sdiff} będzie porównywał znajdujący się w katalogu @var{plik1}
plik o tej samej nazwie, co @var{plik2}, i odwrotnie.  Oba argumenty
@var{plik1} i @var{plik2} nie mogą być równocześnie katalogami.

Opcje @code{sdiff} zaczynają się od @samp{-}, więc normalnie nazwy
@var{plik1} ani @var{plik2} nie mogą się zaczynać od kreski.
Jednak użycie argumentu @samp{--} powoduje, że występujące po nim
argumenty wiersza poleceń są traktowane jak nazwy plików, nawet jeśli
zaczynają się kreską. Nie można użyć @samp{-} jako pliku wejściowego.

Zwracany kod zakończenia 0 oznacza, że nie odnaleziono różnic,
1 napotkanie różnic, a 2 kłopoty.

@code{sdiff} bez @samp{-o} (lub @samp{--output}) tworzy różnicę wyświetlaną
w równoległych kolumnach.  Składnia ta jest przestarzała; zamiast niej należy
stosować @samp{diff --side-by-side}.

@menu
* Opcje sdiff::		Zestawienie opcji @code{diff}.
@end menu

@node Opcje sdiff, , , Wywołanie sdiff
@section Opcje @code{sdiff}
@cindex @code{sdiff}, opcje
@cindex opcje @code{sdiff}

Poniżej znajduje się podsumowanie wszystkich opcji akceptowanych przez
GNU @code{sdiff}.  Większość opcji posiada dwie równoważne formy, jedną
z nich jest pojedyncza litera poprzedzona kreską @samp{-}, a drugą pełna
nazwa poprzedzona przez @samp{--}.  Wiele pojedynczych liter opcji (pod
warunkiem, że nie wymagają argumentu) można połączyć w pojedyncze słowo.
Opcje w formie pełnej nazwy mogą być skracane do dowolnego unikalnego
przedrostka.

@table @samp
@item -a
@itemx --text
Traktuje wszystkie pliki jako pliki tekstowe i porównuje je linia po linii,
nawet jeśli nie wyglądają one na pliki tekstowe.  @xref{Binarnie}.

@item -b
@itemx --ignore-space-change
Ignoruje zmiany w ilości odstępów (białych znaków).  @xref{Odstępy}.

@item -B
@itemx --ignore-blank-lines
Ignorowanie zmian, które jedynie dodają lub usuwają puste linie.
@xref{Puste linie}.

@item -d
@itemx --minimal
Zmiana algorytmu na taki, który może czasami znaleźć mniejszą liczbę zmian.
Spowalnia to działania @code{sdiff} (czasami bardzo znacznie).
@xref{Wydajność diff}.

@item -H
@itemx --speed-large-files
Używa algorytmów heurystycznych aby przyspieszyć przeszukiwanie dużych
plików ze znaczną liczbą rozrzuconych małych zmian.
@xref{Wydajność diff}.

@item -t
@itemx --expand-tabs
Rozszerza tabulatory do spacji na wyjściu, aby zachować oryginalne
ułożenie tabulatorów pliku wejściowego.  @xref{Tabulatory}.

@item -i
@itemx --ignore-case
Ignoruje zmiany w wielkości liter, duże i małe litery są uznawane za
równoważne.
@xref{Wielkość liter}.

@item -I @var{regexp}
@itemx --ignore-matching-lines=@var{regexp}
Ignoruje zmiany, które jedynie dodają lub usuwają linie pasujące do
wyrażenia regularnego @var{regexp}.  @xref{Pomijanie podanych}.

@item -W
@itemx --ignore-all-space
Ignoruje wszystkie odstępy przy porównywaniu plików.
Warto pamiętać, że, z przyczyn historycznych, opcja ta nazywa się
@samp{-w} w programie @code{diff}, zaś @samp{-W} w @code{sdiff}.
@xref{Odstępy}.

@item -l
@itemx --left-column
Wypisuje jedynie lewą kolumnę z dwóch wspólnych w formacie jedna obok
drugiej.  @xref{Format dwukolumnowy}.

@item -o @var{plik}
@itemx --output=@var{plik}
Wstawia scalone wyjście do @var{pliku}.  Wymagana do scalania.

@item -s
@itemx --suppress-common-lines
Powoduje, że wspólne linie nie będą wypisywane.
@xref{Format dwukolumnowy}.


@item -w @var{kolumny}
@itemx --width=@var{kolumny}
Użycie szerokości wyjścia @var{kolumny} w formacie jedna obok drugiej.
Warto pamiętać, że, z przyczyn historycznych, opcja ta nazywa się
@samp{-W} w programie @code{diff}, zaś @samp{-w} w @code{sdiff}.

@item -v
@itemx --version
Wypisuje numer wersji programu @code{sdiff}.
@end table

@node Niekompletne linie, Plany, Wywołanie sdiff, Top
@chapter Niekompletne linie
@cindex niekompletne linie
@cindex pełne linie
@cindex nowe linie, sposób traktowania przez @code{diff}

Jeśli plik wejściowy kończy się znakiem innym niż znak nowej linii, ostatnią
jego linię nazywamy @dfn{niekompletną linią}, gdyż nie jest zakończona
znakiem nowej linii.  Wszystkie pozostałe nazywamy @dfn{pełnymi liniami}
i kończą się one znakiem nowej linii.  Niekompletne linie nie pasują do
pełnych, chyba że różnice, co do białych znaków są ignorowane.
(@pxref{Odstępy}).

Normalnie niekompletna linia odróżniana jest w produkowanym wyjściu
od pełnej przez następną linię, zaczynającą się wówczas od @samp{\}.
Jednak format RCS (@pxref{RCS}) wypisuje niekompletną linię w postaci
niezmienionej, bez kończenia jej znakiem nowej linii czy zmiany w kolejnej.
Format dwukolumnowy normalnie przedstawia niekompletne linie tak, jak
występują, ale w niektórych przypadkach stosuje znacznik międzykolumnowy
@samp{\} lub @samp{/}.  Format linii if-then-else zachowuje niekompletność
linii przy @samp{%L}, a usuwa znak nowej linii przy @samp{%l};
@xref{Formaty linii}.  Na koniec, w formatach wyjściowych @code{ed}
i @code{ed} uporządkowanym w przód (forward @code{ed}) @code{diff}
nie potrafi przedstawić niekompletnej linii, więc udaje, że był znak
nowej linii i zgłasza błąd.

Na przykład, załóżmy, że @file{F} i @file{G} są jednobajtowymi plikami, które
zawierają tylko, odpowiednio, @samp{f} i @samp{g}.  Wówczas @samp{diff F G}
wypisze

@example
1c1
< f
\ No newline at end of file
---
> g
\ No newline at end of file
@end example

@noindent
(faktyczny komunikat może być inny, w zależności języka ustawionego
za pośrednictwem mechanizmu locale.)
@samp{diff -n F G} wypisze poniższe bez końcowego znaku nowej linii:

@example
d1 1
a1 1
g
@end example

@samp{diff -e F G} zgłosi dwa błędy i wypisze:

@example
1c
g
.
@end example

@node Plany, Indeks pojęć, Niekompletne linie, Top
@chapter Przyszłe plany

A oto kilka pomysłów na ulepszenie GNU @code{diff} i @code{patch}.
W projekcie GNU wskazał kilka ulepszeń jako potencjalne projekty
programistyczne dla ochotników.  Możesz też dopomóc zgłaszając znalezione
w programach błędy.

Jeśli jesteś programistą i zechciałbyś wnieść coś do projektu GNU,
zastanów się, proszę, nad zgłoszeniem się do jednego z tych projektów.
Jeśli poważnie rozważasz pracę, napisz proszę
do @samp{gnu@@prep.ai.mit.edu}, by skoordynować działania z innymi
ochotnikami.

@menu
* Niedociągnięcia::	Sugerowane projekty usprawnień.
* Błędy::		Zgłaszanie błędów.
@end menu

@node Niedociągnięcia, Błędy, , Plany
@section Sugerowane projekty usprawnienia GNU @code{diff} i @code{patch}
@cindex projekty związane z katalogami

Powinno się móc użyć GNU @code{diff} do wygenerowania łaty z pary dowolnych
drzew katalogowych, a mając taką łatę i jedno z takich drzew - zastosować
@code{patch} do utworzenia wiernej kopii drugiego.  Niestety, niektórych
zmian w drzewie katalogów nie da się przedstawić za pomocą obecnych formatów
łat. Ponadto, @code{patch} nie rozpoznaje niektórych z istniejących formatów.
Z powodu tych wad zasugerowano poniższe projekty.

@menu
* Zmiana struktury::	Obsługa zmian struktury katalogu.
* Pliki specjalne::	Obsługa dowiązań symbolicznych, plików urządzeń itd.
* Niezwykłe nazwy::	Obsługa nazw plików zawierających niezwykłe znaki.
* Narzucone ograniczenia::	Łatanie plików nie-tekstowych.
* Duże pliki::		Obsługa plików nie mieszczących się w pamięci.
* Ignorowanie zmian::	Ignorowanie pewnych zmian, pokazywanie pozostałych.
@end menu

@node Zmiana struktury, Pliki specjalne, , Niedociągnięcia
@subsection Obsługa zmian struktury katalogu
@cindex katalogi, zmiany struktury

@code{diff} i @code{patch} nie obsługują niektórych zmian struktury katalogu.
Na przykład, załóżmy, że jedno drzewo katalogowe zawiera katalog o nazwie
@samp{D}, w którym znajdują się jakieś pliki, a inne drzewo zawiera plik
o tej samej nazwie @samp{D}.  @samp{diff -r} nie wypisuje wystarczającej
informacji, by @code{patch} mógł wykonać przekształcenie poddrzewa
katalogowego w plik.

Powinna istnieć metoda wskazania, że plik został usunięty bez konieczności
przytaczania całej jego zawartości w pliku łaty.  Powinno być też możliwe
wskazanie programowi @code{patch}, że jakiś plik zmienił nazwę, nawet jeśli
nie ma sposobu, w jaki @code{diff} mógłby wygenerować taką informację.

Problemy te można rozwiązać poszerzając format wyjściowy @code{diff}
tak, by odzwierciedlał zmiany w strukturze katalogu i rozbudowując
@code{patch} tak, by rozumiał owe rozszerzenia.

@node Pliki specjalne, Niezwykłe nazwy, Zmiana struktury, Niedociągnięcia
@subsection Pliki nie będące ani katalogami ani zwykłymi plikami
@cindex pliki specjalne

Niektóre pliki nie są ani katalogami ani zwykłymi plikami - są to
niecodzienne pliki, jak dowiązania symboliczne, pliki specjalne urządzeń,
potoki nazwane i gniazda.  Obecnie @code{diff} traktuje dowiązania
symboliczne jak zwykłe pliki, a inne pliki specjalne tak jak zwykłe pliki
jeśli wskazano je na najwyższym poziomie, ale tylko zgłasza ich istnienie
@c                          @code{patch}, czy @code{diff} ?!!
przy porównywaniu katalogów.  Znaczy to, że @code{patch} nie potrafi
przedstawić zmian takich plików.  Na przykład, jeśli zmienimy wskazanie
pliku symbolicznego, to @code{diff} wypisze różnicę pomiędzy dwoma
wskazywanymi przezeń plikami, a nie zmianę dowiązania.

@c This might not be a good idea; is it wise for root to install devices
@c this way?
@code{diff} powinien opcjonalnie w specjalny sposób zgłaszać zmiany 
plików specjalnych, zaś @code{patch} należałoby poszerzyć, by rozumiał
takie rozszerzenie.

@node Niezwykłe nazwy, Narzucone ograniczenia, Pliki specjalne, Niedociągnięcia
@subsection Nazwy plików zawierające niezwykłe znaki
@cindex nazwy plików z niezwykłymi znakami

Jeśli nazwa pliku zawiera jakiś niezwykły znak, jak na przykład znak nowej
linii czy odstępu, @samp{diff -r} tworzy łatę, której @code{patch} nie
potrafi przeanalizować.  Problem leży po stronie formatu wyjścia @code{diff},
a samego @code{patch}, gdyż odpowiednio udziwnione nazwy plików mogą
spowodować, że @code{diff} utworzy łatę poprawną składniowo, ale łatającą
niewłaściwe pliki.  Do poprawnego obsługiwania wszelkich możliwych nazw
plików trzeba by odpowiednio poszerzyć format wyjścia tworzonego przez
@code{diff}.

@node Narzucone ograniczenia, Duże pliki, Niezwykłe nazwy, Niedociągnięcia
@subsection Narzucone ograniczenia
@cindex binarne pliki, łatanie
@cindex łatanie plików binarnych

GNU @code{diff} potrafi analizować dowolnie długie linie i pliki kończące
się niekompletnymi liniami.  Jednak @code{patch} nie umie łatać takich
plików.  Wewnętrzne ograniczenie długości linii dla @code{patch} powinno
zostać usunięte a program poszerzony tak, by poprawnie analizował zgłaszanie
przez @code{diff} niekompletnych linii.

@node Duże pliki, Ignorowanie zmian, Narzucone ograniczenia, Niedociągnięcia
@subsection Obsługa plików nie mieszczących się w pamięci
@cindex pliki, bardzo duże
@cindex bardzo duże pliki

@code{diff} dział wczytując oba pliki do pamięci. Metoda ta zawodzi jeśli
pliki są zbyt duże, a @code{diff} powinien mieć zabezpieczenie.

Jednym ze sposobów takiego zabezpieczenia jest sekwencyjne przeglądnięcie
plików w celu wyliczenia skrótów (kodów mieszających) linii i przypisanie
linii do klasy równoważności w oparciu tylko o skrót.  Potem porównanie
tych plików w zwykły sposób.  Da to trochę fałszywych dopasowań.

Następnie ponowne przeglądnięcie sekwencyjnie obu plików, ze sprawdzeniem
czy każde z dopasowań występuje w rzeczywistości.  Jeśli linie faktycznie
nie pasują do siebie, to zaznaczenie obu ``pasujących'' jako zmienionych.
Następnie utworzenie skryptu edycyjnego, tak jak zwykle.

Procedury wyjścia musiałyby być zmienione, by sekwencyjnie przeglądały
pliki szukając tekstu do wypisania.

@node Ignorowanie zmian,, Duże pliki, Niedociągnięcia
@subsection Ignorowanie pewnych zmian

Byłoby miło mieć możliwość podania dwu łańcuchów, jednego z @var{pliku1}
i jednego z @var{pliku2}, które byłyby uważane za pasujące do siebie.
Wówczas, jeśli tymi dwoma łańcuchami byłyby @samp{foo} i @samp{bar},
to jeżeli dwie linie różniłyby się tylko tym, że w miejscu @samp{foo}
w pierwszym pliku występowałoby @samp{bar} w drugim, to linie byłyby
traktowane jak identyczne.

Nie wiadomo dokładnie, jak ogólna mogłaby być, czy powinna być,
ta cecha, ani jaka powinna być dla niej składnia.

@node Błędy, , Niedociągnięcia, Plany
@section Zgłaszanie błędów
@cindex zgłaszanie błędów
@cindex błędy, zgłaszanie

Jeśli uważasz, że znalazłeś błąd w GNU @code{cmp}, @code{diff},
@code{diff3}, @code{sdiff} lub @code{patch}, proszę zgłoś go pisząc
na adres @samp{bug-gnu-utils@@prep.ai.mit.edu}.  Wyślij możliwie
najdokładniejszy opis problemu, łącznie z przykładowymi plikami wejściowymi,
które spowodowały błąd, jeśli są istotne.

Ponieważ Larry Wall od połowy 1998 nie wypuścił nowej wersji @code{patch},
a od tego czasu została zmieniona wersja GNU tego programu, proszę wysyłać
zgłoszenia błędów dotyczące @code{patch} zarówno do
@samp{bug-gnu-utils@@prep.ai.mit.edu}, jak i do @samp{lwall@@netlabs.com}.

@node Indeks pojęć, , Plany, Top
@unnumbered Skorowidz pojęć

@printindex cp

@shortcontents
@contents
@bye
