Każdy z plików posiada zestaw @dfn{praw dostępu} kontrolujących rodzaje
dostępu, jakie mają do niego użytkownicy. Prawa dla pliku są również nazywane
jego @dfn{trybem dostępu}. Mogą być przedstawiane w formie symbolicznej lub
jako liczba ósemkowa.

@menu
* Struktura trybu dostępu::     Struktura praw pliku.
* Tryby symboliczne::           Mnemoniczna reprezentacja praw.
* Tryby numeryczne::            Prawa jako liczby ósemkowe.
@end menu

@node Struktura trybu dostępu
@section Struktura praw pliku

Istnieją trzy rodzaje praw, jakie w stosunku do pliku może posiadać
użytkownik:

@enumerate
@item
@cindex odczytu, prawo
prawo do odczytu pliku. Dla katalogów oznacza ono prawo do przeglądania
(listowania) zawartości danego katalogu.
@item
@cindex zapisu, prawo
prawo do zapisu (zmiany) pliku. Dla katalogów oznacza ono prawo do
tworzenia i usuwania plików w danym katalogu.
@item
@cindex wykonywania, prawo
prawo do wykonywania pliku (uruchomienia go jako programu). Dla katalogów
oznacza ono prawo dostępu do plików w danym katalogu.
@end enumerate

Istnieją trzy kategorie użytkowników, którzy mogą mieć różne prawa
do wykonywania dowolnej z powyższych czynności dla pliku:

@enumerate
@item
właściciel pliku,
@item
inni użytkownicy należący do grupy pliku,
@item
wszyscy inni użytkownicy systemu.
@end enumerate

@cindex właściciel pliku, domyślny
@cindex grupa pliku, domyślna
Właściciel i grupa przypisywane są plikom podczas ich tworzenia. Zwykle
właścicielem jest bieżący użytkownik, a grupą jest grupa katalogu, w którym
znajduje się plik, ale może być różnie w zależności od systemu operacyjnego,
systemu plików, w którym jest tworzony plik i sposobu jego tworzenia.
Właściciela i grupę pliku zmienia się za pomocą przy pomocy poleceń
@code{chown} i @code{chgrp}.

Oprócz wymienionych powyżej trzech zestawów trzech uprawnień prawa pliku
zawierają trzy specjalne składniki, działające jedynie w odniesieniu do plików
wykonywalnych (programów) oraz, w niektórych systemach, katalogów:

@enumerate
@item
@cindex setuid
podczas wykonywania ustawia efektywny identyfikator użytkownika procesu
na identyfikator właściciela pliku (zwany @dfn{bitem setuid},
od "set user id"). Nie działa na katalogach.
@item
@cindex setgid
podczas wykonywania ustawia efektywny identyfikator grupy procesu
na identyfikator grupy pliku (zwany @dfn{bitem setgid}, od "set group id").
W niektórych systemach, zastosowany do katalogu ustawia dla plików w nim
tworzonych grupę danego katalogu, bez względu na grupę użytkownika, który
je tworzy.
@item
@cindex sticky
@cindex bit ochrony
@cindex ochrony, bit
@cindex przestrzeń wymiany, zachowywanie obrazu tekstu
@cindex obraz tekstu, zachowywanie w przestrzeni wymiany
@cindex katalogi tylko-do-dodwania
@cindex katalogi append-only
zachowuje tekst programu w przestrzeni wymiany (swap), tak by ładował
się szybciej przy uruchomieniu (zwany @dfn{sticky bit}, @dfn{bitem lepkim}
lub @dfn{bitem ochrony}).
W niektórych systemach, zastosowany do katalogu zabrania użytkownikom
usuwania w nim innych plików poza własnymi. Nazywane jest to ustawianiem
katalogu "tylko-do-dodawania" (@dfn{append-only}).
@end enumerate

@node Tryby symboliczne
@section Tryby symboliczne

@cindex symboliczne, tryby dostępu
@cindex tryby symboliczne
@dfn{Tryby symboliczne} pokazują zmiany praw do plików jako operacje
na jednoznakowych symbolach. Pozwalają na zmianę wszystkich lub wybranych
części praw plików, opcjonalnie w oparciu o ich uprzednie wartości i być może
również o aktualne ustawienie @code{umask} (@pxref{Umask a ochrona})).

Formatem trybów symbolicznych jest:

@example
@r{[}ugoa@dots{}@r{][[}+-=@r{][}rwxXstugo@dots{}@r{]}@dots{}@r{][},@dots{}@r{]}
@end example

Poniższe sekcje opisują operatory i inne szczegóły dotyczące trybów
symbolicznych.

@menu
* Nadawanie praw::               Podstawowe operacje na prawach dostępu.
* Kopiowanie praw::              Kopiowanie istniejących praw.
* Zmiana praw specjalnych::      Prawa specjalne.
* Warunkowa wykonywalność::      Warunkowa zmiana prawa wykonywalności.
* Dokonywanie wielu zmian::      Wykonywanie wielu zmian na raz.
* Umask a ochrona::              Efekt działania umask.
@end menu

@node Nadawanie praw
@subsection Nadawanie praw dostępu

Podstawowymi operacjami symbolicznymi na prawach pliku są dodawanie,
usuwanie i nadawanie praw, jakie mają pewni użytkownicy do czytania, zapisu
i wykonywania pliku. Operacje te mają następujący format:

@example
@var{użytkownicy} @var{operacja} @var{prawa}
@end example

@noindent
Spacje pomiędzy powyższymi trzema częściami pokazano wyłącznie dla czytelności
-- tryby symboliczne nie mogą zawierać spacji.

Część @var{użytkownicy} mówi, jakim użytkownikom zmieniany jest dostęp
do pliku. Składa się z jednej lub więcej liter (może też być pusta;
@pxref{Umask a ochrona}, gdzie opisano, co wówczas się dzieje).
Kiedy podano więcej niż jedną z tych liter, ich kolejność nie ma znaczenia.

@table @code
@item u
@cindex prawa dostępu właściciela pliku
(user) użytkownik, który jest właścicielem pliku
@item g
@cindex prawa dostępu grupy
(group) inni użytkownicy należący do grupy pliku
@item o
@cindex prawa dostępu innych użytkowników
(other) inni użytkownicy systemu;
@item a
(all) wszyscy użytkownicy; to samo co @samp{ugo}.
@end table

Część @var{operacja} mówi, jak zmienić zadanym użytkownikom prawa dostępu
do pliku, i jest jednym z następujących symboli:

@table @code
@item +
@cindex dodawanie praw dostępu
dodaje @var{prawa} do dowolnych praw pliku, jakie mają
już @var{użytkownicy}. Następuje uzupełnienie już posiadanych praw o podane.
@item -
@cindex usuwanie praw dostępu
@cindex odejmowanie praw dostępu
usuwa @var{prawa} spośród dowolnych praw pliku, jakie mają
już @var{użytkownicy}.
@item =
@cindex ustalanie praw dostępu
nadaje podane @var{prawa} jako jedyne prawa pliku, jakie powinni mieć do
niego @var{użytkownicy}. Usuwa ewentualne uprzednie prawa.
@end table

Część @var{prawa} mówi, jaki rodzaj dostępu do pliku powinien zostać zmieniony;
jest to zero lub więcej poniższych liter. Tak jak w przypadku części
@var{użytkownicy}, kolejność liter, jeśli jest więcej niż jedna, nie ma
znaczenia. Pominięcie części @var{prawa} przydatne jest tylko z operacją
@samp{=}, gdzie nie daje ona @var{użytkownikom} żadnego dostępu do pliku.

@table @code
@item r
@cindex prawo odczytu, symboliczne
prawo do odczytu (read) pliku
@item w
@cindex prawo zapisu, symboliczne
prawo do zapisu (write) pliku
@item x
@cindex prawo wykonywania, symboliczne
prawo do wykonywania (execution) pliku
@end table

Na przykład, aby dać każdemu prawo do odczytu i zapisu pliku, ale nie do
jego wykonywania, należy posłużyć się:

@example
a=rw
@end example

Usunięcie prawa zapisu dla wszystkich użytkowników innych niż właściciel pliku
można zrealizować przez:

@example
go-w
@end example

@noindent
Powyższe polecenie nie zmieni dostępu, jaki ma do pliku jego właściciel, nie
nie ma też wpływu na to, czy inni użytkownicy mogą czytać bądź wykonywać plik.

Chcąc nie dać nikomu poza właścicielem pliku żadnych praw do niego, można
posłużyć się podanym poniżej trybem. Inni użytkownicy mogą nadal usunąć plik,
jeżeli mają prawo zapisu w katalogu, w którym się on znajduje.

@example
go=
@end example

@noindent
Innym sposobem określenia tego samego jest:

@example
og-rxw
@end example

@node Kopiowanie praw
@subsection Kopiowanie istniejących praw

@cindex kopiowanie istniejących praw dostępu
@cindex prawa dostępu, kopiowanie istniejących
Można ustalić prawa pliku w oparciu o jego prawa już istniejące. By to zrobić
wystarczy zamiast stosowania @samp{r}, @samp{w} czy @samp{x} po operatorze użyć
liter @samp{u}, @samp{g} lub @samp{o}. Na przykład tryb
@example
o+g
@end example
@noindent
dodaje prawa dla użytkowników, którzy należą do grupy pliku do praw, jakie
posiadają inni użytkownicy pliku. Zatem, jeśli plik początkowo miał tryb 644
(@samp{rw-rw-r--}), to powyższe dopisanie zmieni mu tryb na 666
(@samp{rw-rw-rw-}).
Jeżeli tryb początkowo miał tryb 741 (@samp{rwxr----x}), to nastąpi
zmiana na tryb 745 (@samp{rwxr--r-x}). Operacje @samp{-} i @samp{=} działają
analogicznie.

@node Zmiana praw specjalnych
@subsection Zmiana praw specjalnych

@cindex zmiana praw specjalnych
Oprócz zmiany praw odczytu, zapisu i wykonywania pliku, można zmienić także
jego prawa specjalne.  @xref{Struktura trybu dostępu}, gdzie znajduje się ich
krótki opis.

W celu zmiany prawa pliku ustawiającego identyfikator użytkownika przy wykonaniu
należy użyć litery @samp{u} w części @var{użytkownicy} trybu symbolicznego oraz
@samp{s} w części @var{prawa}.

W celu zmiany prawa pliku ustawiającego identyfikator grupy przy wykonaniu
należy użyć litery @samp{g} w części @var{użytkownicy} trybu symbolicznego
oraz @samp{s} w części @var{prawa}.

W celu zmiany prawa pliku decydującego o pozostawieniu tekstu programu na
urządzeniu wymiany (swap), należy użyć litery @samp{o} w części @var{użytkownicy}
trybu symbolicznego oraz @samp{t} w części @var{prawa}.

Na przykład, chcąc dodać prawo ustawiania ID użytkownika dla programu, można
skorzystać z trybu

@example
u+s
@end example

Usunąć mu zarówno prawo ustawiania ID użytkownika jak i grupy, można trybem:

@example
ug-s
@end example

Użycie trybu

@example
o+t
@end example

spowoduje z kolei zachowanie programu na urządzeniu wymiany.

Pamiętaj, że prawa specjalne działają tylko w odniesieniu do plików
wykonywalnych, plus, w niektórych systemach, katalogach (w tym przypadku
mają inne znaczenie; @pxref{Struktura trybu dostępu}. Użycie @samp{a} w części
@var{użytkownicy} trybu symbolicznego nie powoduje zmian praw specjalnych.
Zatem,

@example
a+s
@end example

@noindent
@emph{nic nie robi}. Musisz użyć jawnie @samp{u}, @samp{g} lub @samp{o}
by zmienić prawa specjalne. Również kombinacje @samp{u+t}, @samp{g+t}
i @samp{o+s} nic nie robią.

Operator @samp{=} niezbyt się przydaje przy prawach specjalnych.
Na przykład, tryb:

@example
o=t
@end example

@noindent
spowoduje zachowanie pliku na urządzeniu wymiany, ale równocześnie usunie
wszystkie prawa odczytu, zapisu i wykonania, które mogli mieć wcześniej
użytkownicy nie należący do grupy pliku.

@node Warunkowa wykonywalność
@subsection Warunkowa wykonywalność

@cindex warunkowa wykonywalność
Istnieje jeszcze jeden specjalny typ praw symbolicznych: jeśli użyje się
@samp{X} zamiast @samp{x}, to prawo wykonywania jest zmieniane tylko wtedy,
gdy plik ma już prawo wykonywania lub jest to katalog. Zmienia on prawa
wykonywania dla katalogów nawet, jeśli uprzednio nie miały nadanego
żadnego prawa wykonywania.

Na przykład, ten tryb:

@example
a+X
@end example

@noindent
daje wszystkim użytkownikom prawo wykonywania plików (lub przeszukiwania
katalogów) jeśli ktoś już wcześniej je posiadał.

@node Dokonywanie wielu zmian
@subsection Dokonywanie wielu zmian

@cindex wiele równoczesnych zmian w prawach plików
Format trybów symbolicznych jest faktycznie bardziej złożony, niż opisano
to powyżej (@pxref{Nadawanie praw}). Udostępnia on dwa sposoby
dokonywania wielu zmian w prawach plików.

Sposób pierwszy polega na wielokrotnym określeniu części @var{operacja}
i @var{prawo} po części @var{użytkownicy} trybu symbolicznego.

Na przykład, tryb:

@example
og+rX-w
@end example

@noindent
daje użytkownikom innym niż właściciel pliku prawo odczytu oraz, jeśli jest
to katalog lub ktoś już ma prawo wykonywania tego pliku, daje im prawo
wykonywania; równocześnie odbiera im prawo zapisu tego pliku. Nie ma to
wpływu na prawa, jakie posiada do niego właściciel pliku. Powyższy tryb
jest równoważnikiem dwu trybów:

@example
og+rX
og-w
@end example

Drugi sposób dokonywania wielu zmian polega na określeniu więcej niż jednego
prostego trybu symbolicznego, oddzielonego od poprzedniego przecinkiem.
Na przykład, ten tryb:

@example
a+r,go-w
@end example

@noindent
nadaje każdemu prawo do odczytu pliku i usuwa prawo zapisu wszystkim
użytkownikom oprócz jego właściciela. Inny przykład:

@example
u=rwx,g=rx,o=
@end example

@noindent
nadaje wprost wszystkie nie-specjalne prawa pliku. (Nie daje użytkownikom
spoza grupy w ogóle żadnych praw do pliku.)

Opisane dwie metody mogą być ze sobą łączone. Ten tryb

@example
a+r,g+x-w
@end example

@noindent
daje wszystkim użytkownikom prawo odczytu pliku, użytkownikom należącym
do grupy pliku również prawo jego wykonywania, ale bez prawa zapisu.
Powyższy tryb można zapisać na kilka różnych sposobów. Innym sposobem jest:

@example
u+r,g+rx,o+r,g-w
@end example

@node Umask a ochrona
@subsection Umask a ochrona

@cindex umask a prawa dostępu
@cindex prawa dostępu a umask
Jeśli w trybie symbolicznym pominięto część określającą użytkowników, to
domyślnie jest ona przyjmowana za @samp{a} (dotyczy wszystkich użytkowników),
z wyjątkiem tego, że prawa @emph{ustawione} w zmiennej systemowej @code{umask}
@emph{nie są zmieniane}. Wartość @code{umask} można zmienić za pomocą
polecenia @code{umask}. Wartość domyślna tej zmiennej jest różna dla różnych
systemów.

@cindex rozdawanie praw dostępu
Pominięcie części @var{użytkownicy} trybu symbolicznego nie jest na ogół
użyteczne przy operacjach innych niż @samp{+}. Przydaje się przy @samp{+},
gdyż pozwala na użycie @code{umask} jako łatwo dostosowywalnej ochrony
przeciw rozdawaniu większych praw do plików niż faktycznie zamierzasz.

Na przykład, jeśli @code{umask} ma wartość 2, co usuwa prawa zapisu dla
użytkowników nie należących do grupy pliku, to tryb:

@example
+w
@end example

@noindent
dodaje prawo zapisu do pliku jego właścicielowi i innym użytkownikom należącym
do grupy pliku, ale @emph{nie} pozostałym użytkownikom.
Inaczej jest w przypadku trybu:

@example
a+w
@end example

@noindent
ignoruje on @code{umask} i @emph{daje} prawo zapisu do pliku wszystkim
użytkownikom.

@node Tryby numeryczne
@section Tryby numeryczne

@cindex numeryczne tryby dostępu
@cindex tryby dostępu, numeryczne
@cindex prawa dostępu do plików, numeryczne
@cindex liczby ósemkowe jako tryby plików
Prawa pliku są wewnętrznie zapisywane jako liczby całkowite.
Zamiast podawać tryb symbolicznie, można podać liczbę ósemkową (o podstawie
układu równej 8), odpowiadającą wewnętrznej reprezentacji nowego trybu.
Liczba ta jest zawsze interpretowana jako ósemkowa -- nie ma potrzeby dodawania
początkowego 0, tak jak w C. Tryb 0055 jest tym samym, co tryb 55.

Tryb liczbowy jest zwykle krótszy w zapisie niż odpowiadający mu tryb
symboliczny. Jego ograniczeniem jest jednak to, że nie można przy jego
określaniu korzystać z poprzednich praw pliku -- można jedynie nadawać
je bezwzględnie.

W większości systemów prawa nadane użytkownikowi, innym użytkownikom grupy
pliku i pozostałym użytkownikom spoza grupy są przechowywane jako trójki bitów,
każda przedstawiana przez jedną cyfrę ósemkową. Trzy prawa specjalne są także
zapamiętywane w pojedynczych bitach i zbiorczo reprezentowane są osobną
cyfrą ósemkową.
Układ bitów, poczynając od najmniejszej wartości, pokazano poniżej:

@example
Wartość  Odpowiednie
trybu    prawo dostępu

          Pozostali użytkownicy spoza grupy pliku:
   1      wykonanie (x)
   2      zapis (w)
   4      odczyt (r)

          Inni użytkownicy należący do grupy pliku:
  10      wykonanie (x)
  20      zapis (w)
  40      odczyt (r)

          Właściciel pliku:
 100      wykonanie (x)
 200      zapis (w)
 400      odczyt (r)

          Prawa specjalne:
1000      zachowuje obraz na urządzeniu wymiany
2000      ustawia ID grupy przy wykonaniu
4000      ustawia ID użytkownika przy wykonaniu
@end example

Na przykład, tryb liczbowy 4755 odpowiada trybowi symbolicznemu
@samp{u=rwxs,go=rx}, zaś tryb 664 trybowi @samp{ug=rw,o=r}.
Numeryczny tryb 0 odpowiada symbolicznemu @samp{ugo=}.
