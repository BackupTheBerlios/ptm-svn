.\" Automatically generated by Pod::Man version 1.15
.\" Tue Apr 16 00:10:08 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "CONFIG 1"
.TH CONFIG 1 "0.9.6c" "2002-04-16" "OpenSSL"
.UC
.SH "NAZWA"
.IX Header "NAZWA"
config \- biblioteka plików konfiguracyjnych OpenSSL \s-1CONF\s0
.SH "OPIS"
.IX Header "OPIS"
Biblioteka OpenSSL \s-1CONF\s0 służy do wczytywania plików konfiguracyjnych.
Obsługuje główny plik konfiguracyjny OpenSSL \fBopenssl.cnf\fR oraz
kilka innych, jak na przykład pliki \fB\s-1SPKAC\s0\fR i pliki rozszerzenia 
certyfikatów dla narzędzi \fBx509\fR.
.PP
Plik konfiguracyjny jest podzielony na sekcje. Każda z nich rozpoczyna się
wierszem \fB[ nazwa_sekcji ]\fR i kończy wraz z początkiem następnej sekcji
lub wraz z końcem pliku. Nazwa sekcji może się składać ze znaków
alfanumerycznych oraz znaków podkreślenia.
.PP
Pierwsza sekcja pliku konfiguracyjnego ma specjalne znaczenie 
i określana jest jako sekcja \fBdomyślna\fR. Zwykle nie ma nazwy 
i znajduje się na początku pliku, przed pierwszą nazwaną sekcją.
Nazwy są wyszukiwane najpierw w nazwanych sekcjach 
(o ile takie są), a następnie w sekcji domyślnej.
.PP
Środowisko jest mapowane na sekcję o nazwie \fB\s-1ENV\s0\fR.
.PP
Komentarze należy poprzedzać znakiem \fB#\fR.
.PP
Każda sekcja pliku konfiguracyjnego składa się z par nazwa/wartość
w formie \fBnazwa=wartość\fR.
.PP
Łańcuch \fBnazwa\fR może zawierać dowolne znaki alfanumeryczne jak również
niektóre znaki przestankowe, takie jak \fB.\fR \fB,\fR \fB;\fR oraz \fB_\fR.
.PP
Łańcuch \fBwartość\fR składa się z ciągu znaków pomiędzy znakiem \fB=\fR
a końcem wiersza, z wyłączeniem wszelkich spacji poprzedzających 
oraz końcowych.
.PP
Łańcuch wartości podlega przesłanianiu zmiennych. Robi się to poprzez
użycie formy \fB$zmienna\fR lub \fB${zmienna}\fR: zastępuje to wartość
nazwanej zmiennej w bieżącej sekcji. Można także zastąpić wartość
z innej sekcji przy użyciu formy \fB$sekcja::nazwa\fR lub \fB${sekcja::nazwa}\fR.
Zmienne środowiskowe przesłania się za pomocą konstrucji \fB\s-1ENV:\s0:nazwa\fR.
W ten sam sposób można także definiować zmienne środowiskowe, jeśli
tylko program wyszukuje je za pośrednictwem biblioteki \fB\s-1CONF\s0\fR
zamiast bezpośredniego wywołania \fB\f(BIgetenv()\fB\fR.
.PP
Można cytować poszczególne znaki poprzez dowolny znak cytowania
lub znak \fB\e\fR. Przez postawienie znaku \fB\e\fR na końcu wiersza
łańcuch \fBwartość\fR można rozciągać na kilka wierszy. Tę samą rolę
pełnią też sekwencje \fB\en\fR, \fB\er\fR, \fB\eb\fR oraz \fB\et\fR.
.SH "UWAGI"
.IX Header "UWAGI"
Jeżeli plik konfiguracyjny stara się przesłonić nieistniejącą zmienną,
podnoszony jest znacznik błędu i plik nie zostaje wczytany. Może się to
stać podczas próby przesłaniania nie zdefiniowanej zmiennej środowiskowej.
Na przykład domyślny plik konfiguracji OpenSSL używał wartości \fB\s-1HOME\s0\fR,
która może nie istnieć w systemach innych niż uniksy.
.PP
Można to obejść za pomocą sekcji \fBdomyślnej\fR, w której znajdą się
domyślne wartości: jeżeli wśrod zmiennych środowiska nie znajdzie 
się danej wartości, zostanie użyta właśnie wartość domyślna. Aby ten sposób 
działał właściwie, wartość domyślna musi zostać zdefiniowana w pliku
wcześniej niż przesłonięcie. Przykładów poszukaj w sekcji \fBPRZYKŁADY\fR.
.PP
Jeśli ta sama wartość jest zdefiniowana więcej niż jeden raz, 
wszystkie wystąpienia poza ostatnim zostaną pominięte bez komunikatu
o błędzie. W sytuacjach takich jak \s-1DN\s0 to samo pole może się pojawić
wielokrotnie \- rozwiązaniem jest zwykle pomijanie znaków przed
początkową \fB.\fR, na przykład:
.PP
.Vb 2
\& 1.OU="Moje pierwsze OU"
\& 2.OU="Moje Drugie OU"
.Ve
.SH "PRZYKŁADY"
.IX Header "PRZYKŁADY"
Oto przykładowy plik konfiguracyjny zawierający niektóre
z wymienionych wyżej elementów:
.PP
.Vb 1
\& # To jest sekcja domyślna.
.Ve
.Vb 3
\& HOME=/temp
\& RANDFILE= ${ENV::HOME}/.rnd
\& configdir=$ENV::HOME/config
.Ve
.Vb 1
\& [ sekcja_pierwsza ]
.Ve
.Vb 1
\& # Jesteśmy w pierwszej sekcji.
.Ve
.Vb 2
\& # Cytowanie pozwala na używanie spacji poprzedzających i końcowych
\& cokolwiek = " dowolna nazwa zmiennej "
.Ve
.Vb 3
\& tekst = Łańcuch który może \e
\& rozciągać się na kilka wierszy \e
\& przy użyciu \e\e na końcu wiersza
.Ve
.Vb 1
\& komunikat = Witaj świecie\en
.Ve
.Vb 1
\& [ sekcja_druga ]
.Ve
.Vb 1
\& pozdrowienia = $sekcja_pierwsza::komunikat
.Ve
Następny przykład pokazuje jak bezpiecznie przesłaniać zmienne środowiskowe.
.PP
Załóżmy, że chcemy aby zmienna \fBtmpfile\fR wskazywała nazwę
pliku roboczego. Katalog, w którym ten plik się znajduje,
można odczytać ze zmiennych środowiskowych \fB\s-1TEMP\s0\fR lub \fB\s-1TMP\s0\fR,
lecz mogą one nawet nie mieć nadanej żadnej wartości. Jeśli
po prostu użyjemy nazw zmiennych środowiskowych i okaże się,
że one nie istnieją, to podczas próby otwarcia pliku wystąpi błąd.
Przy wykorzystaniu sekcji domyślnej możemy spowodować, że 
najpierw będzie poszukiwana zmienna \fB\s-1TEMP\s0\fR, następnie \fB\s-1TMP\s0\fR, 
a jeśli żadna z nich nie będzie zdefiniowana, zostanie użyty 
katalog \fB/tmp\fR.
.PP
.Vb 5
\& TMP=/tmp
\& # Powyższa wartość jest używana kiedy TMP nie ma w środowisku
\& TEMP=$ENV::TMP
\& # Powyższa wartość jest używana kiedy TEMP nie ma w środowisku
\& tmpfile=${ENV::TEMP}/tmp.filename
.Ve
.SH "BŁĘDY"
.IX Header "BŁĘDY"
W obecnej chwili nie ma sposobu na wykorzystanie znaków w zapisie
ósemkowym \fB\ennn\fR. Wszystkie łańcuchy są zakończone znakiem braku
informacji, więc te znaki nie mogą pojawiac się w wartościach.
.PP
Cytowanie nie jest całkiem porządne: po użyciu sekwencji w rodzaju
\&\fB\en\fR nie można więcej używać cytowania w tym samym wierszu.
.PP
Pliki są wczytywane tylko w jednym przebiegu. Z tego powodu
przesłanianie zmiennych działa tylko jeżeli są one zdefiniowane
we wcześniejszych wierszach danego pliku.
.SH "ZOBACZ TAKŻE"
.IX Header "ZOBACZ TAKŻE"
x509(1), req(1), ca(1)
.SH "OD TŁUMACZA"
.IX Header "OD TŁUMACZA"
Tłumaczenie Daniel Koć <kocio@linuxnews.pl> na podstawie strony
podręcznika systemowego \fIconfig\fR\|(1) 0.9.6c, 15.04.2002.
