.\" Copyright (c) 1997 John S. Kallal (kallal@voicenet.com)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" Some changes by tytso and aeb.
.\"
.\" 2004-12-16, John V. Belmonte/mtk, Updated init and quit scripts
.\"
.\" Tłumaczenie na język polski: Paweł Olszewski (alder@amg.net.pl)
.\" {PTM/PO/0.2/02-06-1998/"urządzenia źródłowe liczb losowych jądra"}
.\" Aktualizacja: Robert Luberda <robert@debian.org>, Mar 2003, manpages 2.01
.\" $Id: random.4,v 1.7 2005/03/18 13:07:01 robert Exp $
.\"
.TH RANDOM 4 2003-10-25 "Linux" "Podręcznik programisty Linuksa"
.SH NAZWA
random, urandom \- urządzenia źródłowe liczb losowych jądra
.SH OPIS
Specjalne urządzenia znakowe \fB/dev/random\fP i \fB/dev/urandom\fP
(obecne w Linuksie od wersji 1.3.30) stanowią interfejs do wbudowanego w jądro
generatora liczb losowych. Plik \fB/dev/random\fP ma główny numer urządzenia
1 i poboczny numer 8. Plik \fB/dev/urandom\fP ma główny numer
urządzenia 1 i poboczny numer 9.
.LP
Generator liczb losowych zbiera szum środowiskowy ze sterowników
urządzeń i innych źródeł do puli losowej. Generator przechowuje
również szacunkową liczbę bitów szumu w puli losowej. Z owej puli
tworzone są liczby losowe.
.LP
W trakcie odczytu, urządzenie \fB/dev/random\fP będzie zwracać losowe
bajty, spośród oszacowanej liczby bitów szumu w puli.
\fB/dev/random\fP nadaje się najlepiej do zastosowań, w których
potrzebna jest losowość bardzo wysokiej jakości, jak np. jednorazowa
maska lub generowanie kluczy. Jeśli pula losowa jest pusta, odczyt z
\fB/dev/random\fP będzie wstrzymany do czasu zebrania dodatkowego
szumu środowiskowego.
.LP
Odczyt z urządzenia \fB/dev/urandom\fP zwróci tyle bajtów, ile
zażądano. W efekcie, jeśli nie ma wystarczającego chaosu w puli
losowej, zwracane wartości są teoretycznie narażone na atak
kryptograficzny w stosunku do algorytmów wykorzystywanych przez
sterownik. Wiedza na ten temat nie jest dostępna w obecnych nie
zastrzeżonych publikacjach, ale istnieje teoretyczna możliwość
przeprowadzenia takiego ataku. Jeśli jest to problemem w przypadku
twojego programu, użyj \fB/dev/random\fP.
.SH KONFIGURACJA
Jeśli w systemie nie ma plików \fB/dev/random\fP i \fB/dev/urandom\fP, można
je utworzyć przy użyciu następujących poleceń:

.nf
        mknod -m 644 /dev/random c 1 8
        mknod -m 644 /dev/urandom c 1 9
        chown root:root /dev/random /dev/urandom
.fi

Gdy Linux uruchamiany jest przy niewielkim udziale operatora, pula
losowa może być w dość przewidywalnym stanie. Faktyczna ilość szumu w
puli losowej jest wówczas poniżej ilości szacowanej. Aby
przeciwdziałać temu efektowi, pomocne jest zapamiętywanie informacji o
puli losowej pomiędzy kolejnymi uruchomieniami systemu. Aby działo
się to automatycznie, należy dodać następujące wiersze do stosownych
skryptów startowych Linuksa:

.nf
	echo "Inicjowanie generatora liczb losowych w jądrze..."
	random_seed=/var/run/random-seed
	# Przechowanie wartości losowej od jednego startu systemu
	# do kolejnego startu. Ładujemy, a potem zachowujemy całą
	# pulę losową.
	if [ -f $random_seed ]; then
	    cat $random_seed >/dev/urandom
	else
	    touch $random_seed
	fi
	chmod 600 $random_seed
	poolfile=/proc/sys/kernel/random/poolsize
	[ -r $poolfile ] && bytes=`cat $poolfile` || bytes=512
	dd if=/dev/urandom of=$random_seed count=1 bs=$bytes
.fi

Trzeba również dodać następujące wiersze do stosownego skryptu uruchamianego
podczas zamykania systemu Linuksa:

.nf
 	# Przechowanie losowych danych pomiędzy wyłączeniem a wyłą-
	# czeniem komputera. Zachowywanie puli losowej generatora.
 	echo "Zachowywanie danych losowych..."
	random_seed=/var/run/random-seed
	touch $random_seed
	chmod 600 $random_seed
	poolfile=/proc/sys/kernel/random/poolsize
	[ -r $poolfile ] && bytes=`cat $poolfile` || bytes=512
	dd if=/dev/urandom of=$random_seed count=1 bs=$bytes
.fi
.SH "INTERFEJS PROC"
Pliki w katalogu
.I /proc/sys/kernel/random
(obecnym od wersji 2.3.16) są dodatkowym intefejsem do urządzenia
.BR /dev/random .
.LP
Plik z prawami tylko do odczytu
.I entropy_avail
dostarcza dostępną pulę losową. Zazwyczaj będzie to 4096 (bitów),
całość dostępnej puli.
.LP
Plik
.I poolsize
podaje rozmiar puli losowej. Zazwyczaj \- 512 (bajtów). Może być zmienione
na dowolną wartość, dla której dostępny jest algorytm. Obecnie możliwe
wartości to: 32, 64, 128, 256, 512, 1024, 2048.
.LP
Plik
.I read_wakeup_threshold
zawiera liczbę bitów entropii potrzebnej do obudzenia procesu, który
zasnął, czekając na entropię z pliku
.BR /dev/random .
Domyślnie \- 64.
Plik
.I write_wakeup_threshold
zawiera liczbę bitów entropii poniżej której zostanie uśpiony
proces, który wykona
.I select()
lub
.IR poll() ,
aby otworzyć do zapisu urządzenie
.BR /dev/random .
Wartości te mogą być zmienione przez zapis do tych plików.
.LP
Pliki tylko do odczytu
.I uuid
i
.I boot_id
zawierają losowe łańcuchy znaków, takie
jak 6fd5a44b-35f4-4ad4-a9b9-6b9be13e1fe9.
Pierwszy z tych plików jest generowany na nowo przy każdym odczycie, a drugi
jest generowany tylko raz.
.SH PLIKI
/dev/random
.br
/dev/urandom
.SH AUTOR
Generator liczb losowych w jądrze został napisany przez Theodore'a Ts'o
(tytso@athena.mit.edu).
.SH "ZOBACZ TAKŻE"
mknod (1)
.br
RFC 1750, "Randomness Recommendations for Security" (Zalecenia dotyczące
bezpieczeństwa losowości)
