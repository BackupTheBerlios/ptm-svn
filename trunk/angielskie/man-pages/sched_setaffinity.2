.\" man2/sched_setaffinity.2 - sched_setaffinity and sched_getaffinity man page
.\"
.\" Copyright (C) 2002 Robert Love
.\" and Copyright (C) 2006 Michael Kerrisk
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" 2002-11-19 Robert Love <rml@tech9.net> - initial version
.\" 2004-04-20 mtk - fixed description of return value
.\" 2004-04-22 aeb - added glibc prototype history
.\" 2005-05-03 mtk - noted that sched_setaffinity may cause thread 
.\"	migration and that CPU affinity is a per-thread attribute.
.\" 2006-02-03 mtk -- Major rewrite
.\"
.TH SCHED_SETAFFINITY 2 2006-02-03 "Linux" "Linux Programmer's Manual"
.SH NAME
sched_setaffinity, sched_getaffinity, CPU_CLR, CPU_ISSET, CPU_SET, CPU_ZERO \
\- set and get a process's CPU affinity mask
.SH SYNOPSIS
.nf
.B #include <sched.h>
.sp
.BI "int sched_setaffinity(pid_t " pid ", unsigned int " cpusetsize ,
.BI "                      cpu_set_t *" mask );
.sp
.BI "int sched_getaffinity(pid_t " pid ", unsigned int " cpusetsize ,
.BI "                      cpu_set_t *" mask );
.sp
.BI "void CPU_CLR(int " cpu ", cpu_set_t *" set );
.br
.BI "int CPU_ISSET(int " cpu ", cpu_set_t *" set );
.br
.BI "void CPU_SET(int " cpu ", cpu_set_t *" set );
.br
.BI "void CPU_ZERO(cpu_set_t *" set );
.fi
.SH DESCRIPTION
A process's CPU affinity mask determines the set of CPUs on which
it is eligible to run.
On a multiprocessor system, setting the CPU affinity mask
can be used to obtain performance benefits.  
For example,
by dedicating one CPU to a particular process 
(i.e., setting the affinity mask of that process to specify a single CPU, 
and setting the affinity mask of all other processes to exclude that CPU), 
it is possible to ensure maximum execution speed for that process.
Restricting a process to run on a single CPU also prevents
the performance cost caused by the cache invalidation that occurs 
when a process ceases to execute on one CPU and then 
recommences execution on a different CPU.

A CPU affinity mask is represented by the 
.I cpu_set_t 
structure, a "CPU set", pointed to by
.IR mask .
Four macros are provided to manipulate CPU sets.
.BR CPU_ZERO ()
clears a set.
.BR CPU_SET ()
and
.BR CPU_CLR ()
respectively add and remove a given CPU from a set.
.BR CPU_ISSET ()
tests to see if a CPU is part of the set; this is useful after
.BR sched_getaffinity ()
returns.
The first available CPU on the system corresponds to a
.I cpu
value of 0, the next CPU corresponds to a
.I cpu
value of 1, and so on.
The constant
.B CPU_SETSIZE
(1024) specifies a value one greater than the maximum CPU 
number that can be stored in a CPU set.

.BR sched_setaffinity ()
sets the CPU affinity mask of the process whose ID is
.IR pid
to the value specified by
.IR mask .
If
.I pid
is zero, then the calling process is used.
The argument
.I cpusetsize
is the length (in bytes) of the data pointed to by
.IR mask .
Normally this argument would be specified as
.IR "sizeof(cpu_set_t)" .

If the process specified by
.I pid
is not currently running on one of the CPUs specified in
.IR mask ,
then that process is migrated to one of the CPUs specified in
.IR mask .

.BR sched_getaffinity ()
writes the affinity mask of the process whose ID is
.IR pid
into the 
.I cpu_set_t
structure pointed to by
.IR mask .
The 
.I cpusetsize
argument specifies the size (in bytes) of
.IR mask .
If
.I pid
is zero, then the mask of the calling process is returned.
.SH "RETURN VALUE"
On success,
.BR sched_setaffinity ()
and
.BR sched_getaffinity ()
return 0.
On error, \-1 is returned, and
.I errno
is set appropriately.
.SH ERRORS
.TP
.B EFAULT
A supplied memory address was invalid.
.TP
.B EINVAL
The affinity bitmask
.I mask
contains no processors that are physically on the system,
.\" The following can only (?) occur with the raw sched_getaffinity() 
.\" system call (MTK, 3 Feb 2006):
or 
.I cpusetsize
is smaller than the size of the affinity mask used by the kernel.
.TP
.B EPERM
The calling process does not have appropriate privileges.
The process calling
.BR sched_setaffinity ()
needs an effective user ID equal to the user ID or effective user ID
of the process identified by
.IR pid ,
or it must possess the
.IR CAP_SYS_NICE
capability.
.TP
.B ESRCH
The process whose ID is \fIpid\fR could not be found.
.SH "CONFORMING TO"
These system calls are Linux specific.
.SH "NOTES"
The affinity mask is actually a per-thread attribute that can be
adjusted independently for each of the threads in a thread group.
The value returned from a call to
.BR gettid (2)
can be passed in the argument
.IR pid .

A child created via 
.BR fork (2)
inherits its parent's CPU affinity mask.
The affinity mask is preserved across an
.BR execve (2).

This manual page describes the glibc interface for the CPU affinity calls.
The actual system call interface is slightly different, with the 
.I mask
being typed as
.IR "unsigned long *" ,
reflecting that the fact that the underlying implementation of CPU 
sets is a simple bitmask.
On success, the raw 
.BR sched_getaffinity ()
system call returns the size (in bytes) of the 
.I cpumask_t
data type that is used internally by the kernel to 
represent the CPU set bitmask.
.SH "HISTORY"
The CPU affinity system calls were introduced in Linux kernel 2.5.8.
The library interfaces were introduced in glibc 2.3. 
Initially, the glibc interfaces included a
.I cpusetsize
argument.
In glibc 2.3.2, the
.I cpusetsize
argument was removed, but this argument was restored in glibc 2.3.4.
.fi
.SH "SEE ALSO"
.BR clone (2),
.BR getpriority (2),
.BR gettid (2),
.BR nice (2),
.BR sched_get_priority_max (2),
.BR sched_get_priority_min (2),
.BR sched_getscheduler (2),
.BR sched_setscheduler (2),
.BR setpriority (2),
.BR capabilities (7)
.PP
.BR sched_setscheduler (2)
has a description of the Linux scheduling scheme.
